a:98:{s:27:"dev/scripts/api_analyze.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:1:{s:22:"\DevTools\Utilities\IO";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:7:{s:10:"ACC_PUBLIC";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:33:"Access modifier constant - Public";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:13:"ACC_PROTECTED";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:36:"Access modifier constant - Protected";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:11:"ACC_PRIVATE";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:34:"Access modifier constant - Private";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:12:"ACC_ABSTRACT";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:35:"Access modifier constant - Abstract";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:9:"ACC_FINAL";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:32:"Access modifier constant - Final";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:10:"ACC_STATIC";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:33:"Access modifier constant - Static";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:12:"ACC_DOCBLOCK";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:35:"Access modifier constant - Docblock";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:10:{i:0;a:4:{s:8:"function";s:7:"analyze";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:48:"Fetches all analyzable files into one huge array";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:24:"The path to analyze from";}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:80:"Returns an array with all the files that can be analyzed from the root directory";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"function";s:13:"dump_metadata";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:35:"Dumps metadata for printf arguments";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:21:"The meta data to dump";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:27:"Returns a string for printf";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"function";s:23:"resolve_namespace_alias";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:51:"Resolves a class object to its full namespaced path";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:74:"The root namespace, from the namespace declaration in the top of each file";}i:1;a:2:{i:0;s:5:"array";i:1;s:71:"Array of aliases to use for the class object when attempting to resolve";}}i:1;a:2:{i:0;s:6:"string";i:1;s:16:"The class object";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:56:"Returns the resolved namespaced path to the class object";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"function";s:18:"lexical_next_index";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:34:"Finds the next lexical token index";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:21:"The tokens copy array";}i:1;a:2:{i:0;s:7:"integer";i:1;s:21:"The token start index";}}i:1;a:2:{i:0;s:14:"integer|string";i:1;s:17:"The token to find";}}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:57:"Returns the token index found token, and false on failure";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"function";s:12:"lexical_scan";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:64:"Scans from the current pointer until the first match token match";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:21:"The tokens copy array";}i:1;a:2:{i:0;s:7:"integer";i:1;s:21:"The token start index";}}i:1;a:2:{i:0;s:14:"integer|string";i:1;s:17:"The token to find";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:51:"Returns the token content if found, otherwise false";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"function";s:19:"lexical_scan_concat";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:51:"Scans and concates the matched tokens into a string";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:21:"The tokens copy array";}i:1;a:2:{i:0;s:7:"integer";i:1;s:21:"The token start index";}}i:1;a:2:{i:0;s:14:"integer|string";i:1;s:52:"The stop token, when this is hit the scanner returns";}}i:1;a:2:{i:0;s:7:"boolean";i:1;s:40:"Whether to skip whitespace tokens or not";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:90:"Returns the concated string with the tokens between the current pointer and the stop token";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:6;a:4:{s:8:"function";s:22:"lexical_scan_separator";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:72:"Scans a statement and breaks it into an array based on a separator token";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:21:"The tokens copy array";}i:1;a:2:{i:0;s:7:"integer";i:1;s:21:"The token start index";}}i:1;a:2:{i:0;s:14:"integer|string";i:1;s:19:"The separator token";}}i:1;a:2:{i:0;s:14:"integer|string";i:1;s:32:"The stop token, end of statement";}}i:1;a:2:{i:0;s:7:"boolean";i:1;s:40:"Whether to skip whitespace tokens or not";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:89:"Returns an array with each part as a new value, like explode() and empty array on failure";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:7;a:4:{s:8:"function";s:31:"lexical_scan_extends_implements";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:62:"Lexical scan extend and implements tokens to find their childs";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:21:"The tokens copy array";}i:1;a:2:{i:0;s:7:"integer";i:1;s:21:"The token start index";}}i:1;a:2:{i:0;s:14:"integer|string";i:1;s:15:"The start token";}}i:1;a:2:{i:0;s:5:"array";i:1;s:79:"Stop tokens, if any of the tokens in this array is hit, the scanner will return";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:45:"Returns an array with the matched child parts";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:8;a:4:{s:8:"function";s:16:"lexical_docblock";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:24:"Lexical docblock scanner";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:21:"The tokens copy array";}i:1;a:2:{i:0;s:7:"integer";i:1;s:21:"The token start index";}}i:1;a:2:{i:0;s:5:"array";i:1;s:15:"The stop tokens";}}i:1;a:2:{i:0;s:9:"\stdClass";i:1;s:29:"The Work-In-Progress instance";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:83:"Returns an array with structured docblock information on success and false on error";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:9;a:4:{s:8:"function";s:22:"lexical_docblock_parse";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:23:"Lexical docblock parser";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:31:"The docblock tag value to parse";}i:1;a:2:{i:0;s:9:"\stdClass";i:1;s:29:"The Work-In-Progress instance";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:73:"Returns a structured array with the docblock variables and false on error";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:32:"dev/scripts/check_dm_phrases.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:2:{s:22:"\DevTools\Utilities\IO";s:0:"";s:20:"\Tuxxedo\Datamanager";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:3:{s:12:"ADAPTERS_DIR";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:31:"Datamanager datapters directory";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:12:"TUXXEDO_SELF";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:29:"Compatibility constant - self";s:4:"tags";a:1:{s:3:"var";s:4:"void";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:17:"TUXXEDO_USERAGENT";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:35:"Compatibility constant - user agent";s:4:"tags";a:1:{s:3:"var";s:4:"void";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:27:"dev/scripts/compile_dev.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:3:{s:22:"\DevTools\Utilities\IO";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:26:"\Tuxxedo\Template\Compiler";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:34:"dev/scripts/includes/bootstrap.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:5:{s:13:"TUXXEDO_DEBUG";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:27:"Set the debug mode constant";s:4:"tags";a:1:{s:3:"var";s:7:"boolean";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:11:"TUXXEDO_DIR";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:136:"Sets the path to where the root script is, if the
constant CWD is defined before including this file,
then it will be used as root dir";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:15:"TUXXEDO_LIBRARY";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:21:"Sets the library path";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:11:"TIMENOW_UTC";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:25:"Set the UTC time constant";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:14:"TUXXEDO_PREFIX";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:34:"Set database table prefix constant";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:30:"dev/scripts/sync_templates.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:1:{s:22:"\DevTools\Utilities\IO";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:12:"TEMPLATE_DIR";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:23:"Template directory path";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:23:"dev/tools/datastore.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:1:{s:15:"\Tuxxedo\Helper";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:32:"dev/tools/includes/bootstrap.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:4:{s:15:"\DevTools\Style";s:0:"";s:14:"\Tuxxedo\Input";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";s:16:"\Tuxxedo\Version";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:7:{s:11:"TUXXEDO_DIR";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:136:"Sets the path to where the root script is, if the
constant CWD is defined before including this file,
then it will be used as root dir";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:15:"TUXXEDO_LIBRARY";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:21:"Sets the library path";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:12:"TUXXEDO_SELF";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:175:"URL of the current page being executed, including its
query string, note that this constant is using the
raw data. It is up to the user of this constant to
proper filter it";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:17:"TUXXEDO_USERAGENT";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:143:"User agent string if any for the browsing user, note that
like the TUXXEDO_SELF constant, this have to be escaped if
used in database context";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:14:"TUXXEDO_PREFIX";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:34:"Set database table prefix constant";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:11:"TIMENOW_UTC";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:25:"Set the UTC time constant";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:13:"TUXXEDO_DEBUG";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:27:"Set the debug mode constant";s:4:"tags";a:1:{s:3:"var";s:7:"boolean";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:19:"dev/tools/index.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:21:"dev/tools/options.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:2:{s:20:"\Tuxxedo\Datamanager";s:0:"";s:14:"\Tuxxedo\Input";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:22:"dev/tools/sessions.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:2:{s:14:"\DevTools\User";s:0:"";s:15:"\Tuxxedo\Helper";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:20:"dev/tools/styles.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:2:{s:20:"\Tuxxedo\Datamanager";s:0:"";s:14:"\Tuxxedo\Input";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:19:"dev/tools/tools.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:5:{s:14:"\DevTools\Test";s:0:"";s:14:"\DevTools\User";s:0:"";s:15:"\Tuxxedo\Helper";s:0:"";s:14:"\Tuxxedo\Input";s:0:"";s:26:"\Tuxxedo\Template\Compiler";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:19:"dev/tools/users.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:3:{s:14:"\DevTools\User";s:0:"";s:20:"\Tuxxedo\Datamanager";s:0:"";s:14:"\Tuxxedo\Input";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:9:"index.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:2:{s:17:"\Tuxxedo\Template";s:0:"";s:16:"\Tuxxedo\Version";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:28:"library/DevTools/Session.php";a:6:{s:10:"namespaces";a:1:{s:9:"\DevTools";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:17:"\DevTools\Session";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:5:"array";i:1;s:23:"The configuration array";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:15:"Object instance";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:9:"\DevTools";s:7:"extends";s:16:"\Tuxxedo\Session";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:157:"DevTools session interface override. This class overrides
the options and 'bakes' them into the class so that it can
be used without loading the datastore.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:26:"library/DevTools/Style.php";a:6:{s:10:"namespaces";a:1:{s:9:"\DevTools";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{s:17:"\Tuxxedo\Registry";s:0:"";s:22:"\Tuxxedo\Style\Storage";s:0:"";}s:7:"classes";a:1:{s:15:"\DevTools\Style";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:29:"Constructs a new style object";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:5:"array";i:1;s:23:"The configuration array";}}i:1;a:2:{i:0;s:5:"array";i:1;s:17:"The options array";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:16:"getSidebarWidget";s:8:"docblock";a:2:{s:11:"description";s:30:"Gets a sidebar widget template";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"boolean";i:1;s:51:"Reference to check whether a hook was called or not";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:69:"Returns the template contents on success and boolean false on failure";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:9:"\DevTools";s:7:"extends";s:14:"\Tuxxedo\Style";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:151:"Development Tools styling class, this class overrides the
default styling class so we can overload the default style
storage engines and use our own.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:43:"library/DevTools/Style/Storage/DevTools.php";a:6:{s:10:"namespaces";a:1:{s:23:"\DevTools\Style\Storage";a:2:{s:8:"docblock";a:2:{s:11:"description";s:116:"Development tools style storage namespace. This namespace is for the special
overrides used when loading templates.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{s:17:"\Tuxxedo\Registry";s:0:"";s:14:"\Tuxxedo\Style";s:0:"";s:33:"\Tuxxedo\Style\Storage\Filesystem";s:0:"";}s:7:"classes";a:1:{s:32:"\DevTools\Style\Storage\DevTools";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:31:"Constructs a new storage engine";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:14:"\Tuxxedo\Style";i:1;s:29:"Reference to the style object";}}i:1;a:2:{i:0;s:6:"object";i:1;s:44:"Object reference to the templates data table";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"exists";s:8:"docblock";a:2:{s:11:"description";s:56:"Checks whether a template file exists on the file system";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:33:"The name of the template to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:56:"Returns true if the template file exists otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:23:"\DevTools\Style\Storage";s:7:"extends";s:33:"\Tuxxedo\Style\Storage\Filesystem";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:137:"Development Tools style storage, this class overrides the
default filesystem storage engine so we can define our own
template location.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:25:"library/DevTools/Test.php";a:6:{s:10:"namespaces";a:1:{s:9:"\DevTools";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:14:"\DevTools\Test";a:8:{s:9:"constants";a:5:{i:0;a:4:{s:8:"constant";s:12:"OPT_REQUIRED";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Option constant - test is required";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:12:"OPT_OPTIONAL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Option constant - test is optional";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:13:"OPT_EXTENSION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:39:"Option constant - tests a PHP extension";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:11:"OPT_VERSION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Option constant - tests versioning";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:12:"OPT_FUNCTION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:42:"Option constant - tests function existance";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:7:"options";s:8:"docblock";a:2:{s:11:"description";s:15:"Option bitfield";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:4:"argv";s:8:"docblock";a:2:{s:11:"description";s:17:"Testing arguments";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:4:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:26:"Constructs a new test case";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:53:"The options bitfield, using the OPT_* class constants";}i:1;a:2:{i:0;s:5:"array";i:1;s:45:"The arguments that needs to be tested against";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"isRequired";s:8:"docblock";a:2:{s:11:"description";s:27:"Check if a test is required";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:52:"Returns true if the test is required otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"isOptional";s:8:"docblock";a:2:{s:11:"description";s:27:"Check if a test is optional";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:52:"Returns true if the test is optional otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:4:"test";s:8:"docblock";a:2:{s:11:"description";s:22:"Executes the test case";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:48:"Returns true if the test passed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:9:"\DevTools";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:82:"Minor testing class, used for testing availability for
various requirement checks";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:25:"library/DevTools/User.php";a:6:{s:10:"namespaces";a:1:{s:9:"\DevTools";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{s:20:"\Tuxxedo\Datamanager";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:14:"\DevTools\User";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:11:"Constructor";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:9:"\DevTools";s:7:"extends";s:13:"\Tuxxedo\User";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:179:"DevTools user class, this class is used to bypass some of the
restrictions the core user class prohibits in order to ease
the code for some of the development tools and testing.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:33:"library/DevTools/Utilities/IO.php";a:6:{s:10:"namespaces";a:1:{s:19:"\DevTools\Utilities";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:16:"\Tuxxedo\Version";s:0:"";}s:7:"classes";a:1:{s:22:"\DevTools\Utilities\IO";a:8:{s:9:"constants";a:5:{i:0;a:4:{s:8:"constant";s:9:"TAG_START";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:44:"Tag mode constant - indicates start of a tag";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:7:"TAG_END";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:42:"Tag mode constant - indicates end of a tag";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:10:"STYLE_BOLD";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:41:"Style mode constant - indicates bold text";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:12:"STYLE_ITALIC";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:43:"Style mode constant - indicates italic text";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:15:"STYLE_UNDERLINE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:47:"Style mode constant - indicates underlined text";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:5:"depth";s:8:"docblock";a:2:{s:11:"description";s:31:"Nesting level of block elements";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:7:"methods";a:10:{i:0;a:3:{s:6:"method";s:5:"isCli";s:8:"docblock";a:2:{s:11:"description";s:47:"Checks if the script is running using a console";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the client is a console, otherwise false for webservers";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"signature";s:8:"docblock";a:2:{s:11:"description";s:21:"Engine signature line";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"input";s:8:"docblock";a:2:{s:11:"description";s:243:"Gets an input variable, this uses argv in CLI and $_GET in web

In CLI, arguments must be prefixed with a hyphen ('-') and have
a space (ASCII 0x20) or it will return the default value.


echo IO::input('arg1') . ' ' . IO::input('arg2');";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:19:"The argument to get";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:31:"The default value used on error";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:70:"Returns the value as a string, and false if the argument was not found";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:5:"error";s:8:"docblock";a:2:{s:11:"description";s:28:"Prints a serve error message";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"The error message";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:66:"Whether or not to abort execution of the script (defaults to true)";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:8:"headline";s:8:"docblock";a:2:{s:11:"description";s:17:"Writes a headline";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"The headline text";}i:1;a:2:{i:0;s:7:"integer";i:1;s:80:"The headline size (web only), for CLI this works as the number of EOL's to apply";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:2:"ul";s:8:"docblock";a:2:{s:11:"description";s:39:"Starts or end writing an unordered list";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"integer";i:1;s:56:"Either TAG_START or TAG_END class constants as a boolean";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:2:"li";s:8:"docblock";a:2:{s:11:"description";s:44:"Writes a list item, optionally using a style";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:18:"The list item text";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"The style bitfield, consisting of the STYLE_XXX constants";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:4:"text";s:8:"docblock";a:2:{s:11:"description";s:46:"Writes a text string, optionally using a style";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:8:"The text";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"The style bitfield, consisting of the STYLE_XXX constants";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:3:"eol";s:8:"docblock";a:2:{s:11:"description";s:32:"Repeats an end of line character";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"integer";i:1;s:26:"The times to repeat an EOL";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:28:"Returns the EOLs as a string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:5:"style";s:8:"docblock";a:2:{s:11:"description";s:20:"Styles a text string";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:15:"The text buffer";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"The style bitfield, consisting of the STYLE_XXX constants";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:"Returns the style string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:19:"\DevTools\Utilities";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:147:"Input/Output writer. This class is designed to make basic scripts
work in CLI and in a browser without having to make alot of if/else
constructs.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:8:"DevTools";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:30:"library/DevTools/functions.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:3:{s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";s:13:"\Tuxxedo\User";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:3:{i:0;a:4:{s:8:"function";s:14:"recursive_glob";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:25:"A recursive glob function";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:30:"The glob expression to execute";}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:67:"Returns an array containing the matched elements and false on error";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"function";s:10:"test_login";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:59:"Tests a log in without interfering with the current session";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:19:"The user identifier";}i:1;a:2:{i:0;s:6:"string";i:1;s:17:"The user password";}}i:1;a:2:{i:0;s:6:"string";i:1;s:25:"The user identifier field";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:60:"Returns true if the login was successful and otherwise false";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"function";s:26:"devtools_exception_handler";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:26:"Extended exception handler";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:10:"\Exception";i:1;s:23:"The exception to handle";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:38:"library/DevTools/functions_options.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:4:{i:0;a:4:{s:8:"function";s:27:"options_categories_dropdown";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:56:"Generates the markup for the available option categories";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:35:"The current option category, if any";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:49:"Returns the markup code for the option categories";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"function";s:18:"options_categorize";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:33:"Categorizes the a list of options";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:121:"The options to categorize, uses the key as option name, and value as an array where an index named 'category' must exists";}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:29:"Returns the categorized array";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"function";s:15:"var_dump_option";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:66:"Returns a var_dump() a-like syntax for an option
and its datatype";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:19:"The option datatype";}i:1;a:2:{i:0;s:6:"string";i:1;s:16:"The option value";}}i:1;a:2:{i:0;s:7:"boolean";i:1;s:51:"Whether to escape HTML characters for string values";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:77:"Returns a string containing the datatype and its value and 'unknown' on error";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"function";s:19:"var_typecast_option";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:34:"Converts a value to an option type";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:40:"The one character option type: b, i etc.";}i:1;a:2:{i:0;s:6:"string";i:1;s:20:"The value to convert";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:70:"Converts the value into the desired type, and string for unknown types";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:37:"library/DevTools/functions_widget.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:3:{s:15:"\DevTools\Style";s:0:"";s:14:"\Tuxxedo\Input";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:4:{i:0;a:4:{s:8:"function";s:21:"widget_hook_datastore";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:32:"Widget hook function - datastore";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:15:"\Devtools\Style";i:1;s:25:"The Devtools style object";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:31:"The template name of the widget";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:35:"Returns the compiled sidebar widget";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"function";s:18:"widget_hook_styles";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:29:"Widget hook function - styles";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:15:"\Devtools\Style";i:1;s:25:"The Devtools style object";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:31:"The template name of the widget";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:35:"Returns the compiled sidebar widget";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"function";s:20:"widget_hook_sessions";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:31:"Widget hook function - sessions";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:15:"\Devtools\Style";i:1;s:25:"The Devtools style object";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:31:"The template name of the widget";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:35:"Returns the compiled sidebar widget";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"function";s:17:"widget_hook_users";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:28:"Widget hook function - users";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:15:"\Devtools\Style";i:1;s:25:"The Devtools style object";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:31:"The template name of the widget";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:35:"Returns the compiled sidebar widget";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:29:"library/Tuxxedo/Bootstrap.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:18:"\Tuxxedo\Bootstrap";a:8:{s:9:"constants";a:11:{i:0;a:4:{s:8:"constant";s:12:"MODE_MINIMAL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:24:"Bootstrap mode - Minimal";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:11:"MODE_NORMAL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:23:"Bootstrap mode - Normal";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:11:"MODE_CUSTOM";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:23:"Bootstrap mode - Custom";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:9:"FLAG_CORE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:18:"Loader flag - Core";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:9:"FLAG_DATE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:18:"Loader flag - Date";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"constant";s:13:"FLAG_DATABASE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:22:"Loader flag - Database";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:6;a:4:{s:8:"constant";s:14:"FLAG_DATASTORE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:23:"Loader flag - Datastore";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:7;a:4:{s:8:"constant";s:9:"FLAG_INTL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Loader flag - Internationalization";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:8;a:4:{s:8:"constant";s:12:"FLAG_OPTIONS";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:21:"Loader flag - Options";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:9;a:4:{s:8:"constant";s:10:"FLAG_STYLE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:19:"Loader flag - Style";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:10;a:4:{s:8:"constant";s:9:"FLAG_USER";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:18:"Loader flag - User";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:4:{i:0;a:3:{s:8:"property";s:6:"loaded";s:8:"docblock";a:2:{s:11:"description";s:46:"Holds which elements thats been loaded (flags)";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:5:"hooks";s:8:"docblock";a:2:{s:11:"description";s:26:"Holds the registered hooks";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:12:"preloadables";s:8:"docblock";a:2:{s:11:"description";s:43:"Holds the elements that should be preloaded";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:5:"flags";s:8:"docblock";a:2:{s:11:"description";s:33:"Holds the various flags supported";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:15:"setPreloadables";s:8:"docblock";a:2:{s:11:"description";s:60:"Sets elements that should be preloaded by the next init call";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:28:"The type to preloadables for";}i:1;a:2:{i:0;s:5:"array";i:1;s:23:"The elements to preload";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"setHook";s:8:"docblock";a:2:{s:11:"description";s:332:"Hooks into the initilization code and runs a callback
before the default code is executed.

If the callback returns true, then the flag will be marked
as initialized, otherwise the default code is executed.

To reset a hook, then simply pass NULL as the callback. This
unregisters ALL hooks registered to that paticular flag.";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:41:"The loader flag, this cannot be a bitmask";}i:1;a:2:{i:0;s:8:"callback";i:1;s:19:"The loader callback";}}i:1;a:2:{i:0;s:6:"string";i:1;s:61:"The index of the preloadables, if any to send to the callback";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:4:"init";s:8:"docblock";a:2:{s:11:"description";s:27:"Initializes the bootstraper";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:20:"The bootstraper mode";}i:1;a:2:{i:0;s:7:"integer";i:1;s:69:"The loader flags, this only have an effect on custom bootstraper mode";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:195:"Bootstraper, this class works as an encapsulated and easier way
to write working bootstrapers while also not having to remember
startup orders and other similar things that can cause confusion.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:26:"library/Tuxxedo/Cookie.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:15:"\Tuxxedo\Cookie";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:7:"options";s:8:"docblock";a:2:{s:11:"description";s:45:"The cookie options, such as prefix, path etc.";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:7:"methods";a:7:{i:0;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:5:"array";i:1;s:23:"The configuration array";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:15:"Object instance";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:3:"get";s:8:"docblock";a:2:{s:11:"description";s:13:"Gets a cookie";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:11:"Cookie name";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:61:"Whether to include the cookie prefix or not, defaults to true";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:55:"Returns the cookie value on success, or null on failure";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:3:"set";s:8:"docblock";a:2:{s:11:"description";s:13:"Sets a cookie";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:11:"Cookie name";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:12:"Cookie value";}}i:1;a:2:{i:0;s:7:"boolean";i:1;s:61:"Whether to include the cookie prefix or not, defaults to true";}}i:1;a:2:{i:0;s:5:"array";i:1;s:40:"Options, if overridding any default ones";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:12:"offsetExists";s:8:"docblock";a:2:{s:11:"description";s:36:"Checks whether a cookie is available";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"scalar";i:1;s:33:"The information row name to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:58:"Returns true if the information is stored, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:9:"offsetGet";s:8:"docblock";a:2:{s:11:"description";s:19:"Gets a cookie value";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"scalar";i:1;s:31:"The information row name to get";}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:65:"Returns the information value, and NULL if the value wasn't found";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:9:"offsetSet";s:8:"docblock";a:2:{s:11:"description";s:17:"Sets a new cookie";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"scalar";i:1;s:31:"The information row name to set";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:33:"The new/update value for this row";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:11:"offsetUnset";s:8:"docblock";a:2:{s:11:"description";s:16:"Deletes a cookie";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"scalar";i:1;s:34:"The information row name to delete";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:26:"\Tuxxedo\Design\InfoAccess";s:10:"implements";a:1:{i:0;s:25:"\Tuxxedo\Design\Invokable";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:28:"library/Tuxxedo/Database.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{s:15:"\Tuxxedo\Design";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";}s:7:"classes";a:1:{s:17:"\Tuxxedo\Database";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:8:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Registry";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:4:"link";s:8:"docblock";a:2:{s:11:"description";s:78:"Link pointer, this contains the internal link
to the database from the driver";s:4:"tags";a:1:{s:3:"var";s:5:"mixed";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:13:"affected_rows";s:8:"docblock";a:2:{s:11:"description";s:73:"Affected rows by last successful query that changed
data in the database";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:7:"delayed";s:8:"docblock";a:2:{s:11:"description";s:56:"Whether the database connection still is delayed
or not";s:4:"tags";a:1:{s:3:"var";s:7:"boolean";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:7:"queries";s:8:"docblock";a:2:{s:11:"description";s:41:"List of executed queries during execution";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:13:"configuration";s:8:"docblock";a:2:{s:11:"description";s:37:"Database specific configuration array";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:8:"property";s:16:"shutdown_queries";s:8:"docblock";a:2:{s:11:"description";s:78:"List of shutdown queries that will be executed
when then destructor is called";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:8:"property";s:14:"loaded_drivers";s:8:"docblock";a:2:{s:11:"description";s:116:"List of loaded drivers used for caching in the
special required cases where more than one driver
have to be loaded";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:7:"methods";a:10:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:47:"Default constructor for a new database instance";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:37:"Database specific configuration array";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:66:"If the database connection fails, a basic exception will be thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"__destruct";s:8:"docblock";a:2:{s:11:"description";s:121:"Default destructor, this simply closes a database connection
and executes any registered shutdown queries there might be";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:5:"array";i:1;s:23:"The configuration array";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:15:"Object instance";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:77:"Only thrown on poorly a configured database section in the configuration file";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:7:"factory";s:8:"docblock";a:2:{s:11:"description";s:34:"Constructs a new database instance";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:11:"Driver name";}i:1;a:2:{i:0;s:5:"array";i:1;s:37:"Database specific configuration array";}}s:6:"return";a:2:{i:0;s:17:"\Tuxxedo\Database";i:1;s:31:"Returns a new database instance";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:75:"Throws a basic exception if loading of a driver should fail for some reason";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:3:"cfg";s:8:"docblock";a:2:{s:11:"description";s:29:"Returns a configuration value";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:47:"The value from the configuration array to fetch";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:75:"Returns the value from the database configuration array, and false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:6:"equery";s:8:"docblock";a:2:{s:11:"description";s:58:"Escape all arguments set to the query, prior to formatting";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"SQL to execute";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:125:"Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf";}}s:6:"return";a:2:{i:0;s:14:"boolean|object";i:1;s:102:"Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:66:"If the SQL should fail for whatever reason, an exception is thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:15:"getAffectedRows";s:8:"docblock";a:2:{s:11:"description";s:82:"Gets the affected rows by last successful query that changed
data in the database";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:25:"Returns the affected rows";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:16:"setShutdownQuery";s:8:"docblock";a:2:{s:11:"description";s:39:"Sets a new query to execute at shutdown";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:25:"The SQL string to execute";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:13:"getNumQueries";s:8:"docblock";a:2:{s:11:"description";s:55:"Gets the number of queries executed during this request";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:26:"Number of queries executed";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:10:"getQueries";s:8:"docblock";a:2:{s:11:"description";s:45:"Gets the executed queries during this request";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:30:"A list of executed SQL queries";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:2:{i:0;s:24:"\Tuxxedo\Database\Driver";i:1;s:25:"\Tuxxedo\Design\Invokable";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:35:"library/Tuxxedo/Database/Driver.php";a:6:{s:10:"namespaces";a:1:{s:17:"\Tuxxedo\Database";a:2:{s:8:"docblock";a:2:{s:11:"description";s:226:"Database Access Layer implementation. This namespace controls
all access to the database, multiple drivers for the database
can be loaded at the same time, along with multiple database
connection, even to the same database.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:24:"\Tuxxedo\Database\Driver";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:13:{i:0;a:3:{s:6:"method";s:17:"isDriverSupported";s:8:"docblock";a:2:{s:11:"description";s:136:"Returns if the current system supports the driver, if this
method isn't called, a driver may start not function properly
on the system";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:44:"True if dirver is supported, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:21:"getDriverRequirements";s:8:"docblock";a:2:{s:11:"description";s:231:"Get driver requirements, as an array that can be iterated to
see which requirements that passes, and which that do not

Each driver may return their own set of keys, but built-in
drivers will remain consistent across each other";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:75:"Returns an array containing elements of which requirements and their status";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:7:"connect";s:8:"docblock";a:2:{s:11:"description";s:61:"Connect to a database, if no connection isn't already
active";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:71:"Change the configuration and use this new configuration to connect with";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:40:"True if a successful connection was made";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:30:"If a database connection fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:5:"close";s:8:"docblock";a:2:{s:11:"description";s:27:"Close a database connection";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the connection was closed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:11:"isConnected";s:8:"docblock";a:2:{s:11:"description";s:32:"Checks if a connection is active";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:57:"True if a connection is currently active, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:6:"isLink";s:8:"docblock";a:2:{s:11:"description";s:84:"Checks if a variable is a connection of the same type
as the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:21:"The variable to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:12:"isPersistent";s:8:"docblock";a:2:{s:11:"description";s:46:"Checks if the current connection is persistent";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"True if the connection is persistent, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:8:"isResult";s:8:"docblock";a:2:{s:11:"description";s:80:"Checks if a variable is a result of the same type as
the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:21:"The variable to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:8:"getError";s:8:"docblock";a:2:{s:11:"description";s:56:"Get the error message from the last occured error
error";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"The error message";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:8:"getErrno";s:8:"docblock";a:2:{s:11:"description";s:48:"Get the error number from the last occured error";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:16:"The error number";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:11:"getInsertId";s:8:"docblock";a:2:{s:11:"description";s:58:"Get the last insert id from last executed SELECT statement";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:54:"Returns the last insert id, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:6:"escape";s:8:"docblock";a:2:{s:11:"description";s:65:"Escape a piece of data using the database specific
escape method";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:18:"The data to escape";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"Escaped data";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:5:"query";s:8:"docblock";a:2:{s:11:"description";s:61:"Executes a query and returns the result on SELECT
statements";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:14:"SQL to execute";}s:6:"return";a:2:{i:0;s:14:"boolean|object";i:1;s:102:"Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:66:"If the SQL should fail for whatever reason, an exception is thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:17:"\Tuxxedo\Database";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:142:"Base database driver interface

This defines the driver structure of which functions a driver
must implement and how they should be called.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:41:"library/Tuxxedo/Database/Driver/Mysql.php";a:6:{s:10:"namespaces";a:1:{s:24:"\Tuxxedo\Database\Driver";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:5:{s:17:"\Tuxxedo\Database";s:0:"";s:30:"\Tuxxedo\Database\Driver\Mysql";s:0:"";s:14:"\Tuxxedo\Debug";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:30:"\Tuxxedo\Database\Driver\Mysql";a:8:{s:9:"constants";a:1:{i:0;a:4:{s:8:"constant";s:11:"DRIVER_NAME";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:11:"Driver name";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:4:"link";s:8:"docblock";a:2:{s:11:"description";s:78:"Link pointer, this contains the internal link
to the database from the driver";s:4:"tags";a:1:{s:3:"var";s:8:"resource";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:13:{i:0;a:3:{s:6:"method";s:17:"isDriverSupported";s:8:"docblock";a:2:{s:11:"description";s:136:"Returns if the current system supports the driver, if this
method isn't called, a driver may start not function properly
on the system";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:44:"True if dirver is supported, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:21:"getDriverRequirements";s:8:"docblock";a:2:{s:11:"description";s:231:"Get driver requirements, as an array that can be iterated to
see which requirements that passes, and which that do not

Each driver may return their own set of keys, but built-in
drivers will remain consistent across each other";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:75:"Returns an array containing elements of which requirements and their status";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:7:"connect";s:8:"docblock";a:2:{s:11:"description";s:61:"Connect to a database, if no connection isn't already
active";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:71:"Change the configuration and use this new configuration to connect with";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:40:"True if a successful connection was made";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:30:"If a database connection fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:5:"close";s:8:"docblock";a:2:{s:11:"description";s:27:"Close a database connection";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the connection was closed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:11:"isConnected";s:8:"docblock";a:2:{s:11:"description";s:32:"Checks if a connection is active";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:57:"True if a connection is currently active, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:6:"isLink";s:8:"docblock";a:2:{s:11:"description";s:84:"Checks if a variable is a connection of the same type
as the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:21:"The variable to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:12:"isPersistent";s:8:"docblock";a:2:{s:11:"description";s:46:"Checks if the current connection is persistent";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"True if the connection is persistent, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:8:"isResult";s:8:"docblock";a:2:{s:11:"description";s:80:"Checks if a variable is a result of the same type as
the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:21:"The variable to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:8:"getError";s:8:"docblock";a:2:{s:11:"description";s:56:"Get the error message from the last occured error
error";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"The error message";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:8:"getErrno";s:8:"docblock";a:2:{s:11:"description";s:48:"Get the error number from the last occured error";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:16:"The error number";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:11:"getInsertId";s:8:"docblock";a:2:{s:11:"description";s:58:"Get the last insert id from last executed SELECT statement";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:54:"Returns the last insert id, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:6:"escape";s:8:"docblock";a:2:{s:11:"description";s:65:"Escape a piece of data using the database specific
escape method";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:18:"The data to escape";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"Escaped data";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:5:"query";s:8:"docblock";a:2:{s:11:"description";s:61:"Executes a query and returns the result on SELECT
statements";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"SQL to execute";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:125:"Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf";}}s:6:"return";a:2:{i:0;s:14:"boolean|object";i:1;s:102:"Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:66:"If the SQL should fail for whatever reason, an exception is thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:24:"\Tuxxedo\Database\Driver";s:7:"extends";s:17:"\Tuxxedo\Database";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:227:"MySQL driver for Tuxxedo Engine

This driver enables access to a MySQL 3+ based database using
the mysql database extension. If using MySQL 4.1+ the MySQLi
driver should be used as a better alternative for talking to
MySQL";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:48:"library/Tuxxedo/Database/Driver/Mysql/Result.php";a:6:{s:10:"namespaces";a:1:{s:30:"\Tuxxedo\Database\Driver\Mysql";a:2:{s:8:"docblock";a:2:{s:11:"description";s:86:"MySQL driver namespace, for driver components such as result statements
and the like.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Database";s:0:"";}s:7:"classes";a:1:{s:37:"\Tuxxedo\Database\Driver\Mysql\Result";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"result";s:8:"docblock";a:2:{s:11:"description";s:19:"The result resource";s:4:"tags";a:1:{s:3:"var";s:8:"resource";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:8:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:30:"Constructs a new result object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Database";i:1;s:19:"A database instance";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:77:"A database result, this must be delivered from the driver it was created from";}}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:99:"If the result passed is from a different driver type, or if the result does not contain any results";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:4:"free";s:8:"docblock";a:2:{s:11:"description";s:51:"Frees the result from memory, and makes it unusable";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"Returns true if the result was freed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"getNumRows";s:8:"docblock";a:2:{s:11:"description";s:36:"Get the number of rows in the result";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:68:"Returns the number of rows in the result, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:10:"fetchArray";s:8:"docblock";a:2:{s:11:"description";s:60:"Fetch result with both associative and indexed indexes array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"Returns an array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:10:"fetchAssoc";s:8:"docblock";a:2:{s:11:"description";s:51:"Fetches the result and returns an associative array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:44:"Returns an associative array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:8:"fetchRow";s:8:"docblock";a:2:{s:11:"description";s:47:"Fetches the result and returns an indexed array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:40:"Returns an indexed array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:11:"fetchObject";s:8:"docblock";a:2:{s:11:"description";s:84:"Fetches the result and returns an object, with overloaded
properties for rows names";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"object";i:1;s:33:"Returns an object with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:7:"current";s:8:"docblock";a:2:{s:11:"description";s:25:"Iterator method - current";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:26:"Returns the current result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:30:"\Tuxxedo\Database\Driver\Mysql";s:7:"extends";s:24:"\Tuxxedo\Database\Result";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:179:"MySQL result class for Tuxxedo

This implements the result class for MySQL for Tuxxedo,
this contains methods to fetch, count result rows and
such for working with a resultset";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:42:"library/Tuxxedo/Database/Driver/Mysqli.php";a:6:{s:10:"namespaces";a:1:{s:24:"\Tuxxedo\Database\Driver";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:17:"\Tuxxedo\Database";s:0:"";s:31:"\Tuxxedo\Database\Driver\Mysqli";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:31:"\Tuxxedo\Database\Driver\Mysqli";a:8:{s:9:"constants";a:1:{i:0;a:4:{s:8:"constant";s:11:"DRIVER_NAME";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:11:"Driver name";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:4:"link";s:8:"docblock";a:2:{s:11:"description";s:78:"Link pointer, this contains the internal link
to the database from the driver";s:4:"tags";a:1:{s:3:"var";s:6:"mysqli";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:13:{i:0;a:3:{s:6:"method";s:17:"isDriverSupported";s:8:"docblock";a:2:{s:11:"description";s:136:"Returns if the current system supports the driver, if this
method isn't called, a driver may start not function properly
on the system";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:44:"True if dirver is supported, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:21:"getDriverRequirements";s:8:"docblock";a:2:{s:11:"description";s:231:"Get driver requirements, as an array that can be iterated to
see which requirements that passes, and which that do not

Each driver may return their own set of keys, but built-in
drivers will remain consistent across each other";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:75:"Returns an array containing elements of which requirements and their status";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:7:"connect";s:8:"docblock";a:2:{s:11:"description";s:61:"Connect to a database, if no connection isn't already
active";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:71:"Change the configuration and use this new configuration to connect with";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:40:"True if a successful connection was made";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:30:"If a database connection fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:5:"close";s:8:"docblock";a:2:{s:11:"description";s:27:"Close a database connection";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the connection was closed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:11:"isConnected";s:8:"docblock";a:2:{s:11:"description";s:32:"Checks if a connection is active";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:57:"True if a connection is currently active, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:6:"isLink";s:8:"docblock";a:2:{s:11:"description";s:84:"Checks if a variable is a connection of the same type
as the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:21:"The variable to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:12:"isPersistent";s:8:"docblock";a:2:{s:11:"description";s:46:"Checks if the current connection is persistent";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"True if the connection is persistent, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:8:"isResult";s:8:"docblock";a:2:{s:11:"description";s:80:"Checks if a variable is a result of the same type as
the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:21:"The variable to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:8:"getError";s:8:"docblock";a:2:{s:11:"description";s:56:"Get the error message from the last occured error
error";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"The error message";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:8:"getErrno";s:8:"docblock";a:2:{s:11:"description";s:48:"Get the error number from the last occured error";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:16:"The error number";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:11:"getInsertId";s:8:"docblock";a:2:{s:11:"description";s:58:"Get the last insert id from last executed SELECT statement";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:54:"Returns the last insert id, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:6:"escape";s:8:"docblock";a:2:{s:11:"description";s:65:"Escape a piece of data using the database specific
escape method";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:18:"The data to escape";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"Escaped data";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:5:"query";s:8:"docblock";a:2:{s:11:"description";s:61:"Executes a query and returns the result on SELECT
statements";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"SQL to execute";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:125:"Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf";}}s:6:"return";a:2:{i:0;s:14:"boolean|object";i:1;s:102:"Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:66:"If the SQL should fail for whatever reason, an exception is thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:24:"\Tuxxedo\Database\Driver";s:7:"extends";s:17:"\Tuxxedo\Database";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:139:"MySQL Improved driver for Tuxxedo Engine

This driver enables access to a MySQL 4.1+ based database using
the mysqli database extension.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:49:"library/Tuxxedo/Database/Driver/Mysqli/Result.php";a:6:{s:10:"namespaces";a:1:{s:31:"\Tuxxedo\Database\Driver\Mysqli";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"MySQLi driver namespace, for driver components such as result statements
and the like.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Database";s:0:"";}s:7:"classes";a:1:{s:38:"\Tuxxedo\Database\Driver\Mysqli\Result";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"result";s:8:"docblock";a:2:{s:11:"description";s:19:"The result resource";s:4:"tags";a:1:{s:3:"var";s:13:"mysqli_result";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:8:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:30:"Constructs a new result object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Database";i:1;s:19:"A database instance";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:77:"A database result, this must be delivered from the driver it was created from";}}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:99:"If the result passed is from a different driver type, or if the result does not contain any results";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:4:"free";s:8:"docblock";a:2:{s:11:"description";s:51:"Frees the result from memory, and makes it unusable";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"Returns true if the result was freed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"getNumRows";s:8:"docblock";a:2:{s:11:"description";s:36:"Get the number of rows in the result";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:68:"Returns the number of rows in the result, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:10:"fetchArray";s:8:"docblock";a:2:{s:11:"description";s:60:"Fetch result with both associative and indexed indexes array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"Returns an array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:10:"fetchAssoc";s:8:"docblock";a:2:{s:11:"description";s:51:"Fetches the result and returns an associative array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:44:"Returns an associative array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:8:"fetchRow";s:8:"docblock";a:2:{s:11:"description";s:47:"Fetches the result and returns an indexed array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:40:"Returns an indexed array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:11:"fetchObject";s:8:"docblock";a:2:{s:11:"description";s:84:"Fetches the result and returns an object, with overloaded
properties for rows names";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"object";i:1;s:33:"Returns an object with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:7:"current";s:8:"docblock";a:2:{s:11:"description";s:25:"Iterator method - current";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:26:"Returns the current result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:31:"\Tuxxedo\Database\Driver\Mysqli";s:7:"extends";s:24:"\Tuxxedo\Database\Result";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:198:"MySQL Improved result class for Tuxxedo

This implements the result class for MySQL Improved for
Tuxxedo, this contains methods to fetch, count result rows and
such for working with a resultset.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:39:"library/Tuxxedo/Database/Driver/Pdo.php";a:6:{s:10:"namespaces";a:1:{s:24:"\Tuxxedo\Database\Driver";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:17:"\Tuxxedo\Database";s:0:"";s:28:"\Tuxxedo\Database\Driver\Pdo";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:28:"\Tuxxedo\Database\Driver\Pdo";a:8:{s:9:"constants";a:1:{i:0;a:4:{s:8:"constant";s:11:"DRIVER_NAME";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:11:"Driver name";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:4:"link";s:8:"docblock";a:2:{s:11:"description";s:78:"Link pointer, this contains the internal link
to the database from the driver";s:4:"tags";a:1:{s:3:"var";s:3:"PDO";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:10:"persistent";s:8:"docblock";a:2:{s:11:"description";s:122:"Check if persistent connections is active, this
is to "fake" the isPersistent() method and make
the return value correct";s:4:"tags";a:1:{s:3:"var";s:7:"boolean";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:13:{i:0;a:3:{s:6:"method";s:17:"isDriverSupported";s:8:"docblock";a:2:{s:11:"description";s:136:"Returns if the current system supports the driver, if this
method isn't called, a driver may start not function properly
on the system";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:44:"True if dirver is supported, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:21:"getDriverRequirements";s:8:"docblock";a:2:{s:11:"description";s:231:"Get driver requirements, as an array that can be iterated to
see which requirements that passes, and which that do not

Each driver may return their own set of keys, but built-in
drivers will remain consistent across each other";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:75:"Returns an array containing elements of which requirements and their status";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:7:"connect";s:8:"docblock";a:2:{s:11:"description";s:61:"Connect to a database, if no connection isn't already
active";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:71:"Change the configuration and use this new configuration to connect with";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:40:"True if a successful connection was made";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:30:"If a database connection fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:5:"close";s:8:"docblock";a:2:{s:11:"description";s:27:"Close a database connection";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the connection was closed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:11:"isConnected";s:8:"docblock";a:2:{s:11:"description";s:32:"Checks if a connection is active";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:57:"True if a connection is currently active, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:6:"isLink";s:8:"docblock";a:2:{s:11:"description";s:84:"Checks if a variable is a connection of the same type
as the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:21:"The variable to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:12:"isPersistent";s:8:"docblock";a:2:{s:11:"description";s:46:"Checks if the current connection is persistent";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"True if the connection is persistent, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:8:"isResult";s:8:"docblock";a:2:{s:11:"description";s:80:"Checks if a variable is a result of the same type as
the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:21:"The variable to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:8:"getError";s:8:"docblock";a:2:{s:11:"description";s:56:"Get the error message from the last occured error
error";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"The error message";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:8:"getErrno";s:8:"docblock";a:2:{s:11:"description";s:48:"Get the error number from the last occured error";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:16:"The error number";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:11:"getInsertId";s:8:"docblock";a:2:{s:11:"description";s:58:"Get the last insert id from last executed SELECT statement";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:54:"Returns the last insert id, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:6:"escape";s:8:"docblock";a:2:{s:11:"description";s:65:"Escape a piece of data using the database specific
escape method";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:18:"The data to escape";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"Escaped data";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:5:"query";s:8:"docblock";a:2:{s:11:"description";s:61:"Executes a query and returns the result on SELECT
statements";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"SQL to execute";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:125:"Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf";}}s:6:"return";a:2:{i:0;s:14:"boolean|object";i:1;s:102:"Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:66:"If the SQL should fail for whatever reason, an exception is thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:24:"\Tuxxedo\Database\Driver";s:7:"extends";s:17:"\Tuxxedo\Database";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:189:"PDO abstraction driver for Tuxxedo Engine

This driver lets you use PDO as backend instead of the vendor
specific extensions. Any loaded PDO driver may be used to create
a new instance.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:46:"library/Tuxxedo/Database/Driver/Pdo/Result.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Database\Driver\Pdo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:84:"PDO driver namespace, for driver components such as result statements
and the like.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{s:17:"\Tuxxedo\Database";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";}s:7:"classes";a:1:{s:35:"\Tuxxedo\Database\Driver\Pdo\Result";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"result";s:8:"docblock";a:2:{s:11:"description";s:19:"The result resource";s:4:"tags";a:1:{s:3:"var";s:13:"\PDOStatement";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:7:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:30:"Constructs a new result object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Database";i:1;s:19:"A database instance";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:77:"A database result, this must be delivered from the driver it was created from";}}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:99:"If the result passed is from a different driver type, or if the result does not contain any results";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:4:"free";s:8:"docblock";a:2:{s:11:"description";s:51:"Frees the result from memory, and makes it unusable";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"Returns true if the result was freed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"getNumRows";s:8:"docblock";a:2:{s:11:"description";s:36:"Get the number of rows in the result";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:68:"Returns the number of rows in the result, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:10:"fetchArray";s:8:"docblock";a:2:{s:11:"description";s:60:"Fetch result with both associative and indexed indexes array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"Returns an array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:10:"fetchAssoc";s:8:"docblock";a:2:{s:11:"description";s:51:"Fetches the result and returns an associative array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:44:"Returns an associative array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:8:"fetchRow";s:8:"docblock";a:2:{s:11:"description";s:47:"Fetches the result and returns an indexed array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:40:"Returns an indexed array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:11:"fetchObject";s:8:"docblock";a:2:{s:11:"description";s:84:"Fetches the result and returns an object, with overloaded
properties for rows names";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"object";i:1;s:33:"Returns an object with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Database\Driver\Pdo";s:7:"extends";s:24:"\Tuxxedo\Database\Result";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:206:"PDO abstraction result driver for Tuxxedo

This implements the result class for PDO based subdrivers for
Tuxxedo, this contains methods to fetch, count result rows and
such for working with a resultset.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:42:"library/Tuxxedo/Database/Driver/Sqlite.php";a:6:{s:10:"namespaces";a:1:{s:24:"\Tuxxedo\Database\Driver";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:17:"\Tuxxedo\Database";s:0:"";s:31:"\Tuxxedo\Database\Driver\Sqlite";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:31:"\Tuxxedo\Database\Driver\Sqlite";a:8:{s:9:"constants";a:1:{i:0;a:4:{s:8:"constant";s:11:"DRIVER_NAME";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:11:"Driver name";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:4:"link";s:8:"docblock";a:2:{s:11:"description";s:78:"Link pointer, this contains the internal link
to the database from the driver";s:4:"tags";a:1:{s:3:"var";s:8:"resource";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:13:{i:0;a:3:{s:6:"method";s:17:"isDriverSupported";s:8:"docblock";a:2:{s:11:"description";s:136:"Returns if the current system supports the driver, if this
method isn't called, a driver may start not function properly
on the system";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:44:"True if dirver is supported, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:21:"getDriverRequirements";s:8:"docblock";a:2:{s:11:"description";s:231:"Get driver requirements, as an array that can be iterated to
see which requirements that passes, and which that do not

Each driver may return their own set of keys, but built-in
drivers will remain consistent across each other";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:75:"Returns an array containing elements of which requirements and their status";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:7:"connect";s:8:"docblock";a:2:{s:11:"description";s:61:"Connect to a database, if no connection isn't already
active";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:71:"Change the configuration and use this new configuration to connect with";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:40:"True if a successful connection was made";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:30:"If a database connection fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:5:"close";s:8:"docblock";a:2:{s:11:"description";s:27:"Close a database connection";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the connection was closed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:11:"isConnected";s:8:"docblock";a:2:{s:11:"description";s:32:"Checks if a connection is active";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:57:"True if a connection is currently active, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:6:"isLink";s:8:"docblock";a:2:{s:11:"description";s:84:"Checks if a variable is a connection of the same type
as the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:21:"The variable to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:12:"isPersistent";s:8:"docblock";a:2:{s:11:"description";s:46:"Checks if the current connection is persistent";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"True if the connection is persistent, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:8:"isResult";s:8:"docblock";a:2:{s:11:"description";s:80:"Checks if a variable is a result of the same type as
the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:21:"The variable to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:8:"getError";s:8:"docblock";a:2:{s:11:"description";s:56:"Get the error message from the last occured error
error";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"The error message";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:8:"getErrno";s:8:"docblock";a:2:{s:11:"description";s:48:"Get the error number from the last occured error";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:16:"The error number";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:11:"getInsertId";s:8:"docblock";a:2:{s:11:"description";s:58:"Get the last insert id from last executed SELECT statement";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:54:"Returns the last insert id, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:6:"escape";s:8:"docblock";a:2:{s:11:"description";s:65:"Escape a piece of data using the database specific
escape method";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:18:"The data to escape";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:12:"Escaped data";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:5:"query";s:8:"docblock";a:2:{s:11:"description";s:61:"Executes a query and returns the result on SELECT
statements";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"SQL to execute";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:125:"Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf";}}s:6:"return";a:2:{i:0;s:14:"boolean|object";i:1;s:102:"Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:66:"If the SQL should fail for whatever reason, an exception is thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:24:"\Tuxxedo\Database\Driver";s:7:"extends";s:17:"\Tuxxedo\Database";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:210:"Sqlite driver for Tuxxedo

This driver enables access to a Sqlite 3+ based database using
the sqlite3 database extension. Engine does not in any way support
older versions of sqlite as only 3+ is supported.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:49:"library/Tuxxedo/Database/Driver/Sqlite/Result.php";a:6:{s:10:"namespaces";a:1:{s:31:"\Tuxxedo\Database\Driver\Sqlite";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"SQLite driver namespace, for driver components such as result statements
and the like.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{s:17:"\Tuxxedo\Database";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";}s:7:"classes";a:1:{s:38:"\Tuxxedo\Database\Driver\Sqlite\Result";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"result";s:8:"docblock";a:2:{s:11:"description";s:19:"The result resource";s:4:"tags";a:1:{s:3:"var";s:13:"sqlite3result";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:7:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:30:"Constructs a new result object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Database";i:1;s:19:"A database instance";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:77:"A database result, this must be delivered from the driver it was created from";}}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:99:"If the result passed is from a different driver type, or if the result does not contain any results";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:4:"free";s:8:"docblock";a:2:{s:11:"description";s:51:"Frees the result from memory, and makes it unusable";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"Returns true if the result was freed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"getNumRows";s:8:"docblock";a:2:{s:11:"description";s:36:"Get the number of rows in the result";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:68:"Returns the number of rows in the result, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:10:"fetchArray";s:8:"docblock";a:2:{s:11:"description";s:60:"Fetch result with both associative and indexed indexes array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"Returns an array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:10:"fetchAssoc";s:8:"docblock";a:2:{s:11:"description";s:51:"Fetches the result and returns an associative array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:44:"Returns an associative array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:8:"fetchRow";s:8:"docblock";a:2:{s:11:"description";s:47:"Fetches the result and returns an indexed array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:40:"Returns an indexed array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:11:"fetchObject";s:8:"docblock";a:2:{s:11:"description";s:84:"Fetches the result and returns an object, with overloaded
properties for rows names";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"object";i:1;s:33:"Returns an object with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:31:"\Tuxxedo\Database\Driver\Sqlite";s:7:"extends";s:24:"\Tuxxedo\Database\Result";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:183:"SQLite result class for Tuxxedo

This implements the result class for SQLite3 for
Tuxxedo, this contains methods to fetch, count result rows and
such for working with a resultset.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:35:"library/Tuxxedo/Database/Result.php";a:6:{s:10:"namespaces";a:1:{s:17:"\Tuxxedo\Database";a:2:{s:8:"docblock";a:2:{s:11:"description";s:226:"Database Access Layer implementation. This namespace controls
all access to the database, multiple drivers for the database
can be loaded at the same time, along with multiple database
connection, even to the same database.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Database";s:0:"";s:24:"\Tuxxedo\Database\Result";s:0:"";s:15:"\Tuxxedo\Design";s:0:"";}s:7:"classes";a:1:{s:24:"\Tuxxedo\Database\Result";a:8:{s:9:"constants";a:4:{i:0;a:4:{s:8:"constant";s:9:"FETCH_ROW";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:226:"Database Access Layer implementation. This namespace controls
all access to the database, multiple drivers for the database
can be loaded at the same time, along with multiple database
connection, even to the same database.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:25:"Fetch mode constant - row";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:11:"FETCH_ARRAY";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:226:"Database Access Layer implementation. This namespace controls
all access to the database, multiple drivers for the database
can be loaded at the same time, along with multiple database
connection, even to the same database.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:27:"Fetch mode constant - array";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:11:"FETCH_ASSOC";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:226:"Database Access Layer implementation. This namespace controls
all access to the database, multiple drivers for the database
can be loaded at the same time, along with multiple database
connection, even to the same database.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:27:"Fetch mode constant - assoc";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:12:"FETCH_OBJECT";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:226:"Database Access Layer implementation. This namespace controls
all access to the database, multiple drivers for the database
can be loaded at the same time, along with multiple database
connection, even to the same database.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:28:"Fetch mode constant - object";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:6:{i:0;a:3:{s:8:"property";s:8:"instance";s:8:"docblock";a:2:{s:11:"description";s:55:"The database instance from where the result was created";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Database";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"result";s:8:"docblock";a:2:{s:11:"description";s:19:"The result resource";s:4:"tags";a:1:{s:3:"var";s:5:"mixed";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:15:"cached_num_rows";s:8:"docblock";a:2:{s:11:"description";s:21:"Cached number of rows";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:8:"position";s:8:"docblock";a:2:{s:11:"description";s:25:"Current iterator position";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:10:"fetch_mode";s:8:"docblock";a:2:{s:11:"description";s:10:"Fetch mode";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:13:"iterator_data";s:8:"docblock";a:2:{s:11:"description";s:73:"Iterator data for drivers that need to emulate the iterator functionality";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:11:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:30:"Constructs a new result object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Database";i:1;s:19:"A database instance";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:77:"A database result, this must be delivered from the driver it was created from";}}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:99:"If the result passed is from a different driver type, or if the result does not contain any results";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"__destruct";s:8:"docblock";a:2:{s:11:"description";s:59:"Simple destructor to free result when the
result is unset.";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:12:"setFetchType";s:8:"docblock";a:2:{s:11:"description";s:19:"Sets the fetch mode";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"integer";i:1;s:28:"One of the FETCH_* constants";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:7:"isFreed";s:8:"docblock";a:2:{s:11:"description";s:42:"Checks whenever the result is freed or not";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:64:"Returns true if the result is freed from memory, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:3:"key";s:8:"docblock";a:2:{s:11:"description";s:21:"Iterator method - key";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:64:"Returns the numeric position of the current row in the resultset";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:4:"next";s:8:"docblock";a:2:{s:11:"description";s:22:"Iterator method - next";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:6:"rewind";s:8:"docblock";a:2:{s:11:"description";s:24:"Iterator method - rewind";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:5:"valid";s:8:"docblock";a:2:{s:11:"description";s:23:"Iterator method - valid";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:56:"Returns true if its still possible to continue iterating";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:7:"current";s:8:"docblock";a:2:{s:11:"description";s:25:"Iterator method - current";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:26:"Returns the current result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:5:"count";s:8:"docblock";a:2:{s:11:"description";s:139:"Countable method, this is essentially a wrapper for getNumRows()
but allows usage of:

printf('Number of results: %d', sizeof($result));";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:56:"Returns the number of rows in the result, and 0 on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:5:"fetch";s:8:"docblock";a:2:{s:11:"description";s:120:"General fetch method, this method uses the FETCH_* constants
to determine in what format the returned data should be in";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:12:"array|object";i:1;s:53:"Returns an object or array based on the fetching mode";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:17:"\Tuxxedo\Database";s:7:"extends";s:26:"\Tuxxedo\Design\Iteratable";s:10:"implements";a:1:{i:0;s:38:"\Tuxxedo\Database\Result\Specification";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:49:"library/Tuxxedo/Database/Result/Specification.php";a:6:{s:10:"namespaces";a:1:{s:24:"\Tuxxedo\Database\Result";a:2:{s:8:"docblock";a:2:{s:11:"description";s:121:"Database result namespace, this contains the driver specification
interface for database drivers to handle a result set.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:38:"\Tuxxedo\Database\Result\Specification";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:7:{i:0;a:3:{s:6:"method";s:4:"free";s:8:"docblock";a:2:{s:11:"description";s:51:"Frees the result from memory, and makes it unusable";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"Returns true if the result was freed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"getNumRows";s:8:"docblock";a:2:{s:11:"description";s:36:"Get the number of rows in the result";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:56:"Returns the number of rows in the result, and 0 on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"fetchArray";s:8:"docblock";a:2:{s:11:"description";s:60:"Fetch result with both associative and indexed indexes array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"Returns an array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:10:"fetchAssoc";s:8:"docblock";a:2:{s:11:"description";s:51:"Fetches the result and returns an associative array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:44:"Returns an associative array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:8:"fetchRow";s:8:"docblock";a:2:{s:11:"description";s:47:"Fetches the result and returns an indexed array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:40:"Returns an indexed array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:11:"fetchObject";s:8:"docblock";a:2:{s:11:"description";s:84:"Fetches the result and returns an object, with overloaded
properties for rows names";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"object";i:1;s:33:"Returns an object with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:5:"fetch";s:8:"docblock";a:2:{s:11:"description";s:120:"General fetch method, this method uses the FETCH_* constants
to determine in what format the returned data should be in";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:12:"array|object";i:1;s:53:"Returns an object or array based on the fetching mode";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:24:"\Tuxxedo\Database\Result";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:170:"Base database driver result interface

This defines the driver structure of which functions a driver
must implement in the result object and how they should be called.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:39:"library/Tuxxedo/Datamanager/Adapter.php";a:6:{s:10:"namespaces";a:1:{s:20:"\Tuxxedo\Datamanager";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:26:"\Tuxxedo\Datamanager\Hooks";s:0:"";s:15:"\Tuxxedo\Design";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:8:{s:9:"constants";a:20:{i:0;a:4:{s:8:"constant";s:14:"FIELD_REQUIRED";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Indicates that a field is required";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:14:"FIELD_OPTIONAL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Indicates that a field is optional";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:15:"FIELD_PROTECTED";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:35:"Indicates that a field is protected";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:13:"FIELD_VIRTUAL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:33:"Indicates that a field is virtual";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:12:"CONTEXT_NONE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:33:"Context constant, default context";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"constant";s:12:"CONTEXT_SAVE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:32:"Context constant, save() context";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:6;a:4:{s:8:"constant";s:14:"CONTEXT_DELETE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Context constant, delete() context";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:7;a:4:{s:8:"constant";s:12:"CONTEXT_VOID";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:30:"Context constant, void context";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:8;a:4:{s:8:"constant";s:13:"VALIDATE_NONE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Validation constant, no validation";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:9;a:4:{s:8:"constant";s:16:"VALIDATE_NUMERIC";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Validation constant, numeric value";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:10;a:4:{s:8:"constant";s:15:"VALIDATE_STRING";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:33:"Validation constant, string value";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:11;a:4:{s:8:"constant";s:14:"VALIDATE_EMAIL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:32:"Validation constant, email value";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:12;a:4:{s:8:"constant";s:16:"VALIDATE_BOOLEAN";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Validation constant, boolean value";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:13;a:4:{s:8:"constant";s:17:"VALIDATE_CALLBACK";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:29:"Validation constant, callback";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:14;a:4:{s:8:"constant";s:21:"VALIDATE_STRING_EMPTY";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:46:"Validation option constant, allow empty fields";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:15;a:4:{s:8:"constant";s:19:"VALIDATE_IDENTIFIER";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:38:"Validation option constant, identifier";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:16;a:4:{s:8:"constant";s:8:"OPT_INTL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:64:"Factory option constant - internationalization (default enabled)";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:17;a:4:{s:8:"constant";s:13:"OPT_LOAD_ONLY";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:46:"Factory option constant - insert as new record";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:18;a:4:{s:8:"constant";s:13:"OPT_INTL_AUTO";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:65:"Factory option constant - internationalization, load if available";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:19;a:4:{s:8:"constant";s:11:"OPT_DEFAULT";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:41:"Factory option constant - default options";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:14:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Registry";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"dmname";s:8:"docblock";a:2:{s:11:"description";s:40:"Datamanager name, set by the datamanager";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:9:"tablename";s:8:"docblock";a:2:{s:11:"description";s:34:"Table name, set by the datamanager";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:6:"idname";s:8:"docblock";a:2:{s:11:"description";s:39:"Identifier name, set by the datamanager";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:10:"identifier";s:8:"docblock";a:2:{s:11:"description";s:18:"Identifier, if any";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:10:"reidentify";s:8:"docblock";a:2:{s:11:"description";s:43:"Whether to re-identify the data when saving";s:4:"tags";a:1:{s:3:"var";s:7:"boolean";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:8:"property";s:17:"iterator_position";s:8:"docblock";a:2:{s:11:"description";s:17:"Iterator position";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:8:"property";s:6:"parent";s:8:"docblock";a:2:{s:11:"description";s:60:"Whether this datamanager are called from another datamanager";s:4:"tags";a:1:{s:3:"var";s:28:"\Tuxxedo\Datamanager\Adapter";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:8:"property";s:7:"context";s:8:"docblock";a:2:{s:11:"description";s:31:"Context for hooks, and adapters";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:8:"property";s:4:"data";s:8:"docblock";a:2:{s:11:"description";s:50:"The original data if instanciated by an identifier";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:8:"property";s:15:"identifier_data";s:8:"docblock";a:2:{s:11:"description";s:50:"Cache data if the identifier is gonna be validated";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:8:"property";s:17:"shutdown_handlers";s:8:"docblock";a:2:{s:11:"description";s:36:"List of shutdown handlers to execute";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:8:"property";s:14:"invalid_fields";s:8:"docblock";a:2:{s:11:"description";s:76:"List of fields that had one or more errors and therefore
could not be saved";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:13;a:3:{s:8:"property";s:19:"loaded_datamanagers";s:8:"docblock";a:2:{s:11:"description";s:121:"List of loaded datamanagers used for caching in the
special required cases where more than one driver
have to be loaded";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:7:"methods";a:21:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:202:"Constructor for the current datamanager, this
can be used to either create a datamanager based
on a certain record determined by the passed identifier
or as a clean datamanager to insert a new record";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:48:"The unique identifier to send to the datamanager";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:23:"The datamanager options";}}i:1;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:29:"The parent datamanager if any";}}s:6:"throws";a:2:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:80:"Throws an exception if the unique identifier sent to the datamanager was invalid";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:1;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"__destruct";s:8:"docblock";a:2:{s:11:"description";s:103:"Destructor for the current datamanager, this is
reserved for shutdown handlers in parent datamanagers.";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:9:"offsetGet";s:8:"docblock";a:2:{s:11:"description";s:109:"Overloads the info access 'get' method so that default data is allocated
when using the ArrayAccess accessor";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"scalar";i:1;s:31:"The information row name to get";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:9:"offsetSet";s:8:"docblock";a:2:{s:11:"description";s:98:"Overloads the info access 'set' method so that its prohibited to
set elements that doesn't exists";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"scalar";i:1;s:31:"The information row name to set";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:32:"The information row value to set";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:4:"init";s:8:"docblock";a:2:{s:11:"description";s:104:"Datamanager initializer, this method initializes the default logic
used across all datamanager adapters";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:7:"integer";i:1;s:46:"Additional options to apply on the datamanager";}}i:1;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:29:"The parent datamanager if any";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:7:"factory";s:8:"docblock";a:2:{s:11:"description";s:36:"Constructs a new datamanger instance";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:15:"Datamanger name";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:83:"An identifier to send to the datamanager to load default data upon instanciating it";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:46:"Additional options to apply on the datamanager";}}s:6:"return";a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"Returns a new database instance";}s:6:"throws";a:2:{i:0;a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:79:"Throws a basic exception if loading of a datamanger should fail for some reason";}i:1;a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:76:"Throws a SQL exception if a database call fails when loading the datamanager";}}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:16:"getInvalidFields";s:8:"docblock";a:2:{s:11:"description";s:106:"Gets a list over invalid fields, this is only populated
if an attempt to saving a datamanager have failed";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:53:"Returns a list of those fields that failed validation";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:16:"getVirtualFields";s:8:"docblock";a:2:{s:11:"description";s:58:"Gets a list of virtual fields from the datamanager adapter";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:67:"Returns an array with field => value pairs, and empty array on none";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:3:"get";s:8:"docblock";a:2:{s:11:"description";s:12:"Gets a field";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:82:"The field to get, if this value is NULL then all the backend data will be returned";}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:68:"Returns the field value, and NULL if the field is non existant (set)";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:18:"setShutdownHandler";s:8:"docblock";a:2:{s:11:"description";s:23:"Sets a shutdown handler";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:8:"callback";i:1;s:21:"A callback to execute";}i:1;a:2:{i:0;s:5:"array";i:1;s:62:"Any additonal arguments the callback needs to execute properly";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:8:"validate";s:8:"docblock";a:2:{s:11:"description";s:51:"Validation method, validates the supplied user data";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"Returns true if the data is valid, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:4:"save";s:8:"docblock";a:2:{s:11:"description";s:70:"Save method, attempts to validate and save the data
into the database";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:7:"boolean";i:1;s:92:"Whether to execute hooks or not. This parameter is mainly designed for datamanager internals";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the data is saved with success, otherwise boolean false";}s:6:"throws";a:2:{i:0;a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:49:"Throws a basic exception if the query should fail";}i:1;a:2:{i:0;s:24:"\Tuxxedo\Exception\Multi";i:1;s:44:"Throws a multi exception if validation fails";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:6:"delete";s:8:"docblock";a:2:{s:11:"description";s:107:"Deletes the data, within the database if an identifier was specified, else
the current set data is removed";s:4:"tags";a:2:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:66:"Returns true if the deletion was a success otherwise boolean false";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:49:"Throws a basic exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:13;a:3:{s:6:"method";s:9:"getParent";s:8:"docblock";a:2:{s:11:"description";s:35:"Gets the parent datamanager pointer";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:81:"Returns a datamanager pointer to the parent object if any, false on root or error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:14;a:3:{s:6:"method";s:9:"getFields";s:8:"docblock";a:2:{s:11:"description";s:41:"Gets the fields this datamanager provides";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"Returns an array with the fields";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:15;a:3:{s:6:"method";s:7:"current";s:8:"docblock";a:2:{s:11:"description";s:25:"Iterator method - current";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:25:"Returns the current field";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:16;a:3:{s:6:"method";s:6:"rewind";s:8:"docblock";a:2:{s:11:"description";s:24:"Iterator method - rewind";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:17;a:3:{s:6:"method";s:3:"key";s:8:"docblock";a:2:{s:11:"description";s:21:"Iterator method - key";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:26:"Returns the currrent index";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:18;a:3:{s:6:"method";s:4:"next";s:8:"docblock";a:2:{s:11:"description";s:22:"Iterator method - next";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:19;a:3:{s:6:"method";s:5:"valid";s:8:"docblock";a:2:{s:11:"description";s:23:"Iterator method - valid";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:79:"Returns true if its possible to continue iterating, otherwise false is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:20;a:3:{s:6:"method";s:5:"hooks";s:8:"docblock";a:2:{s:11:"description";s:109:"Hooks executor

This method executes hooks on a datamanager instance, this is cannot be
called publically.";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:52:"The datamanager adapter instance to execute hooks on";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:26:"Returns true if all fields";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:20:"\Tuxxedo\Datamanager";s:7:"extends";s:26:"\Tuxxedo\Design\InfoAccess";s:10:"implements";a:1:{i:0;s:9:"\Iterator";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:49:"library/Tuxxedo/Datamanager/Adapter/Datastore.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{s:28:"\Tuxxedo\Datamanager\Adapter";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:38:"\Tuxxedo\Datamanager\Adapter\Datastore";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:43:"Fields for validation of datastore elements";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:69:"Constructor, fetches a new datastore element based on its name if set";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:7:"integer";i:1;s:26:"The datastore element name";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:46:"Additional options to apply on the datamanager";}}i:1;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:29:"The parent datamanager if any";}}s:6:"throws";a:2:{i:0;a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:86:"Throws an exception if the datastore name is set and it failed to load for some reason";}i:1;a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:47:"Throws a SQL exception if a database call fails";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:20:"isValidDatastoreData";s:8:"docblock";a:2:{s:11:"description";s:32:"Checks whether the data is valid";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:17:"The data to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:33:"Returns true if the data is valid";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:28:"\Tuxxedo\Datamanager\Adapter";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:25:"Datamanager for datastore";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:46:"library/Tuxxedo/Datamanager/Adapter/Option.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:18:"\Tuxxedo\Exception";s:0:"";s:28:"\Tuxxedo\Datamanager\Adapter";s:0:"";s:26:"\Tuxxedo\Datamanager\Hooks";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:35:"\Tuxxedo\Datamanager\Adapter\Option";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:32:"Fields for validation of options";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:6:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:58:"Constructor, fetches a new option based on its name if set";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:7:"integer";i:1;s:15:"The option name";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:46:"Additional options to apply on the datamanager";}}i:1;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:29:"The parent datamanager if any";}}s:6:"throws";a:2:{i:0;a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:83:"Throws an exception if the option name is set and it failed to load for some reason";}i:1;a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:47:"Throws a SQL exception if a database call fails";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:19:"isValidDefaultValue";s:8:"docblock";a:2:{s:11:"description";s:41:"Checks whether the default value is valid";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:18:"The value to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:42:"Returns true if the default value is valid";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:11:"isValidType";s:8:"docblock";a:2:{s:11:"description";s:57:"Checks whether the option values fits the type definition";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:17:"The type to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:50:"Returns true if the type is valid, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:15:"isValidCategory";s:8:"docblock";a:2:{s:11:"description";s:36:"Checks whether the category is valid";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:21:"The category to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:37:"Returns true if the category is valid";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:120:"Save the option in the datastore, this method is called from
the parent class in cases when the save method was success";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:5:"reset";s:8:"docblock";a:2:{s:11:"description";s:74:"Resets the data to its default values while keeping the
identifier intact";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:49:"Returns true on successful reset, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:28:"\Tuxxedo\Datamanager\Adapter";s:10:"implements";a:2:{i:0;s:32:"\Tuxxedo\Datamanager\Hooks\Cache";i:1;s:36:"\Tuxxedo\Datamanager\Hooks\Resetable";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:54:"library/Tuxxedo/Datamanager/Adapter/Optioncategory.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:28:"\Tuxxedo\Datamanager\Adapter";s:0:"";s:26:"\Tuxxedo\Datamanager\Hooks";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:43:"\Tuxxedo\Datamanager\Adapter\Optioncategory";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:42:"Fields for validation of option categories";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:67:"Constructor, fetches a new option category based on its name if set";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:7:"integer";i:1;s:24:"The option category name";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:46:"Additional options to apply on the datamanager";}}i:1;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:29:"The parent datamanager if any";}}s:6:"throws";a:2:{i:0;a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:92:"Throws an exception if the option category name is set and it failed to load for some reason";}i:1;a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:47:"Throws a SQL exception if a database call fails";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:129:"Save the option category in the datastore, this method is called from
the parent class in cases when the save method was success";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:28:"\Tuxxedo\Datamanager\Adapter";s:10:"implements";a:1:{i:0;s:32:"\Tuxxedo\Datamanager\Hooks\Cache";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:50:"library/Tuxxedo/Datamanager/Adapter/Permission.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:28:"\Tuxxedo\Datamanager\Adapter";s:0:"";s:26:"\Tuxxedo\Datamanager\Hooks";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:39:"\Tuxxedo\Datamanager\Adapter\Permission";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:36:"Fields for validation of permissions";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:62:"Constructor, fetches a new permission based on its name if set";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:7:"integer";i:1;s:19:"The permission name";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:46:"Additional options to apply on the datamanager";}}i:1;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:29:"The parent datamanager if any";}}s:6:"throws";a:2:{i:0;a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:87:"Throws an exception if the permission name is set and it failed to load for some reason";}i:1;a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:47:"Throws a SQL exception if a database call fails";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:124:"Save the permission in the datastore, this method is called from
the parent class in cases when the save method was success";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:60:"A virtually populated array from the datamanager abstraction";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:28:"\Tuxxedo\Datamanager\Adapter";s:10:"implements";a:1:{i:0;s:32:"\Tuxxedo\Datamanager\Hooks\Cache";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:47:"library/Tuxxedo/Datamanager/Adapter/Session.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{s:28:"\Tuxxedo\Datamanager\Adapter";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:36:"\Tuxxedo\Datamanager\Adapter\Session";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:32:"Fields for validation of session";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:40:"Constructor for the sessions datamanager";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:7:"integer";i:1;s:18:"Session identifier";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:46:"Additional options to apply on the datamanager";}}i:1;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:29:"The parent datamanager if any";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:28:"\Tuxxedo\Datamanager\Adapter";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:24:"Datamanager for sessions";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:45:"library/Tuxxedo/Datamanager/Adapter/Style.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:28:"\Tuxxedo\Datamanager\Adapter";s:0:"";s:26:"\Tuxxedo\Datamanager\Hooks";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:34:"\Tuxxedo\Datamanager\Adapter\Style";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:31:"Fields for validation of styles";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:55:"Constructor, fetches a new style based on its id if set";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:7:"integer";i:1;s:12:"The style id";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:46:"Additional options to apply on the datamanager";}}i:1;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:29:"The parent datamanager if any";}}s:6:"throws";a:2:{i:0;a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:80:"Throws an exception if the style id is set and it failed to load for some reason";}i:1;a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:47:"Throws a SQL exception if a database call fails";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:119:"Save the style in the datastore, this method is called from
the parent class in cases when the save method was success";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:14:"virtualInherit";s:8:"docblock";a:2:{s:11:"description";s:103:"This event method is called if the query to store the
data was success, to rebuild the datastore cache";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:19:"The value to handle";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:28:"\Tuxxedo\Datamanager\Adapter";s:10:"implements";a:2:{i:0;s:32:"\Tuxxedo\Datamanager\Hooks\Cache";i:1;s:44:"\Tuxxedo\Datamanager\Hooks\VirtualDispatcher";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:48:"library/Tuxxedo/Datamanager/Adapter/Template.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:5:{s:28:"\Tuxxedo\Datamanager\Adapter";s:0:"";s:26:"\Tuxxedo\Datamanager\Hooks";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";s:26:"\Tuxxedo\Template\Compiler";s:0:"";}s:7:"classes";a:1:{s:37:"\Tuxxedo\Datamanager\Adapter\Template";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:31:"Fields for validation of styles";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:6:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:58:"Constructor, fetches a new template based on its id if set";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:7:"integer";i:1;s:15:"The template id";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:46:"Additional options to apply on the datamanager";}}i:1;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:29:"The parent datamanager if any";}}s:6:"throws";a:2:{i:0;a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:83:"Throws an exception if the template id is set and it failed to load for some reason";}i:1;a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:47:"Throws a SQL exception if a database call fails";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:20:"isValidTemplateTitle";s:8:"docblock";a:2:{s:11:"description";s:42:"Checks whether the template title is valid";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:18:"The title to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:34:"Returns true if the title is valid";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:13:"isValidSource";s:8:"docblock";a:2:{s:11:"description";s:39:"Checks whether the source code is valid";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:24:"The source code to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:40:"Returns true if the source code is valid";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:14:"isValidStyleId";s:8:"docblock";a:2:{s:11:"description";s:44:"Checks whether the style identifier is valid";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:29:"The style identifier to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:45:"Returns true if the style identifier is valid";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:48:"Syncronizes the templateids in the style manager";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:5:"reset";s:8:"docblock";a:2:{s:11:"description";s:74:"Resets the data to its default values while keeping the
identifier intact";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:49:"Returns true on successful reset, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:28:"\Tuxxedo\Datamanager\Adapter";s:10:"implements";a:2:{i:0;s:32:"\Tuxxedo\Datamanager\Hooks\Cache";i:1;s:36:"\Tuxxedo\Datamanager\Hooks\Resetable";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:44:"library/Tuxxedo/Datamanager/Adapter/User.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:5:{s:28:"\Tuxxedo\Datamanager\Adapter";s:0:"";s:26:"\Tuxxedo\Datamanager\Hooks";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";s:13:"\Tuxxedo\User";s:7:"UserAPI";}s:7:"classes";a:1:{s:13:"\Tuxxedo\User";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:11:"usergroupid";s:8:"docblock";a:2:{s:11:"description";s:25:"Usergroup identifier copy";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:30:"Fields for validation of users";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:11:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:54:"Constructor, fetches a new user based on its id if set";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:7:"integer";i:1;s:11:"The user id";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:46:"Additional options to apply on the datamanager";}}i:1;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:29:"The parent datamanager if any";}}s:6:"throws";a:2:{i:0;a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:79:"Throws an exception if the user id is set and it failed to load for some reason";}i:1;a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:47:"Throws a SQL exception if a database call fails";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:3:"set";s:8:"docblock";a:2:{s:11:"description";s:87:"Overloads the set method, so we can catch timezones
if updated so the validator passes";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:19:"The field to update";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:15:"The field value";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:16:"isValidUsergroup";s:8:"docblock";a:2:{s:11:"description";s:35:"Checks whether a usergroup is valid";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:38:"The usergroup id to check for validity";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:90:"Returns true if the usergroup is loaded and exists in the datastore cache, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:15:"isValidTimezone";s:8:"docblock";a:2:{s:11:"description";s:52:"Checks whether a timezone based by its name is valid";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:39:"The timezone name to check for validity";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:89:"Returns true if the timezone is loaded and exists in the datastore cache, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:15:"isValidUsername";s:8:"docblock";a:2:{s:11:"description";s:42:"Checks whether a user name is taken or not";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:21:"The username to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:65:"Returns true if the username is free to be taken, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:12:"isValidEmail";s:8:"docblock";a:2:{s:11:"description";s:47:"Checks whether an email address is taken or not";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:6:"string";i:1;s:21:"The username to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:62:"Returns true if the email is free to be taken, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:14:"isValidStyleId";s:8:"docblock";a:2:{s:11:"description";s:41:"Checks whether a style id is valid or not";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:12:"The style id";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:41:"True if the style exists, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:17:"isValidLanguageId";s:8:"docblock";a:2:{s:11:"description";s:44:"Checks whether a language id is valid or not";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:15:"The language id";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:44:"True if the language exists, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:20:"isAvailableUserField";s:8:"docblock";a:2:{s:11:"description";s:65:"Helper validation routine to check a single field in the database";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:6:"string";i:1;s:18:"The field to check";}}i:1;a:2:{i:0;s:6:"string";i:1;s:18:"The value to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:49:"Returns true if the value exists, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:15:"isValidPassword";s:8:"docblock";a:2:{s:11:"description";s:41:"Checks whether a password is valid or not";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:31:"The current datamanager adapter";}i:1;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:15:"The language id";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:45:"True if the password is vald, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:44:"Updates the number of users in the usergroup";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:28:"\Tuxxedo\Datamanager\Adapter";s:10:"implements";a:1:{i:0;s:32:"\Tuxxedo\Datamanager\Hooks\Cache";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:49:"library/Tuxxedo/Datamanager/Adapter/Usergroup.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:28:"\Tuxxedo\Datamanager\Adapter";s:0:"";s:26:"\Tuxxedo\Datamanager\Hooks";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:38:"\Tuxxedo\Datamanager\Adapter\Usergroup";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:35:"Fields for validation of usergroups";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:59:"Constructor, fetches a new usergroup based on its id if set";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:7:"integer";i:1;s:16:"The usergroup id";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:46:"Additional options to apply on the datamanager";}}i:1;a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:29:"The parent datamanager if any";}}s:6:"throws";a:2:{i:0;a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:84:"Throws an exception if the usergroup id is set and it failed to load for some reason";}i:1;a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:47:"Throws a SQL exception if a database call fails";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:123:"Save the usergroup in the datastore, this method is called from
the parent class in cases when the save method was success";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:28:"\Tuxxedo\Datamanager\Adapter";s:10:"implements";a:1:{i:0;s:32:"\Tuxxedo\Datamanager\Hooks\Cache";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:43:"library/Tuxxedo/Datamanager/Hooks/Cache.php";a:6:{s:10:"namespaces";a:1:{s:26:"\Tuxxedo\Datamanager\Hooks";a:2:{s:8:"docblock";a:2:{s:11:"description";s:128:"Datamanager hooks, this namespace contains special hooks that can be used
trigger special routines within datamanager adapters.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:32:"\Tuxxedo\Datamanager\Hooks\Cache";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:103:"This event method is called if the query to store the
data was success, to rebuild the datastore cache";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:26:"\Tuxxedo\Datamanager\Hooks";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:172:"Datastore requirement for using the datamanager

This interface is for datamanagers that interacts with the datastore
cache to rebuild it to prevent manual update of it.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:47:"library/Tuxxedo/Datamanager/Hooks/Resetable.php";a:6:{s:10:"namespaces";a:1:{s:26:"\Tuxxedo\Datamanager\Hooks";a:2:{s:8:"docblock";a:2:{s:11:"description";s:128:"Datamanager hooks, this namespace contains special hooks that can be used
trigger special routines within datamanager adapters.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:36:"\Tuxxedo\Datamanager\Hooks\Resetable";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:5:"reset";s:8:"docblock";a:2:{s:11:"description";s:74:"Resets the data to its default values while keeping the
identifier intact";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:49:"Returns true on successful reset, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:26:"\Tuxxedo\Datamanager\Hooks";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:129:"Resetable interface

Resetable makes a datamanager able to reset a loaded
data set into its default values as per datamanager.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:45:"library/Tuxxedo/Datamanager/Hooks/Virtual.php";a:6:{s:10:"namespaces";a:1:{s:26:"\Tuxxedo\Datamanager\Hooks";a:2:{s:8:"docblock";a:2:{s:11:"description";s:128:"Datamanager hooks, this namespace contains special hooks that can be used
trigger special routines within datamanager adapters.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:34:"\Tuxxedo\Datamanager\Hooks\Virtual";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:7:"virtual";s:8:"docblock";a:2:{s:11:"description";s:103:"This event method is called if the query to store the
data was success, to rebuild the datastore cache";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:27:"The virtual field to handle";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:25:"The virtual field's value";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:71:"Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:26:"\Tuxxedo\Datamanager\Hooks";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:149:"Virtual field handler for using the datamanager

This interface is for allowing virtual fields to
be populated at runtime by datamanager adapters.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:55:"library/Tuxxedo/Datamanager/Hooks/VirtualDispatcher.php";a:6:{s:10:"namespaces";a:1:{s:26:"\Tuxxedo\Datamanager\Hooks";a:2:{s:8:"docblock";a:2:{s:11:"description";s:128:"Datamanager hooks, this namespace contains special hooks that can be used
trigger special routines within datamanager adapters.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:44:"\Tuxxedo\Datamanager\Hooks\VirtualDispatcher";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:0:{}s:9:"namespace";s:26:"\Tuxxedo\Datamanager\Hooks";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:146:"Virtual field dispatcher

This interface tells the datamanager API to dispatch virtual
fields to methods like: "username" -> "VirtualUsername".";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:29:"library/Tuxxedo/Datastore.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{s:20:"\Tuxxedo\Datamanager";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:18:"\Tuxxedo\Datastore";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Registry";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:44:"Holds the cached elements from the datastore";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:9:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:11:"Constructor";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"getRef";s:8:"docblock";a:2:{s:11:"description";s:98:"Gets a reference to the loaded element, so that it can be
referenced in memory rather than copied";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:43:"The datastore element to get a reference of";}i:1;a:2:{i:0;s:5:"array";i:1;s:74:"Returns a reference to an array for the element, or boolean false on error";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"__get";s:8:"docblock";a:2:{s:11:"description";s:70:"Quick reference for overloading of a loaded
element in the datastore.";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:28:"The datastore element to get";}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:62:"Returns an array is returned, otherwise boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:7:"__isset";s:8:"docblock";a:2:{s:11:"description";s:49:"Allows the usage of isset() on datastore elements";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:30:"The datastore element to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"Returns true if the element is loaded otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:7:"__unset";s:8:"docblock";a:2:{s:11:"description";s:48:"Allows the usge of unset() on datastore elements";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:31:"The datastore element to unload";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:6:"unload";s:8:"docblock";a:2:{s:11:"description";s:49:"Unloads a datastore element from the loaded cache";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:40:"The datastore element to free from cache";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:217:"Rebuilds a datastore element if it already exists, or adds
a new entry in the datastore if no elements with that name
already exists. To delete a datastore element completely,
the data parameter must be set to NULL";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:21:"The datastore element";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:95:"This can be either an array or object, if this is NULL then the datastore is deleted completely";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:41:"True on success, otherwise false on error";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:44:"Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:68:"Caches a set of elements from the datastore into
the current cache.";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:58:"An array, where the values are the datastore element names";}i:1;a:2:{i:0;s:5:"array";i:1;s:142:"An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:32:"True on success, otherwise false";}s:6:"throws";a:2:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:44:"Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:6:"filter";s:8:"docblock";a:2:{s:11:"description";s:52:"Filters out already loaded elements in the datastore";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:30:"The datastore element to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:58:"Returns true if the element not is loaded, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:168:"Datastore cache, this enables datastore caching for
databases. This assumes the datastore table and
everything else required for a database based
datastore is setup.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:31:"library/Tuxxedo/Debug/Trace.php";a:6:{s:10:"namespaces";a:1:{s:14:"\Tuxxedo\Debug";a:2:{s:8:"docblock";a:2:{s:11:"description";s:123:"Debug namespace, this namespace contains debugging related routines that
is better suited to be encapsulated in an object.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:15:"\Tuxxedo\Design";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:15:"\Tuxxedo\Helper";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:20:"\Tuxxedo\Debug\Trace";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:5:"timer";s:8:"docblock";a:2:{s:11:"description";s:5:"Timer";s:4:"tags";a:1:{s:3:"var";s:21:"\Tuxxedo\Helper\Timer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"frames";s:8:"docblock";a:2:{s:11:"description";s:12:"Stack frames";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:5:"array";i:1;s:23:"The configuration array";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:5:"start";s:8:"docblock";a:2:{s:11:"description";s:14:"Starts a trace";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"boolean";i:1;s:38:"Whether or not to resume the old trace";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:3:"end";s:8:"docblock";a:2:{s:11:"description";s:12:"Ends a trace";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:53:"Returns the timer and trace frames for the last trace";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:14:"\Tuxxedo\Debug";s:7:"extends";s:0:"";s:10:"implements";a:1:{i:0;s:25:"\Tuxxedo\Design\Invokable";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:32:"library/Tuxxedo/Design/Event.php";a:6:{s:10:"namespaces";a:1:{s:15:"\Tuxxedo\Design";a:2:{s:8:"docblock";a:2:{s:11:"description";s:181:"Design namespace. This namespace is meant for abstract concepts and
in most cases simply just interfaces that in someway structures the
general design used in the core components.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:21:"\Tuxxedo\Design\Event";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"events";s:8:"docblock";a:2:{s:11:"description";s:67:"Holds the current registered events and their
registered callbacks";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:7:"methods";a:4:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:111:"Wrapper for the trigger method, this basically allows the
syntax sugar to be possible:


new Event('name');";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:20:"The event to trigger";}i:1;a:2:{i:0;s:6:"object";i:1;s:44:"The $this instance if called inside a method";}}i:1;a:2:{i:0;s:5:"array";i:1;s:56:"Additional arguments that maybe useful for the callbacks";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:8:"register";s:8:"docblock";a:2:{s:11:"description";s:37:"Registers a new callback for an event";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:14:"The event name";}i:1;a:2:{i:0;s:8:"callback";i:1;s:12:"The callback";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"unregister";s:8:"docblock";a:2:{s:11:"description";s:38:"Unregisters all callbacks for an event";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:14:"The event name";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:4:"fire";s:8:"docblock";a:2:{s:11:"description";s:13:"Event trigger";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:20:"The event to trigger";}i:1;a:2:{i:0;s:6:"object";i:1;s:44:"The $this instance if called inside a method";}}i:1;a:2:{i:0;s:5:"array";i:1;s:56:"Additional arguments that maybe useful for the callbacks";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:15:"\Tuxxedo\Design";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:454:"Event class, this allows objects to register events and let
other objects call events like a simple plugin interface.


use Tuxxedo\Design\Event;

class Test
public function run()
new Event('TestRun', $this);




use Tuxxedo\Design\EventContext;


Event::register('TestRun', function(EventContext $ctx)
echo 'Event hook called', \PHP_EOL;




Since events are all named, this means that multiple components may
share the same name.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:39:"library/Tuxxedo/Design/EventContext.php";a:6:{s:10:"namespaces";a:1:{s:15:"\Tuxxedo\Design";a:2:{s:8:"docblock";a:2:{s:11:"description";s:181:"Design namespace. This namespace is meant for abstract concepts and
in most cases simply just interfaces that in someway structures the
general design used in the core components.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:28:"\Tuxxedo\Design\EventContext";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:5:"event";s:8:"docblock";a:2:{s:11:"description";s:14:"The event name";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"extern";s:8:"docblock";a:2:{s:11:"description";s:131:"The external object instance (if any) from the context that
triggered this event. If none context was supplied, then this
is NULL";s:4:"tags";a:1:{s:3:"var";s:6:"object";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:0:{}s:9:"namespace";s:15:"\Tuxxedo\Design";s:7:"extends";s:26:"\Tuxxedo\Design\InfoAccess";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:116:"Event Context, this basically works like an \stdClass object but
is registered for reflection and future extension.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:37:"library/Tuxxedo/Design/InfoAccess.php";a:6:{s:10:"namespaces";a:1:{s:15:"\Tuxxedo\Design";a:2:{s:8:"docblock";a:2:{s:11:"description";s:181:"Design namespace. This namespace is meant for abstract concepts and
in most cases simply just interfaces that in someway structures the
general design used in the core components.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:26:"\Tuxxedo\Design\InfoAccess";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:17:"information_event";s:8:"docblock";a:2:{s:11:"description";s:90:"Information event prefix, if this have a value then
events are triggered when overloading";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:11:"information";s:8:"docblock";a:2:{s:11:"description";s:17:"Information array";s:4:"tags";a:1:{s:3:"var";s:12:"array|object";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:6:{i:0;a:3:{s:6:"method";s:6:"import";s:8:"docblock";a:2:{s:11:"description";s:38:"Imports multiple information in one go";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:12:"array|object";i:1;s:25:"The information to import";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"export";s:8:"docblock";a:2:{s:11:"description";s:40:"Exports the entire information in one go";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:12:"array|object";i:1;s:78:"Returns an object if the internal information is an object, otherwise an array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:12:"offsetExists";s:8:"docblock";a:2:{s:11:"description";s:42:"Checks whether an information is available";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"scalar";i:1;s:33:"The information row name to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:58:"Returns true if the information is stored, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:9:"offsetGet";s:8:"docblock";a:2:{s:11:"description";s:39:"Gets a value from the information store";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"scalar";i:1;s:31:"The information row name to get";}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:65:"Returns the information value, and NULL if the value wasn't found";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:9:"offsetSet";s:8:"docblock";a:2:{s:11:"description";s:28:"Sets a new information value";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"scalar";i:1;s:31:"The information row name to set";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:33:"The new/update value for this row";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:11:"offsetUnset";s:8:"docblock";a:2:{s:11:"description";s:28:"Deletes an information value";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"scalar";i:1;s:34:"The information row name to delete";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:15:"\Tuxxedo\Design";s:7:"extends";s:0:"";s:10:"implements";a:1:{i:0;s:12:"\ArrayAccess";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:36:"library/Tuxxedo/Design/Invokable.php";a:6:{s:10:"namespaces";a:1:{s:15:"\Tuxxedo\Design";a:2:{s:8:"docblock";a:2:{s:11:"description";s:181:"Design namespace. This namespace is meant for abstract concepts and
in most cases simply just interfaces that in someway structures the
general design used in the core components.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:25:"\Tuxxedo\Design\Invokable";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:5:"array";i:1;s:23:"The configuration array";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:15:"Object instance";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:77:"Only thrown on poorly a configured database section in the configuration file";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:15:"\Tuxxedo\Design";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:98:"Interface for requring the registry to pass certain information
before the constructor is called.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:37:"library/Tuxxedo/Design/Iteratable.php";a:6:{s:10:"namespaces";a:1:{s:15:"\Tuxxedo\Design";a:2:{s:8:"docblock";a:2:{s:11:"description";s:181:"Design namespace. This namespace is meant for abstract concepts and
in most cases simply just interfaces that in someway structures the
general design used in the core components.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:26:"\Tuxxedo\Design\Iteratable";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:0:{}s:9:"namespace";s:15:"\Tuxxedo\Design";s:7:"extends";s:0:"";s:10:"implements";a:2:{i:0;s:9:"\Iterator";i:1;s:10:"\Countable";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:29:"library/Tuxxedo/Exception.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:18:"\Tuxxedo\Exception";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:84:"Standard exception, indicates that this is a GUI themed error (a non critical fatal)";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:77:"The error message, in a printf-alike formatted string or just a normal string";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:35:"Optional argument #n for formatting";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:10:"\Exception";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:106:"Default exception, mainly used for general errors. All
Tuxxedo specific exceptions extend this exception.";s:4:"tags";a:3:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:35:"library/Tuxxedo/Exception/Basic.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:24:"\Tuxxedo\Exception\Basic";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:0:{}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:18:"\Tuxxedo\Exception";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:181:"Basic exception type, this is used for errors that
should act as fatal errors. If an exception of this
is caught by the default exception handler it will
terminate the execution.";s:4:"tags";a:3:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:40:"library/Tuxxedo/Exception/BasicMulti.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:29:"\Tuxxedo\Exception\BasicMulti";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"errors";s:8:"docblock";a:2:{s:11:"description";s:31:"Holds the current stored errors";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:44:"Constructs a new basic multi error exception";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"Form data to store as an array";}i:1;a:2:{i:0;s:6:"string";i:1;s:77:"The error message, in a printf-alike formatted string or just a normal string";}}i:1;a:2:{i:0;s:5:"mixed";i:1;s:35:"Optional argument #n for formatting";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"getErrors";s:8:"docblock";a:2:{s:11:"description";s:19:"Gets all the errors";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:47:"Returns an array with all the registered errors";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:24:"\Tuxxedo\Exception\Basic";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:263:"Basic Multi error exception

Can throw multiple errors at the same time, and works like the 'Basic'
exception and halts the execution.

The 'Multi' exception is using the same basic design and is application
friendly and should be used for 'Runtime' errors.";s:4:"tags";a:3:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:47:"library/Tuxxedo/Exception/MVC/InvalidAction.php";a:6:{s:10:"namespaces";a:1:{s:22:"\Tuxxedo\Exception\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:90:"MVC Exception namespace. This contains all the specialized exceptions for
MVC components.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:18:"\Tuxxedo\Exception";s:0:"";}s:7:"classes";a:1:{s:36:"\Tuxxedo\Exception\MVC\InvalidAction";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:52:"Constructor, sets the standardized exception message";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:10:"\Exception";i:1;s:29:"The previous exception if any";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:22:"\Tuxxedo\Exception\MVC";s:7:"extends";s:24:"\Tuxxedo\Exception\Basic";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:21:"Invalid action method";s:4:"tags";a:3:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:51:"library/Tuxxedo/Exception/MVC/InvalidController.php";a:6:{s:10:"namespaces";a:1:{s:22:"\Tuxxedo\Exception\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:90:"MVC Exception namespace. This contains all the specialized exceptions for
MVC components.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:18:"\Tuxxedo\Exception";s:0:"";}s:7:"classes";a:1:{s:40:"\Tuxxedo\Exception\MVC\InvalidController";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:52:"Constructor, sets the standardized exception message";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:10:"\Exception";i:1;s:29:"The previous exception if any";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:22:"\Tuxxedo\Exception\MVC";s:7:"extends";s:24:"\Tuxxedo\Exception\Basic";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:18:"Invalid controller";s:4:"tags";a:3:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:35:"library/Tuxxedo/Exception/Multi.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:24:"\Tuxxedo\Exception\Multi";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:4:"data";s:8:"docblock";a:2:{s:11:"description";s:29:"Holds the current stored data";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:36:"Constructs a new data exception from";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:22:"D to store as an array";}i:1;a:2:{i:0;s:6:"string";i:1;s:77:"The error message, in a printf-alike formatted string or just a normal string";}}i:1;a:2:{i:0;s:5:"mixed";i:1;s:35:"Optional argument #n for formatting";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"getData";s:8:"docblock";a:2:{s:11:"description";s:17:"Gets all the data";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:34:"Returns an array with all the data";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:18:"\Tuxxedo\Exception";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:167:"Multi exception, this exception is used to carry multiple data
so it can be displayed when multiple causes were the reason for
a fail, for example a form validation.";s:4:"tags";a:3:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:33:"library/Tuxxedo/Exception/SQL.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:22:"\Tuxxedo\Exception\SQL";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:8:"sqlstate";s:8:"docblock";a:2:{s:11:"description";s:17:"Current SQL state";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"driver";s:8:"docblock";a:2:{s:11:"description";s:29:"Driver that caused this error";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:4:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:30:"Constructs a new SQL exception";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:30:"The SQL that caused this error";}i:1;a:2:{i:0;s:6:"string";i:1;s:33:"The driver that caused this error";}}i:1;a:2:{i:0;s:6:"string";i:1;s:22:"The error that occured";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:41:"The associated error number for the error";}}i:1;a:2:{i:0;s:6:"string";i:1;s:59:"Optionally, an SQL state if the database driver supports it";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"getSQL";s:8:"docblock";a:2:{s:11:"description";s:56:"Gets the SQL string that caused the exception to trigger";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:22:"Returns the SQL string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:11:"getSQLState";s:8:"docblock";a:2:{s:11:"description";s:101:"Gets the current SQL state if the underlaying database
driver that threw this exception supports it.";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:63:"Returns the SQL state if supported, otherwise false is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:9:"getDriver";s:8:"docblock";a:2:{s:11:"description";s:53:"Gets the driver that caused this exception to trigger";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:23:"Returns the driver name";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:24:"\Tuxxedo\Exception\Basic";s:10:"implements";a:0:{}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:46:"library/Tuxxedo/Exception/TemplateCompiler.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:35:"\Tuxxedo\Exception\TemplateCompiler";a:8:{s:9:"constants";a:3:{i:0;a:4:{s:8:"constant";s:9:"TYPE_NONE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:21:"Exception type - None";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:14:"TYPE_CONDITION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:26:"Exception type - Condition";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:11:"TYPE_PHRASE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:23:"Exception type - Phrase";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:10:"stack_data";s:8:"docblock";a:2:{s:11:"description";s:19:"Compiler stack data";s:4:"tags";a:1:{s:3:"var";s:9:"\stdClass";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:39:"Constructs a template compiler excepton";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"The error message";}i:1;a:2:{i:0;s:9:"\stdClass";i:1;s:31:"The current compiler stack data";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:12:"getStackData";s:8:"docblock";a:2:{s:11:"description";s:31:"Fetches the compiler stack data";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:9:"\stdClass";i:1;s:62:"Returns the compiler stack data, and NULL if non was available";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:18:"\Tuxxedo\Exception";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:83:"Template compiler exception, any compilation error will be
of this exception type.";s:4:"tags";a:3:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:40:"library/Tuxxedo/Exception/Translated.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:29:"\Tuxxedo\Exception\Translated";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:979:"Constructs a new internalizationized exception, meaning that the
contents of this exception may be formatted for internationalized
usage.

If the internationalization object is not instanciated, then the
message is used as a raw translation, if the translation parameter
is specified then its formatted using a sprintf-alike syntax,
example:

try
throw new Exception\Translated('You are not old enough to view this content, you must be %d years old', 'age_limit_x', 18);
catch(Exception\Translated $e)
echo $e->getMessage();

If the translation method is specified and the component is not loaded, then
formatting will be applied internally.

Now if the internationalization component is loaded, then the above
would have outputted the same, however internally it would lookup the
phrase name 'age_limit_x' within the internationalization object, and
find its translation phrase and format it like regular phrases are
formatted with the {1}, {2}, {N} syntax.";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:84:"The untranslated message, in case of the internationalization library was not loaded";}i:1;a:2:{i:0;s:6:"string";i:1;s:22:"The translation phrase";}}i:1;a:2:{i:0;s:5:"mixed";i:1;s:62:"Optionally translation phrase replacement or parameter 1, 2, N";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:18:"\Tuxxedo\Exception";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:141:"Translated exception, this works like the standard
UI exception except that it can format the message
like the Internationalization object.";s:4:"tags";a:3:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:26:"library/Tuxxedo/Helper.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:15:"\Tuxxedo\Helper";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:14:"loaded_helpers";s:8:"docblock";a:2:{s:11:"description";s:27:"Contains the loaded helpers";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:23:"Constructs a new helper";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:28:"The Tuxxedo object reference";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:1;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"factory";s:8:"docblock";a:2:{s:11:"description";s:186:"Factory method for loading a new helper

When loading multiple helpers and set them to register in the registry, then
the last registered one will override the old one in the registry";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"The helper handle to instanciate";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:47:"Whether to register this helper in the registry";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:40:"Returns a helper handle object reference";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:43:"Throws a basic exception on invalid helpers";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:24:"Helper loading interface";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:35:"library/Tuxxedo/Helper/Database.php";a:6:{s:10:"namespaces";a:1:{s:15:"\Tuxxedo\Helper";a:2:{s:8:"docblock";a:2:{s:11:"description";s:81:"Helper namespace, this namespace is for standard helpers that comes
with Engine.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:24:"\Tuxxedo\Helper\Database";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:8:"instance";s:8:"docblock";a:2:{s:11:"description";s:17:"Database instance";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Database";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"driver";s:8:"docblock";a:2:{s:11:"description";s:15:"Database driver";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:8:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:30:"Constructs the database helper";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:28:"The Tuxxedo object reference";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:11:"setInstance";s:8:"docblock";a:2:{s:11:"description";s:40:"Sets a new instance of a database object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:17:"\Tuxxedo\Database";i:1;s:42:"The database object to apply operations on";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:9:"getDriver";s:8:"docblock";a:2:{s:11:"description";s:30:"Gets the canonical driver name";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:59:"Returns the canonical driver name for the internal instance";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:8:"truncate";s:8:"docblock";a:2:{s:11:"description";s:26:"Truncates a database table";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:21:"The table to truncate";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:41:"Returns true on succes and false on error";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:56:"Throws an SQL exception if the database operation failed";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:5:"count";s:8:"docblock";a:2:{s:11:"description";s:36:"Counts the number of rows in a table";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:18:"The table to count";}i:1;a:2:{i:0;s:6:"string";i:1;s:34:"Optionally an index, defaults to *";}}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:46:"Returns the number of rows, and false on error";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:56:"Throws an SQL exception if the database operation failed";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:9:"getTables";s:8:"docblock";a:2:{s:11:"description";s:32:"Gets all table within a database";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:57:"The database name, if differs from the current connection";}s:6:"return";a:2:{i:0;s:24:"\Tuxxedo\Database\Result";i:1;s:81:"Returns a database result object, and false if unsupported or if no tables exists";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:13:"tableOptimize";s:8:"docblock";a:2:{s:11:"description";s:26:"Table operation - optimize";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:14:"The table name";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:44:"Returns the status, and false if unsupported";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:11:"tableRepair";s:8:"docblock";a:2:{s:11:"description";s:24:"Table operation - repair";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:14:"The table name";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:44:"Returns the status, and false if unsupported";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:15:"\Tuxxedo\Helper";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:25:"Database utilities helper";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:32:"library/Tuxxedo/Helper/Timer.php";a:6:{s:10:"namespaces";a:1:{s:15:"\Tuxxedo\Helper";a:2:{s:8:"docblock";a:2:{s:11:"description";s:81:"Helper namespace, this namespace is for standard helpers that comes
with Engine.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:21:"\Tuxxedo\Helper\Timer";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"timers";s:8:"docblock";a:2:{s:11:"description";s:27:"Holds the registered timers";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:4:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:17:"Dummy constructor";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:28:"The Tuxxedo object reference";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:5:"start";s:8:"docblock";a:2:{s:11:"description";s:14:"Starts a timer";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:21:"The name of the timer";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:4:"stop";s:8:"docblock";a:2:{s:11:"description";s:28:"Stops a timer and deletes it";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:21:"The name of the timer";}s:6:"return";a:2:{i:0;s:5:"float";i:1;s:64:"Returns the time elapsed since the start or 0.0 on invalid timer";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:3:"get";s:8:"docblock";a:2:{s:11:"description";s:39:"Gets the time since a timer was started";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:21:"The name of the timer";}s:6:"return";a:2:{i:0;s:5:"float";i:1;s:64:"Returns the time elapsed since the start or 0.0 on invalid timer";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:15:"\Tuxxedo\Helper";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:12:"Timer helper";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:25:"library/Tuxxedo/Input.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:14:"\Tuxxedo\Input";a:8:{s:9:"constants";a:6:{i:0;a:4:{s:8:"constant";s:12:"TYPE_NUMERIC";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:35:"Data filter constant, numeric value";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:11:"TYPE_STRING";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Data filter constant, string value";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:10:"TYPE_EMAIL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:33:"Data filter constant, email value";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:12:"TYPE_BOOLEAN";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:35:"Data filter constant, boolean value";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:7:"OPT_RAW";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:82:"Data filter option, gets the raw value
of the input without any type of santizing";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"constant";s:9:"OPT_ARRAY";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:182:"Data filter option, tells the cleaner that this
is an array input and any of its elements must be of
the given type. Note that recursive operations are not
done by the data filter";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:0:{}s:7:"methods";a:5:{i:0;a:3:{s:6:"method";s:3:"get";s:8:"docblock";a:2:{s:11:"description";s:18:"Filters 'GET' data";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:30:"Field name in the input source";}i:1;a:2:{i:0;s:7:"integer";i:1;s:33:"Type of input filtering performed";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:28:"Additional filtering options";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:49:"Returns the filtered value, returns NULL on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:4:"post";s:8:"docblock";a:2:{s:11:"description";s:19:"Filters 'POST' data";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:30:"Field name in the input source";}i:1;a:2:{i:0;s:7:"integer";i:1;s:33:"Type of input filtering performed";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:28:"Additional filtering options";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:49:"Returns the filtered value, returns NULL on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:6:"cookie";s:8:"docblock";a:2:{s:11:"description";s:21:"Filters 'COOKIE' data";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:30:"Field name in the input source";}i:1;a:2:{i:0;s:7:"integer";i:1;s:33:"Type of input filtering performed";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:28:"Additional filtering options";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:49:"Returns the filtered value, returns NULL on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:4:"user";s:8:"docblock";a:2:{s:11:"description";s:45:"Filters 'user' data, as passed to this method";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"The data to clean";}i:1;a:2:{i:0;s:7:"integer";i:1;s:33:"Type of input filtering performed";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:49:"Returns the filtered value, returns NULL on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:7:"process";s:8:"docblock";a:2:{s:11:"description";s:62:"Private filter method used by the GPC methods
to filter data.";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:82:"Where the data to filter is coming from (1 = GET, 2 = POST, 3 = COOKIE & 4 = User)";}i:1;a:2:{i:0;s:6:"string";i:1;s:30:"Field name in the input source";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:33:"Type of input filtering performed";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:28:"Additional filtering options";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:49:"Returns the filtered value, returns NULL on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:175:"Input filtering class, this class cleans data
with magic quotes in mind. It will use the filter
extension if its available or use its own filtering
functions to emulate it.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:24:"library/Tuxxedo/Intl.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:15:"\Tuxxedo\Design";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:13:"\Tuxxedo\Intl";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:13:"\Tuxxedo\Intl";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Registry";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:7:"phrases";s:8:"docblock";a:2:{s:11:"description";s:32:"Holds the current loaded phrases";s:4:"tags";a:1:{s:3:"var";s:5:"Array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:11:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:44:"Constructs a new internationalization object";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:24:"The language data to use";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:5:"array";i:1;s:23:"The configuration array";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:15:"Object instance";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:75:"Throws a basic exception if an invalid (or not cached) language id was used";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:86:"Caches a phrase group, trying to cache an already loaded
phrase group will recache it";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:31:"A list of phrase groups to load";}i:1;a:2:{i:0;s:5:"array";i:1;s:142:"An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:39:"Returns true on success otherwise false";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:44:"Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:14:"getPhrasegroup";s:8:"docblock";a:2:{s:11:"description";s:44:"Gets all phrases from a specific phrasegroup";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:22:"The phrasegroup to get";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:59:"Whether to return a new phrasegroup object or just an array";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:104:"Depending on the value of second parameter, an object or array is returned. False is returned on faliure";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:15:"getPhrasegroups";s:8:"docblock";a:2:{s:11:"description";s:21:"Gets all phrasegroups";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:94:"Returns an array with all loaded phrasegroups, false is returned if no phrasegroups is loaded.";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:4:"find";s:8:"docblock";a:2:{s:11:"description";s:14:"Finds a phrase";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:18:"The phrase to find";}i:1;a:2:{i:0;s:6:"string";i:1;s:70:"Optionally search in a specific phrasegroup, defaults to search in all";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:59:"Returns a phrases translation, false is returned on failure";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:6:"format";s:8:"docblock";a:2:{s:11:"description";s:27:"Format a translation string";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:37:"The phrase to perform replacements on";}i:1;a:2:{i:0;s:6:"scalar";i:1;s:21:"Replacement string #1";}}i:1;a:2:{i:0;s:6:"scalar";i:1;s:21:"Replacement string #n";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:40:"Returns the formatted translation string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:10:"getPhrases";s:8:"docblock";a:2:{s:11:"description";s:215:"Gets all phrases, note that phrases may be overridden by
another if there is more with the same name. To overcome this
limitation you must fetch the phrasegroup in which the phrase
belongs and fetch it from there";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:87:"Returns an array containing all loaded phrases and empty array if no phrases are loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:11:"getISOCodes";s:8:"docblock";a:2:{s:11:"description";s:43:"Gets the browser language codes in priority";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:119:"Returns an array with the language codes in priority from the user's browser, each code may be either 2 or 5 bytes long";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:6:"unload";s:8:"docblock";a:2:{s:11:"description";s:41:"Unloads a phrasegroup from current memory";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:12:"string|array";i:1;s:55:"The name of the phrasegroup(s) to remove from the cache";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:42:"Returns true on success and false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:6:"filter";s:8:"docblock";a:2:{s:11:"description";s:63:"Filter callback for checking if a phrasegroup have any
phrases";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:24:"The phrasegroup to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:65:"True if is one or more phrases in that phrasegroup, false if none";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:26:"\Tuxxedo\Design\InfoAccess";s:10:"implements";a:1:{i:0;s:25:"\Tuxxedo\Design\Invokable";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:36:"library/Tuxxedo/Intl/Phrasegroup.php";a:6:{s:10:"namespaces";a:1:{s:13:"\Tuxxedo\Intl";a:2:{s:8:"docblock";a:2:{s:11:"description";s:127:"Internationalization namespace, this contains components for
internationalization manipulation, like phrases and phrasegroups.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{s:15:"\Tuxxedo\Design";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:13:"\Tuxxedo\Intl";s:0:"";}s:7:"classes";a:1:{s:25:"\Tuxxedo\Intl\Phrasegroup";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:35:"Constructs a new phrasegroup object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:13:"\Tuxxedo\Intl";i:1;s:72:"Reference to the internationalization object to use for this phrasegroup";}i:1;a:2:{i:0;s:6:"string";i:1;s:38:"Name of the phrasegroup to instanciate";}}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:90:"Throws a basic exception if the phrasegroup isnt cached in the internationalization object";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:13:"\Tuxxedo\Intl";s:7:"extends";s:26:"\Tuxxedo\Design\InfoAccess";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:103:"Internationalization phrasegroup class

Contains basic routines for working with single phrasegroups.";s:4:"tags";a:3:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:26:"library/Tuxxedo/Loader.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:18:"\Tuxxedo\Exception";s:0:"";}s:7:"classes";a:1:{s:15:"\Tuxxedo\Loader";a:8:{s:9:"constants";a:2:{i:0;a:4:{s:8:"constant";s:12:"MODE_DEFAULT";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:21:"Loader mode - Default";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:9:"MODE_PSR0";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:19:"Loader mode - PSR-0";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:4:{i:0;a:3:{s:8:"property";s:4:"mode";s:8:"docblock";a:2:{s:11:"description";s:11:"Loader mode";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:9:"separator";s:8:"docblock";a:2:{s:11:"description";s:212:"Default separator for classes, this is commonly '_'
for non namespaced code. Separators may have different
meaning depending on the loader modes.

This value is ignored in the following loader modes:

PSR-0";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:4:"root";s:8:"docblock";a:2:{s:11:"description";s:56:"Default root to load from, defaults to the library
path";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:6:"routes";s:8:"docblock";a:2:{s:11:"description";s:26:"Custom routing definitions";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:7:"methods";a:7:{i:0;a:3:{s:6:"method";s:4:"mode";s:8:"docblock";a:2:{s:11:"description";s:32:"Defines which loader mode to use";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"integer";i:1;s:50:"The loader mode; one of the MODE_* class constants";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:11:"routeAsPath";s:8:"docblock";a:2:{s:11:"description";s:56:"Defines one or more rewrite rules for autoloading
paths";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:12:"string|array";i:1;s:59:"The class or an array of classes to define custom rules for";}i:1;a:2:{i:0;s:6:"string";i:1;s:44:"The class separator, defaults to a backslash";}}i:1;a:2:{i:0;s:6:"string";i:1;s:26:"The root path to load from";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:12:"routeAsRegex";s:8:"docblock";a:2:{s:11:"description";s:67:"Defines one or more rewrite rules for autoloading
paths using PCRE";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:66:"The regular expression to match (without delimiters and modifiers)";}i:1;a:2:{i:0;s:6:"string";i:1;s:52:"The matching formatting, including separators if any";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:15:"routeAsCallback";s:8:"docblock";a:2:{s:11:"description";s:155:"Defines a callback for routing, this can be used to virtually alias
or similar in siturations where the other routing implementations
simply cannot match";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:62:"The matching part, this can be a full name or a partial string";}i:1;a:2:{i:0;s:8:"callback";i:1;s:24:"The callback to route to";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:17:"getNormalizedPath";s:8:"docblock";a:2:{s:11:"description";s:45:"Normalizes a class/interface name into a path";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:30:"The class/interface to convert";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:"Returns the matching path";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:4:"load";s:8:"docblock";a:2:{s:11:"description";s:134:"Autoloads a class or interface, if the class or interface fails to load, the error handler is called
directly and the error is shown.";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:34:"The class or interface to autoload";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:87:"Whether to return true or false in case of loading instead of calling the error handler";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:120:"Returns true if loaded, false otherwise if loading failed (latter is only true, if the $silent parameter is set to true)";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:93:"Throws a basic exception if its loaded into runtime, else falls back to a standard error call";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:6:"exists";s:8:"docblock";a:2:{s:11:"description";s:77:"Check whether a class or interface exists without attempting to autoload them";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:31:"The class or interface to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:34:"True if exists and false otherwise";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:18:"Autoloader handler";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:34:"library/Tuxxedo/MVC/Controller.php";a:6:{s:10:"namespaces";a:1:{s:12:"\Tuxxedo\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"MVC (Model-View-Controller) namespace, this contains all the base
implementation of each of the building bricks and extensions for
extending them even further.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\MVC\View";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:23:"\Tuxxedo\MVC\Controller";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:4:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Registry";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"router";s:8:"docblock";a:2:{s:11:"description";s:13:"Router object";s:4:"tags";a:1:{s:3:"var";s:15:"\Tuxxedo\Router";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:6:"layout";s:8:"docblock";a:2:{s:11:"description";s:22:"Layout template object";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\MVC\View";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:4:"view";s:8:"docblock";a:2:{s:11:"description";s:21:"Current view template";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\MVC\View";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:5:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:11:"Constructor";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"setRouter";s:8:"docblock";a:2:{s:11:"description";s:21:"Set the router object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:15:"\Tuxxedo\Router";i:1;s:18:"Router object used";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:9:"setLayout";s:8:"docblock";a:2:{s:11:"description";s:43:"Set the template object used for the layout";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:17:"\Tuxxedo\MVC\View";i:1;s:15:"Layout template";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:7:"setView";s:8:"docblock";a:2:{s:11:"description";s:19:"Set the view object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:17:"\Tuxxedo\MVC\View";i:1;s:36:"View template for the current action";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:8:"dispatch";s:8:"docblock";a:2:{s:11:"description";s:54:"Dispatches the controller and renders the page content";s:4:"tags";a:2:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:13:"Rendered view";}s:6:"throws";a:2:{i:0;a:2:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:33:"If the controller does not exists";}i:1;a:2:{i:0;s:36:"\Tuxxedo\Exception\MVC\InvalidAction";i:1;s:36:"If the action method does not exists";}}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:12:"\Tuxxedo\MVC";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:48:"The base controller class for the MVC components";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:47:"library/Tuxxedo/MVC/Controller/Dispatchable.php";a:6:{s:10:"namespaces";a:1:{s:23:"\Tuxxedo\MVC\Controller";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Controller extensions namespace. In here all extensions are stored
for MV-Controllers.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:36:"\Tuxxedo\MVC\Controller\Dispatchable";a:8:{s:9:"constants";a:2:{i:0;a:4:{s:8:"constant";s:12:"DISPATCH_PRE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Controller extensions namespace. In here all extensions are stored
for MV-Controllers.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:40:"Dispatch hook constant - Pre dispatching";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:13:"DISPATCH_POST";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Controller extensions namespace. In here all extensions are stored
for MV-Controllers.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:41:"Dispatch hook constant - Post dispatching";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:10:"dispatcher";s:8:"docblock";a:2:{s:11:"description";s:155:"Controller dispatch hook, this hook is called for
both pre and post dispatching and uses its only
parameter to determine which state we currently are
in";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"integer";i:1;s:29:"The current dispatching state";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:23:"\Tuxxedo\MVC\Controller";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:43:"Interface for dispatchable controller hooks";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:29:"library/Tuxxedo/MVC/Model.php";a:6:{s:10:"namespaces";a:1:{s:12:"\Tuxxedo\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"MVC (Model-View-Controller) namespace, this contains all the base
implementation of each of the building bricks and extensions for
extending them even further.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:18:"\Tuxxedo\Exception";s:0:"";}s:7:"classes";a:1:{s:18:"\Tuxxedo\MVC\Model";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:7:"methods";s:8:"docblock";a:2:{s:11:"description";s:18:"The methods to map";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:5:"remap";s:8:"docblock";a:2:{s:11:"description";s:21:"Re-indexes the mapper";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"__call";s:8:"docblock";a:2:{s:11:"description";s:56:"Caller method, this emulates the defined method mappings";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:18:"The method to call";}i:1;a:2:{i:0;s:5:"array";i:1;s:27:"The method arguments if any";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:38:"Returns the value of the mapped method";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:12:"\Tuxxedo\MVC";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:292:"Model class

In a MVC application this would be extended to create logical models,
that are populated with data from another source (e.g. a datamanager).

This class implements a few methods that make writing models less
tedious, without having to write the same methods for each model.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:36:"library/Tuxxedo/MVC/Model/Mapper.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\MVC\Model";a:2:{s:8:"docblock";a:2:{s:11:"description";s:77:"Model extensions namespace. In here all extensions are stored
for Models-VC.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:25:"\Tuxxedo\MVC\Model\Mapper";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:9:"getMapper";s:8:"docblock";a:2:{s:11:"description";s:133:"Model mapper hook, this returns a list of the methods to
map properties for. To reindex the mapper, call the remap()
member method.";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:38:"Returns an array of the methods to map";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:18:"\Tuxxedo\MVC\Model";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:43:"Interface for dispatchable controller hooks";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:30:"library/Tuxxedo/MVC/Router.php";a:6:{s:10:"namespaces";a:1:{s:12:"\Tuxxedo\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"MVC (Model-View-Controller) namespace, this contains all the base
implementation of each of the building bricks and extensions for
extending them even further.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:15:"\Tuxxedo\Design";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:15:"\Tuxxedo\Loader";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:19:"\Tuxxedo\MVC\Router";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:7:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Registry";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"prefix";s:8:"docblock";a:2:{s:11:"description";s:21:"Application namespace";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:10:"controller";s:8:"docblock";a:2:{s:11:"description";s:18:"Current controller";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:6:"action";s:8:"docblock";a:2:{s:11:"description";s:14:"Current action";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:18:"default_controller";s:8:"docblock";a:2:{s:11:"description";s:18:"Default controller";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:14:"default_action";s:8:"docblock";a:2:{s:11:"description";s:14:"Default action";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:6;a:3:{s:8:"property";s:10:"parameters";s:8:"docblock";a:2:{s:11:"description";s:21:"Additional parameters";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:11:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:66:"Constructor, set the controller and action to their
default names";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:85:"The application prefix (namespace), e.g. \Application\Controllers\, must end with a \";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:15:"getPreloadables";s:8:"docblock";a:2:{s:11:"description";s:70:"Gets the preloadables for the bootstrap before dispatching
the router";s:4:"tags";a:2:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:55:"Returns a multi dimentional array with preloadable data";}s:6:"throws";a:2:{i:0;s:40:"\Tuxxedo\Exception\MVC\InvalidController";i:1;s:76:"Throws an invalid controller exception if the controller could not be loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:13:"setController";s:8:"docblock";a:2:{s:11:"description";s:34:"Set the normalised controller name";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:19:"The controller name";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:13:"getController";s:8:"docblock";a:2:{s:11:"description";s:30:"Get the routed controller name";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:19:"The Controller name";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:9:"setAction";s:8:"docblock";a:2:{s:11:"description";s:30:"Set the normalised action name";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:15:"The action name";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:9:"getAction";s:8:"docblock";a:2:{s:11:"description";s:26:"Get the routed action name";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:15:"The action name";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:15:"getActionMethod";s:8:"docblock";a:2:{s:11:"description";s:33:"Get the routed action method name";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:15:"The action name";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:13:"getParameters";s:8:"docblock";a:2:{s:11:"description";s:19:"Gets all parameters";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:34:"Returns all the parameters defined";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:7:"__isset";s:8:"docblock";a:2:{s:11:"description";s:27:"Check if a parameter is set";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:31:"Index of the parameter to check";}s:6:"return";a:2:{i:0;s:4:"bool";i:1;s:53:"Returns true if the parameter exists, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:5:"route";s:8:"docblock";a:2:{s:11:"description";s:28:"Route (start the controller)";s:4:"tags";a:2:{s:6:"return";a:2:{i:0;s:23:"\Tuxxedo\MVC\Controller";i:1;s:33:"Returns a new controller instance";}s:6:"throws";a:2:{i:0;s:40:"\Tuxxedo\Exception\MVC\InvalidController";i:1;s:76:"Throws an invalid controller exception if the controller could not be loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:8:"__invoke";s:8:"docblock";a:2:{s:11:"description";s:47:"Route (shorthand method for the route() method)";s:4:"tags";a:2:{s:6:"return";a:2:{i:0;s:23:"\Tuxxedo\MVC\Controller";i:1;s:33:"Returns a new controller instance";}s:6:"throws";a:2:{i:0;s:40:"\Tuxxedo\Exception\MVC\InvalidController";i:1;s:76:"Throws an invalid controller exception if the controller could not be loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:12:"\Tuxxedo\MVC";s:7:"extends";s:26:"\Tuxxedo\Design\InfoAccess";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:93:"The router can detect from a range of sources the required controller and
action to execute.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:34:"library/Tuxxedo/MVC/Router/Uri.php";a:6:{s:10:"namespaces";a:1:{s:19:"\Tuxxedo\MVC\Router";a:2:{s:8:"docblock";a:2:{s:11:"description";s:98:"Router namespace, this contains various interfaces for routing using
different types of protocols";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:19:"\Tuxxedo\MVC\Router";s:0:"";}s:7:"classes";a:1:{s:23:"\Tuxxedo\MVC\Router\Uri";a:8:{s:9:"constants";a:2:{i:0;a:4:{s:8:"constant";s:15:"TYPE_CONTROLLER";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:98:"Router namespace, this contains various interfaces for routing using
different types of protocols";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:31:"Rule type constant - Controller";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:11:"TYPE_ACTION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:98:"Router namespace, this contains various interfaces for routing using
different types of protocols";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:27:"Rule type constant - Action";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:0:{}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:5:"parse";s:8:"docblock";a:2:{s:11:"description";s:381:"Parses a uri and dispatches them all into controller, action and
parameters.

The general pattern for the URI routing in this case is fairly common
Assumed default names are Index and index for controller and action,
though these can be changed using the methods.

Default routes:

Follows #4 and #5 based on whether number of pieces is even or odd (
odd = #4, even = #5)";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:16:"The Uri to parse";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"canonical";s:8:"docblock";a:2:{s:11:"description";s:49:"Generates a canonical name for various components";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"The path or component to convert";}i:1;a:2:{i:0;s:7:"integer";i:1;s:58:"A rule type, this is used to make sure things are callable";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:26:"Returns the canonical name";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:19:"\Tuxxedo\MVC\Router";s:7:"extends";s:19:"\Tuxxedo\MVC\Router";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:27:"Uri based router interface.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:28:"library/Tuxxedo/MVC/View.php";a:6:{s:10:"namespaces";a:1:{s:12:"\Tuxxedo\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"MVC (Model-View-Controller) namespace, this contains all the base
implementation of each of the building bricks and extensions for
extending them even further.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:17:"\Tuxxedo\Template";s:0:"";}s:7:"classes";a:1:{s:17:"\Tuxxedo\MVC\View";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:0:{}s:9:"namespace";s:12:"\Tuxxedo\MVC";s:7:"extends";s:17:"\Tuxxedo\Template";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:165:"The View class for MVC based components, this wraps around the
existing style API.

This class currently only serves as a wrapper for the regular
template class.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:35:"library/Tuxxedo/MVC/View/Layout.php";a:6:{s:10:"namespaces";a:1:{s:17:"\Tuxxedo\MVC\View";a:2:{s:8:"docblock";a:2:{s:11:"description";s:88:"View namespace, this contains routines to ease development
of MVC related applications.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{s:17:"\Tuxxedo\MVC\View";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:24:"\Tuxxedo\MVC\View\Layout";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:41:"Constructor, constructs a new view layout";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:38:"The name of the view to load as layout";}i:1;a:2:{i:0;s:5:"array";i:1;s:24:"Default variables to set";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"setLayout";s:8:"docblock";a:2:{s:11:"description";s:92:"Wrapper method for changing layout mode, this
cannot be disabled, thrus no error is emitted";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:17:"\Tuxxedo\MVC\View";s:7:"extends";s:17:"\Tuxxedo\MVC\View";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:157:"View layout, this works as a wrapper to automatically enable
layout mode. Layout mode cannot be disabled, which is the only
difference from a regular view.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:27:"library/Tuxxedo/Options.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{s:15:"\Tuxxedo\Design";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:16:"\Tuxxedo\Options";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:7:"options";s:8:"docblock";a:2:{s:11:"description";s:56:"Holds the options, this is a reference to
the datastore";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:28:"Constructs the options class";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:5:"array";i:1;s:23:"The configuration array";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:15:"Object instance";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:92:"Throws a basic exception if neither the 'options' and 'optioncategories' datastore is loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"__get";s:8:"docblock";a:2:{s:11:"description";s:14:"Gets an option";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:22:"The name of the option";}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:53:"Returns the option value, and null on invalid options";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:26:"\Tuxxedo\Design\InfoAccess";s:10:"implements";a:1:{i:0;s:25:"\Tuxxedo\Design\Invokable";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:28:"library/Tuxxedo/Registry.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:18:"\Tuxxedo\Exception";s:0:"";}s:7:"classes";a:1:{s:17:"\Tuxxedo\Registry";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:4:{i:0;a:3:{s:8:"property";s:8:"instance";s:8:"docblock";a:2:{s:11:"description";s:23:"Holds the main instance";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Registry";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:1;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:13:"configuration";s:8:"docblock";a:2:{s:11:"description";s:29:"Holds the configuration array";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:9:"instances";s:8:"docblock";a:2:{s:11:"description";s:42:"Holds an array of the instances registered";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:7:"globals";s:8:"docblock";a:2:{s:11:"description";s:49:"Holds the list of global variables across
Engine";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:14:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:43:"Disable the ability to construct the object";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"__clone";s:8:"docblock";a:2:{s:11:"description";s:39:"Disable the ability to clone the object";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"__get";s:8:"docblock";a:2:{s:11:"description";s:67:"Magic get method, this handles overloading of registered
instances";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:13:"Instance name";}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:65:"Returns the object instance if it exists, otherwise boolean false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:7:"__isset";s:8:"docblock";a:2:{s:11:"description";s:47:"Allows the usage of isset() on registry objects";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:28:"The registry object to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:49:"Returns true if the object exists otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:7:"__unset";s:8:"docblock";a:2:{s:11:"description";s:46:"Allows the usge of unset() on registry objects";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:29:"The registry object to unload";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:6:"unload";s:8:"docblock";a:2:{s:11:"description";s:25:"Unloads a registry object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:29:"The registry object to unload";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:4:"init";s:8:"docblock";a:2:{s:11:"description";s:141:"Initializes a new object instance, this implements the
singleton pattern and can be called from any context and
the same object is returned";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:70:"The configuration array, this is only needed first time this is called";}s:6:"return";a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:33:"An instance to the Tuxxedo object";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:8:"register";s:8:"docblock";a:2:{s:11:"description";s:342:"Registers a new instance and makes it accessable through
the name defined by the first parameter in the global scope
like the example below:

use Tuxxedo\Registry;



Note that the class must be a full path, and not an alias as
the class is instanciated inside the registry, not the scope
where custom aliasing rules may be defined.";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"The name of this instance";}i:1;a:2:{i:0;s:6:"string";i:1;s:62:"The class to register, this supports the 'Invokable' interface";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:43:"Returns a reference to the created instance";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:43:"Throws a basic exception in case of failure";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:97:"Invokes a class, calling its preloading method if available
and then returns the instance object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:62:"The class to register, this supports the 'Invokable' interface";}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:43:"Returns a reference to the created instance";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:3:"set";s:8:"docblock";a:2:{s:11:"description";s:36:"Sets a new reference in the registry";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:25:"The name of the reference";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:26:"The value of the reference";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:3:"get";s:8:"docblock";a:2:{s:11:"description";s:33:"Gets a registered object instance";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:29:"The name of the object to get";}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:60:"Returns an instance to the object and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:16:"getConfiguration";s:8:"docblock";a:2:{s:11:"description";s:28:"Gets the configuration array";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:5:"array";i:1;s:59:"Returns the configuration array if defined, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:7:"globals";s:8:"docblock";a:2:{s:11:"description";s:25:"Sets or gets a new global";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:31:"The name of the variable to set";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:83:"A value, this can be of any type, this is only used if adding or editing a variable";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:107:"Returns the value of variable on both set and get, and boolean false if trying to get an undefined variable";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:13;a:3:{s:6:"method";s:8:"symtable";s:8:"docblock";a:2:{s:11:"description";s:42:"Sets or gets a new value in a symbol table";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:50:"The name of the symbol table to read from/write to";}i:1;a:2:{i:0;s:6:"string";i:1;s:31:"The name of the variable to set";}}i:1;a:2:{i:0;s:5:"mixed";i:1;s:83:"A value, this can be of any type, this is only used if adding or editing a variable";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:107:"Returns the value of variable on both set and get, and boolean false if trying to get an undefined variable";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:64:"Registry class, this acts as a mixed singleton/registry
object.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:27:"library/Tuxxedo/Session.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{s:15:"\Tuxxedo\Design";s:0:"";}s:7:"classes";a:1:{s:16:"\Tuxxedo\Session";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:3:{i:0;a:3:{s:8:"property";s:7:"started";s:8:"docblock";a:2:{s:11:"description";s:35:"Whether a session is started or not";s:4:"tags";a:1:{s:3:"var";s:7:"boolean";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:2:"id";s:8:"docblock";a:2:{s:11:"description";s:14:"The session id";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:7:"options";s:8:"docblock";a:2:{s:11:"description";s:46:"The session options, such as prefix, path etc.";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:7:"methods";a:10:{i:0;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:5:"array";i:1;s:23:"The configuration array";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:15:"Object instance";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:3:"get";s:8:"docblock";a:2:{s:11:"description";s:23:"Gets a session variable";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:13:"Variable name";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:62:"Whether to include the session prefix or not, defaults to true";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:65:"Returns the session variable value on success, or null on failure";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:3:"set";s:8:"docblock";a:2:{s:11:"description";s:23:"Sets a session variable";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:13:"Variable name";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:14:"Variable value";}}i:1;a:2:{i:0;s:7:"boolean";i:1;s:62:"Whether to include the session prefix or not, defaults to true";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:5:"start";s:8:"docblock";a:2:{s:11:"description";s:16:"Starts a session";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:9:"terminate";s:8:"docblock";a:2:{s:11:"description";s:20:"Terminates a session";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:10:"regenerate";s:8:"docblock";a:2:{s:11:"description";s:144:"Regenerates a new session ID, note that API's that utilizes the
session ID must be manually notified of this update to not cause
data mismatch";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"boolean";i:1;s:43:"Whether or not to keep the old session data";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:12:"offsetExists";s:8:"docblock";a:2:{s:11:"description";s:46:"Checks whether a session variable is available";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"scalar";i:1;s:33:"The information row name to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:58:"Returns true if the information is stored, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:9:"offsetGet";s:8:"docblock";a:2:{s:11:"description";s:36:"Gets a value from a session variable";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"scalar";i:1;s:31:"The information row name to get";}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:65:"Returns the information value, and NULL if the value wasn't found";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:9:"offsetSet";s:8:"docblock";a:2:{s:11:"description";s:27:"Sets a new session variable";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"scalar";i:1;s:31:"The information row name to set";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:33:"The new/update value for this row";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:11:"offsetUnset";s:8:"docblock";a:2:{s:11:"description";s:26:"Deletes a session variable";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"scalar";i:1;s:34:"The information row name to delete";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:26:"\Tuxxedo\Design\InfoAccess";s:10:"implements";a:1:{i:0;s:25:"\Tuxxedo\Design\Invokable";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:25:"library/Tuxxedo/Style.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:15:"\Tuxxedo\Design";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";s:17:"\Tuxxedo\Template";s:0:"";}s:7:"classes";a:1:{s:14:"\Tuxxedo\Style";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Registry";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:9:"templates";s:8:"docblock";a:2:{s:11:"description";s:34:"Holds the current loaded templates";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:7:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:29:"Constructs a new style object";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:21:"The style data to use";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"The Registry reference";}i:1;a:2:{i:0;s:5:"array";i:1;s:23:"The configuration array";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:15:"Object instance";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:72:"Throws a basic exception if an invalid (or not cached) style id was used";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:78:"Caches a template, trying to cache an already loaded
template will recache it";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:27:"A list of templates to load";}i:1;a:2:{i:0;s:5:"array";i:1;s:142:"An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:39:"Returns true on success otherwise false";}s:6:"throws";a:2:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:44:"Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:8:"isLoaded";s:8:"docblock";a:2:{s:11:"description";s:30:"Checks if a template is loaded";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:24:"The name of the template";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:55:"Returns true if the template is loaded, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:5:"fetch";s:8:"docblock";a:2:{s:11:"description";s:25:"Fetches a cached template";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:33:"The name of the template to fetch";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:76:"Returns the compiled template code for execution, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:8:"template";s:8:"docblock";a:2:{s:11:"description";s:62:"Fetches a catched template and returns it as a template object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:33:"The name of the template to fetch";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:65:"Whether to activate the layout mode option of the template object";}}s:6:"return";a:2:{i:0;s:17:"\Tuxxedo\Template";i:1;s:49:"Returns a template object containing the template";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:6:"unload";s:8:"docblock";a:2:{s:11:"description";s:38:"Unloads a template from current memory";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:12:"string|array";i:1;s:52:"The name of the template(s) to remove from the cache";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:42:"Returns true on success and false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:26:"\Tuxxedo\Design\InfoAccess";s:10:"implements";a:1:{i:0;s:25:"\Tuxxedo\Design\Invokable";}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:33:"library/Tuxxedo/Style/Storage.php";a:6:{s:10:"namespaces";a:1:{s:14:"\Tuxxedo\Style";a:2:{s:8:"docblock";a:2:{s:11:"description";s:198:"Style namespace, this contains all style related routines such as storage
of templates within handlers and all loading functions. Extended template
routines are in the \Tuxxedo\Template namespace.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";s:14:"\Tuxxedo\Style";s:0:"";}s:7:"classes";a:1:{s:22:"\Tuxxedo\Style\Storage";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:4:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Registry";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:5:"style";s:8:"docblock";a:2:{s:11:"description";s:42:"The style that this handler is assigned to";s:4:"tags";a:1:{s:3:"var";s:14:"\Tuxxedo\Style";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:9:"templates";s:8:"docblock";a:2:{s:11:"description";s:33:"Reference to the template storage";s:4:"tags";a:1:{s:3:"var";s:6:"object";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:14:"loaded_engines";s:8:"docblock";a:2:{s:11:"description";s:28:"List of loaded style engines";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:31:"Constructs a new storage engine";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:28:"The Tuxxedo object reference";}i:1;a:2:{i:0;s:14:"\Tuxxedo\Style";i:1;s:29:"Reference to the style object";}}i:1;a:2:{i:0;s:6:"object";i:1;s:44:"Object reference to the templates data table";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:1;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:78:"Caches a template, trying to cache an already loaded
template will recache it";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:27:"A list of templates to load";}i:1;a:2:{i:0;s:5:"array";i:1;s:142:"An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:39:"Returns true on success otherwise false";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:44:"Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:1;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:7:"factory";s:8:"docblock";a:2:{s:11:"description";s:57:"Factory method for creating a new storage engine instance";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:28:"The Tuxxedo object reference";}i:1;a:2:{i:0;s:14:"\Tuxxedo\Style";i:1;s:29:"Reference to the style object";}}i:1;a:2:{i:0;s:6:"string";i:1;s:33:"The storage engine to instanciate";}}i:1;a:2:{i:0;s:6:"object";i:1;s:40:"Reference to the template storage object";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:47:"Returns a style storage engine object reference";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:57:"Throws a basic exception on invalid style storage engines";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:14:"\Tuxxedo\Style";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:38:"Interface for template storage engines";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:42:"library/Tuxxedo/Style/Storage/Database.php";a:6:{s:10:"namespaces";a:1:{s:22:"\Tuxxedo\Style\Storage";a:2:{s:8:"docblock";a:2:{s:11:"description";s:146:"Style storage namespace, this is for handlers that can load templates via
different backends such as file system or database. All must extend the";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";s:14:"\Tuxxedo\Style";s:0:"";}s:7:"classes";a:1:{s:31:"\Tuxxedo\Style\Storage\Database";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:31:"Constructs a new storage engine";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:28:"The Tuxxedo object reference";}i:1;a:2:{i:0;s:14:"\Tuxxedo\Style";i:1;s:29:"Reference to the style object";}}i:1;a:2:{i:0;s:6:"object";i:1;s:44:"Object reference to the templates data table";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:78:"Caches a template, trying to cache an already loaded
template will recache it";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:27:"A list of templates to load";}i:1;a:2:{i:0;s:5:"array";i:1;s:142:"An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";}}i:1;a:2:{i:0;s:5:"array";i:1;s:92:"An array passed by reference, this contains all the elements that where loaded if referenced";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:39:"Returns true on success otherwise false";}s:6:"throws";a:2:{i:0;s:22:"\Tuxxedo\Exception\SQL";i:1;s:44:"Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:22:"\Tuxxedo\Style\Storage";s:7:"extends";s:22:"\Tuxxedo\Style\Storage";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:49:"Style storage engine for database based templates";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:44:"library/Tuxxedo/Style/Storage/Filesystem.php";a:6:{s:10:"namespaces";a:1:{s:22:"\Tuxxedo\Style\Storage";a:2:{s:8:"docblock";a:2:{s:11:"description";s:146:"Style storage namespace, this is for handlers that can load templates via
different backends such as file system or database. All must extend the";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";s:14:"\Tuxxedo\Style";s:0:"";}s:7:"classes";a:1:{s:33:"\Tuxxedo\Style\Storage\FileSystem";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:4:"path";s:8:"docblock";a:2:{s:11:"description";s:48:"Directory where the compiled templates are saved";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:31:"Constructs a new storage engine";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:7:"Tuxxedo";i:1;s:28:"The Tuxxedo object reference";}i:1;a:2:{i:0;s:13:"Tuxxedo\Style";i:1;s:29:"Reference to the style object";}}i:1;a:2:{i:0;s:6:"object";i:1;s:44:"Object reference to the templates data table";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:78:"Caches a template, trying to cache an already loaded
template will recache it";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:27:"A list of templates to load";}i:1;a:2:{i:0;s:5:"array";i:1;s:142:"An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";}}i:1;a:2:{i:0;s:5:"array";i:1;s:92:"An array passed by reference, this contains all the elements that where loaded if referenced";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:39:"Returns true on success otherwise false";}s:6:"throws";a:2:{i:0;s:21:"Tuxxedo\Exception\SQL";i:1;s:44:"Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:22:"\Tuxxedo\Style\Storage";s:7:"extends";s:22:"\Tuxxedo\Style\Storage";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:52:"Style storage engine for file system based templates";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:28:"library/Tuxxedo/Template.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{s:15:"\Tuxxedo\Design";s:0:"";s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";}s:7:"classes";a:1:{s:17:"\Tuxxedo\Template";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:6:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Registry";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:4:"name";s:8:"docblock";a:2:{s:11:"description";s:32:"The name of the template to load";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:6:"layout";s:8:"docblock";a:2:{s:11:"description";s:15:"The layout mode";s:4:"tags";a:1:{s:3:"var";s:7:"boolean";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:6:"buffer";s:8:"docblock";a:2:{s:11:"description";s:15:"Template buffer";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:9:"variables";s:8:"docblock";a:2:{s:11:"description";s:38:"The variables used within the template";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:7:"globals";s:8:"docblock";a:2:{s:11:"description";s:37:"Holds the globally declared variables";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:7:"methods";a:8:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:38:"Constructor, constructs a new template";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:32:"The name of the template to load";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:53:"Set to true to activate layout mode, and false to not";}}i:1;a:2:{i:0;s:5:"array";i:1;s:24:"Default variables to set";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"setLayout";s:8:"docblock";a:2:{s:11:"description";s:38:"Whether to set this as a layout or not";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"boolean";i:1;s:53:"Set to true to activate layout mode, and false to not";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:9:"globalSet";s:8:"docblock";a:2:{s:11:"description";s:22:"Sets a global variable";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:24:"The name of the variable";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:25:"The value of the variable";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:9:"globalGet";s:8:"docblock";a:2:{s:11:"description";s:22:"Gets a global variable";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:24:"The name of the variable";}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:61:"Returns the variable value, and NULL on non existant variable";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:12:"globalExists";s:8:"docblock";a:2:{s:11:"description";s:34:"Checks if a global variable exists";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:24:"The name of the variable";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:51:"Returns true if the variable exists otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:11:"globalUnset";s:8:"docblock";a:2:{s:11:"description";s:24:"Unsets a global variable";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:24:"The name of the variable";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:5:"parse";s:8:"docblock";a:2:{s:11:"description";s:17:"Parses a template";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:27:"Returns the parsed template";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:10:"__toString";s:8:"docblock";a:2:{s:11:"description";s:18:"Outputs a template";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:42:"Returns the parsed template for outputting";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:26:"\Tuxxedo\Design\InfoAccess";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:131:"Template class, this class serves as an object oriented way of creating
templates, mainly designed for use with the MVC View class";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:3:"MVC";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:37:"library/Tuxxedo/Template/Compiler.php";a:6:{s:10:"namespaces";a:1:{s:17:"\Tuxxedo\Template";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{s:18:"\Tuxxedo\Exception";s:0:"";s:32:"\Tuxxedo\Template\Compiler\Dummy";s:0:"";}s:7:"classes";a:1:{s:26:"\Tuxxedo\Template\Compiler";a:8:{s:9:"constants";a:6:{i:0;a:4:{s:8:"constant";s:26:"OPT_NO_FUNCTION_CALL_LIMIT";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:45:"Compiler option - Disable function call check";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:23:"OPT_NO_CLASS_CALL_LIMIT";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:42:"Compiler option - Disable class call check";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:25:"OPT_NO_CLOSURE_CALL_LIMIT";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:44:"Compiler option - Disable closure call check";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:25:"OPT_NO_INTERPOLATED_CALLS";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:54:"Compiler option - Disable interpolated call protection";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:16:"OPT_VERBOSE_TEST";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:61:"Compiler option - Disable silent operator when running test()";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"constant";s:17:"OPT_PARSE_IF_TAGS";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:33:"Compiler option - parse <if> tags";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:8:{i:0;a:3:{s:8:"property";s:6:"source";s:8:"docblock";a:2:{s:11:"description";s:30:"The uncompiled raw source code";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:15:"compiled_source";s:8:"docblock";a:2:{s:11:"description";s:24:"The compiled source code";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:15:"error_reporting";s:8:"docblock";a:2:{s:11:"description";s:22:"Error reporting buffer";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:10:"stack_data";s:8:"docblock";a:2:{s:11:"description";s:31:"The current compiler stack data";s:4:"tags";a:1:{s:3:"var";s:9:"\stdClass";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:7:"options";s:8:"docblock";a:2:{s:11:"description";s:24:"Compiler options bitmask";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:9:"functions";s:8:"docblock";a:2:{s:11:"description";s:170:"The default functions to allow in expressions, note
that this also contains some predefined special
keywords for expressions, these must be lowercase if
manually added";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:8:"property";s:7:"classes";s:8:"docblock";a:2:{s:11:"description";s:51:"The default class instances to allow in expressions";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:8:"property";s:8:"closures";s:8:"docblock";a:2:{s:11:"description";s:44:"The default closures to allow in expressions";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:12:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:29:"Template compiler constructor";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:96:"The compiler options, this is used for recursive code by the compiler, or by setting the default";}i:1;a:2:{i:0;s:7:"integer";i:1;s:70:"The current compiler stack data, this is only used for recursive calls";}}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"setOptions";s:8:"docblock";a:2:{s:11:"description";s:25:"Set a new compiler option";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:24:"The new compiler bitmask";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:71:"Whether to add it the bitmask to the current bitmask or reset it before";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"getOptions";s:8:"docblock";a:2:{s:11:"description";s:33:"Gets the current compiler options";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:28:"The current compiler options";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:13:"allowFunction";s:8:"docblock";a:2:{s:11:"description";s:47:"Allows a new function to be used in expressions";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:111:"A function name to be allowed in expressions, notice that this have to be an existing function and not a method";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:86:"Returns true if success, and false if the function doesn't exists or already is loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:10:"allowClass";s:8:"docblock";a:2:{s:11:"description";s:53:"Allows a new class instance to be used in expressions";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:127:"A class instance name to be allowed in expressions, notice that this is the instance name of the variable, not the class itself";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:55:"Returns true if success, and false if already is loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:12:"allowClosure";s:8:"docblock";a:2:{s:11:"description";s:35:"Allows a closure within expressions";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:65:"The closure expression name (to allow $closure, supply 'closure')";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:55:"Returns true if success, and false if already is loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:8:"symtable";s:8:"docblock";a:2:{s:11:"description";s:30:"Updates a internl symbol table";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:26:"The symbol table to update";}i:1;a:2:{i:0;s:6:"string";i:1;s:22:"The symbol to be added";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:25:"The symbol table bitfield";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:63:"Returns true if success, and false if the symbol already exists";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:7:"compile";s:8:"docblock";a:2:{s:11:"description";s:26:"Compiles a template source";s:4:"tags";a:2:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}s:6:"throws";a:2:{i:0;s:35:"\Tuxxedo\Exception\TemplateCompiler";i:1;s:0:"";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:17:"getCompiledSource";s:8:"docblock";a:2:{s:11:"description";s:24:"Gets the compiled source";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:83:"Returns the compiled source from the last successful compilation and false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:9:"setSource";s:8:"docblock";a:2:{s:11:"description";s:33:"Sets a new uncompiled source code";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:30:"The new uncompiled source code";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:9:"getSource";s:8:"docblock";a:2:{s:11:"description";s:31:"Gets the uncompiled source code";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:53:"Returns the uncompiled source code and false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:4:"test";s:8:"docblock";a:2:{s:11:"description";s:42:"Tests a compiled template for parse errors";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:96:"Returns a boolean value depending on the test, NULL is returned if the source isn't compiled yet";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:17:"\Tuxxedo\Template";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:240:"Template compiler, this compiles raw template source
code into php executable code with support for
expressions. It supports recursive expressions with
else support.

This class is inspired by the vBulletin template
compilation model.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:43:"library/Tuxxedo/Template/Compiler/Dummy.php";a:6:{s:10:"namespaces";a:1:{s:26:"\Tuxxedo\Template\Compiler";a:2:{s:8:"docblock";a:2:{s:11:"description";s:141:"Template compiler namespace, this contains all components that the
compiler utilizes when compiling or testing the generated template
code.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:32:"\Tuxxedo\Template\Compiler\Dummy";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:6:"__call";s:8:"docblock";a:2:{s:11:"description";s:64:"Dummy method to emulate method overloading
to make testing pass";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:23:"The method name to call";}i:1;a:2:{i:0;s:5:"array";i:1;s:35:"The arguments to pass to the method";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:19:"Always returns true";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:8:"__invoke";s:8:"docblock";a:2:{s:11:"description";s:75:"Dummy method to emulate method overloading
to make testing pass (closures)";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:35:"The arguments to pass to the method";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:19:"Always returns true";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:26:"\Tuxxedo\Template\Compiler";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:127:"Dummy compiler class, this is used for emulation within the
test method to make sure object oriented features may be compiled.";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:24:"library/Tuxxedo/User.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{s:20:"\Tuxxedo\Datamanager";s:0:"";s:15:"\Tuxxedo\Design";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";s:16:"\Tuxxedo\Session";s:0:"";}s:7:"classes";a:1:{s:13:"\Tuxxedo\User";a:8:{s:9:"constants";a:3:{i:0;a:4:{s:8:"constant";s:11:"OPT_SESSION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:62:"User info constant, also get session information if
available";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:9:"OPT_CACHE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:127:"User info constant, cache the user information within
the class to save a query if trying to query the same
user again  twice";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:16:"OPT_CURRENT_ONLY";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:115:"User info constant, return a reference to the current
stored information, no matter if a user is logged on or
not";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:6:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";s:17:"\Tuxxedo\Registry";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:8:"userinfo";s:8:"docblock";a:2:{s:11:"description";s:16:"User information";s:4:"tags";a:1:{s:3:"var";s:8:"stdClass";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:13:"usergroupinfo";s:8:"docblock";a:2:{s:11:"description";s:21:"Usergroup information";s:4:"tags";a:1:{s:3:"var";s:8:"stdClass";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:7:"session";s:8:"docblock";a:2:{s:11:"description";s:12:"User session";s:4:"tags";a:1:{s:3:"var";s:16:"\Tuxxedo\Session";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:9:"sessiondm";s:8:"docblock";a:2:{s:11:"description";s:24:"User session datamanager";s:4:"tags";a:1:{s:3:"var";s:36:"\Tuxxedo\Datamanager\Adapter\Session";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:73:"Cached userinfo, for calls to get user information
about a specific user";s:4:"tags";a:1:{s:3:"var";s:5:"array";}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:16:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:45:"Constructor, instanciates a new user session.";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:7:"boolean";i:1;s:52:"Whether to auto detect if a user is logged in or not";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"__destruct";s:8:"docblock";a:2:{s:11:"description";s:45:"Destructor, executes the cleanup queries etc.";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:12:"getCSRFToken";s:8:"docblock";a:2:{s:11:"description";s:28:"Get the specified CSRF token";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:76:"Returns a token string thats hexadecimal, and boolean false if its undefined";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:15:"getNewCSRFToken";s:8:"docblock";a:2:{s:11:"description";s:151:"Creates a new CSRF token, note that this regenerates the session id and therefore
the relevant APIs must update the session id if its kept in storage.";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:6:"string";i:1;s:27:"Returns the new token value";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:5:"login";s:8:"docblock";a:2:{s:11:"description";s:252:"Authenticates a user. If a user is currently logged in, then it
will be logged out and the session id will be regenerated.

A user can be logged in by a unique identifier, such as:

To attempt a login, the constructor must be instanciated with the";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:15:"User identifier";}i:1;a:2:{i:0;s:6:"string";i:1;s:28:"User's password (raw format)";}}i:1;a:2:{i:0;s:6:"string";i:1;s:50:"The identifier field to check and validate against";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:68:"Returns true if the user was logged in with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:6:"logout";s:8:"docblock";a:2:{s:11:"description";s:34:"Log the current logged in user out";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"boolean";i:1;s:51:"Whether to terminate and restart the session or not";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:11:"getUserInfo";s:8:"docblock";a:2:{s:11:"description";s:37:"Fetch user data about a specific user";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:19:"The user identifier";}i:1;a:2:{i:0;s:6:"string";i:1;s:69:"The user identifier field, this defaults to 'id' to lookup by user id";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:77:"Additional options, this uses the \Tuxxedo\User::OPT_* constants as a bitmask";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:89:"Returns a user data object with all user information if a user was found, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:16:"getUserGroupInfo";s:8:"docblock";a:2:{s:11:"description";s:105:"Get usergroup information about the current user's group
or a customed defined based on the usergroup id";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"integer";i:1;s:93:"The usergroup id to check, if NULL is passed then the current logged in usergroup is returned";}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:103:"Returns a standard object with the relevant usergroup information if found, otherwise false is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:10:"isMemberOf";s:8:"docblock";a:2:{s:11:"description";s:105:"Checks whether the user id a member of a
specific usergroup. This only checks for the
primary usergroup";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"integer";i:1;s:25:"The usergroup id to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:70:"Returns true if the user is a member of that usergroup otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:10:"isLoggedIn";s:8:"docblock";a:2:{s:11:"description";s:52:"Checks whether this session have a user logon or not";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:52:"Returns true if a user is logged on, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:9:"isGranted";s:8:"docblock";a:2:{s:11:"description";s:154:"Checks whether the user's permissions can access a
certain feature. Note that this checks for the user's
permissions only, not per usergroup permissions";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:23:"The permission to check";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:66:"Whether to check if the user's group have permission as a fallback";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:59:"Returns true if the user is granted access, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:14:"isGroupGranted";s:8:"docblock";a:2:{s:11:"description";s:170:"Checks whether the user's usergroup permissions can
access a certain feature. Note that this checks for
the user's usergroup permissions only, not per
user permissions";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"integer";i:1;s:23:"The permission to check";}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:64:"Returns true if the usergroup is granted access, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:15:"isValidPassword";s:8:"docblock";a:2:{s:11:"description";s:48:"Checks if a password matches with its hash value";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:16:"The raw password";}i:1;a:2:{i:0;s:6:"string";i:1;s:41:"The user salt that generated the password";}}i:1;a:2:{i:0;s:6:"string";i:1;s:19:"The hashed password";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:53:"Returns true if the password matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:13;a:3:{s:6:"method";s:15:"getPasswordHash";s:8:"docblock";a:2:{s:11:"description";s:30:"Hashes a password using a salt";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:23:"The password to encrypt";}i:1;a:2:{i:0;s:6:"string";i:1;s:33:"The unique salt for this password";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"Returns the computed password";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:14;a:3:{s:6:"method";s:15:"getPasswordSalt";s:8:"docblock";a:2:{s:11:"description";s:48:"Generates a salt for using with password hashing";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:7:"integer";i:1;s:60:"The number of bytes the salt should be, must be 8 or greater";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:"Returns the computed salt";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:15;a:3:{s:6:"method";s:22:"setPermissionConstants";s:8:"docblock";a:2:{s:11:"description";s:55:"Defines global constant values of datastore permissions";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:26:"\Tuxxedo\Design\InfoAccess";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:102:"User session class, this class manages the current user
session information and permission bitfields.";s:4:"tags";a:3:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:27:"library/Tuxxedo/Version.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:16:"\Tuxxedo\Version";a:8:{s:9:"constants";a:11:{i:0;a:4:{s:8:"constant";s:6:"SIMPLE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:128:"Engine simple version, this contains the current
release in the form of:

major.minor.release

For example, 1.0, 1.0.1 ect.";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:5:"MAJOR";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:20:"Major version number";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:5:"MINOR";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:20:"Minor version number";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:7:"RELEASE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:22:"Release version number";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:2:"ID";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:183:"Engine version ID, this contains the version id in the form
of:

id = (major_version * 10000) + (minor_version * 100) + release_version

Examples of the version id string can be:";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"constant";s:7:"PREVIEW";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:120:"Development preview mode, this is set to true if this is a development
release, like a Alpha, Beta or Release Candidate";s:4:"tags";a:1:{s:3:"var";s:7:"boolean";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:6;a:4:{s:8:"constant";s:12:"PREVIEW_TYPE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:72:"Development preview type, this is set to the preview type, like 'Alpha',";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:7;a:4:{s:8:"constant";s:14:"PREVIEW_NUMBER";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:138:"Development preview number, this is set to the preview number for the
current preview type. This is only set if this is a preview release";s:4:"tags";a:1:{s:3:"var";s:7:"integer";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:8;a:4:{s:8:"constant";s:8:"CODENAME";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:230:"Development codename, this value is always the same for each
pre-release of a new branch and only changes upon major or minor
version changes. Each release codename is based on influence that
caused a new version to branch out.";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:9;a:4:{s:8:"constant";s:12:"VCS_REVISION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:46:"Current version control system revision number";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:10;a:4:{s:8:"constant";s:4:"FULL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:31:"Ross Masters <ross@tuxxedo.net>";}s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:178:"Engine version string, this is the full version string, which
includes the pre-release name, version and the version number
of the upcoming version if pre-release. For example:";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:0:{}s:7:"methods";a:0:{}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:53:"Versioning class, contains all of the Core versioning";s:4:"tags";a:4:{s:6:"author";s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";s:7:"version";s:3:"1.0";s:7:"package";s:6:"Engine";s:10:"subpackage";s:7:"Library";}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:29:"library/Tuxxedo/functions.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:3:{s:18:"\Tuxxedo\Exception";s:0:"";s:17:"\Tuxxedo\Registry";s:0:"";s:16:"\Tuxxedo\Version";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:15:{i:0;a:4:{s:8:"function";s:25:"tuxxedo_exception_handler";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:155:"Exception handler, this terminates the script execution
if an exception is fatal and buffer non fatal exceptions
so they can be displayed on the template";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:10:"\Exception";i:1;s:23:"The exception to handle";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"function";s:21:"tuxxedo_error_handler";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:307:"Error handler, this handles general errors from php. If
the script should error non fatal errors such as warnings
or notices, it will add them to the error buffer and show
then on the main template output. Note that this function is
not designed to be called directly and should be called by
php itself";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:11:"Error level";}i:1;a:2:{i:0;s:6:"string";i:1;s:13:"Error message";}}i:1;a:2:{i:0;s:6:"string";i:1;s:9:"File path";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:11:"Line number";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}s:6:"throws";a:2:{i:0;s:24:"\Tuxxedo\Exception\Basic";i:1;s:45:"Throws a basic exception on fatal error types";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"function";s:15:"tuxxedo_handler";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:231:"Handler register

This function is a wrapper for registering handlers to various
functions, calling this function for registering handlers should
be registered using this function or some features may stop working
unexpectedly";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:85:"The handler to register, can be one of 'error', 'exception', 'shutdown' or 'autoload'";}i:1;a:2:{i:0;s:8:"callback";i:1;s:39:"The callback to register to the handler";}}s:6:"return";a:2:{i:0;s:8:"callback";i:1;s:98:"Returns a callback, if only the first parameter is set, may also return false on error in any case";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"function";s:17:"tuxxedo_doc_error";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:59:"Print a document error (startup) and halts script execution";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:50:"The message to show, this can also be an exception";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"function";s:18:"tuxxedo_doc_errorf";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:21:"Formattable doc error";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:77:"The error message, in a printf-alike formatted string or just a normal string";}i:1;a:2:{i:0;s:5:"mixed";i:1;s:35:"Optional argument #n for formatting";}}s:6:"return";a:2:{i:0;s:4:"Void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"function";s:17:"tuxxedo_trim_path";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:72:"Trims a file path to hide its path prior to the root
of the application";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:16:"The path to trim";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:69:"Should the path also be trimmed if debug mode is on? Defaults to true";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:16:"The trimmed path";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:6;a:4:{s:8:"function";s:24:"tuxxedo_shutdown_handler";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:16:"Shutdown handler";s:4:"tags";a:1:{s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:7;a:4:{s:8:"function";s:19:"tuxxedo_multi_error";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:35:"Handles multiple errors repeatingly";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:86:"A sprintf-like format, only applies for singular errors (if $show_all is set to false)";}i:1;a:2:{i:0;s:5:"array";i:1;s:38:"An array with elements to loop through";}}i:1;a:2:{i:0;s:6:"string";i:1;s:89:"A fully quantified exception name to throw, this should be able to handle multiple errors";}}i:1;a:2:{i:0;s:7:"boolean";i:1;s:36:"Whether to display all errors or not";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}s:6:"throws";a:2:{i:0;s:5:"mixed";i:1;s:54:"Throws an exception until the errors have been cleared";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:8;a:4:{s:8:"function";s:16:"tuxxedo_redirect";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:43:"Issues a redirect and terminates the script";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:49:"The message to show to the user while redirecting";}i:1;a:2:{i:0;s:6:"string";i:1;s:21:"The redirect location";}}i:1;a:2:{i:0;s:7:"integer";i:1;s:27:"Redirect timeout in seconds";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:9;a:4:{s:8:"function";s:23:"tuxxedo_header_redirect";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:62:"Issues a redirect using headers and then terminates the script";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:21:"The redirect location";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:10;a:4:{s:8:"function";s:13:"tuxxedo_error";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:86:"Prints an error message using the current loaded
theme and then terminates the script";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"The error message";}i:1;a:2:{i:0;s:7:"boolean";i:1;s:43:"Whether to show the 'Go back' button or not";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:11;a:4:{s:8:"function";s:18:"tuxxedo_error_list";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:178:"Prints an error message using the current loaded
theme with an list of failed conditions which
makes it suitable for multi exceptions, this
function also terminates the script";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:17:"The error message";}i:1;a:2:{i:0;s:5:"array";i:1;s:29:"The list of errors to display";}}i:1;a:2:{i:0;s:7:"boolean";i:1;s:43:"Whether to show the 'Go back' button or not";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:12;a:4:{s:8:"function";s:12:"tuxxedo_date";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:20:"Date format function";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:23:"The timestamp to format";}i:1;a:2:{i:0;s:6:"string";i:1;s:73:"Optional format to use, defaults to the format defined within the options";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:26:"Returns the formatted date";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:13;a:4:{s:8:"function";s:4:"page";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:30:"Generates code to print a page";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:26:"The template name to print";}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:20:"No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:14;a:4:{s:8:"function";s:10:"page_print";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:130:"Wrapper function for printing a page content
from a variable. This function is mainly for
views that have layout mode activated.";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:6:"string";i:1;s:30:"The template contents to print";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:43:"Returns a string for eval()'ing the content";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:35:"library/Tuxxedo/functions_debug.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:3:{i:0;a:4:{s:8:"function";s:23:"tuxxedo_debug_backtrace";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:145:"Backtrace handler

Generates a backtrace with extended information so theres
less to parse from the regular debug_backtrace() function
in PHP";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:10:"\Exception";i:1;s:97:"If the current trace is combined with an exception, then pass the exception to get a better trace";}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:78:"Returns an array with object as keys carrying information about each trace bit";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"function";s:22:"tuxxedo_debug_typedata";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:67:"Dumps type data for argument call lists within the debug backtraces";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"mixed";i:1;s:28:"Any type of variable to dump";}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:49:"Returns a formatted string with the variable data";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"function";s:29:"tuxxedo_debug_object_variants";s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:50:"Generates a list of method variants for comparison";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:5:"array";i:1;s:22:"The trace array to use";}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:46:"Returns an array with possible method variants";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:21:"library/bootstrap.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:2:{s:18:"\Tuxxedo\Bootstrap";s:0:"";s:17:"\Tuxxedo\Template";s:0:"";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:2:{s:11:"TUXXEDO_DIR";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:136:"Sets the path to where the root script is, if the
constant CWD is defined before including this file,
then it will be used as root dir";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:15:"TUXXEDO_LIBRARY";a:3:{s:9:"namespace";s:0:"";s:8:"docblock";a:2:{s:11:"description";s:21:"Sets the library path";s:4:"tags";a:1:{s:3:"var";s:6:"string";}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:25:"library/configuration.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}}