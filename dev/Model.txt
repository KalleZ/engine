Ideal ActiveRecord-style class for Tuxxedo_Model

1. Require the user to create a getMapper() method in their Model.
   a. By interface
   b. Throw an exception if not loaded
2. Add a __call method to allow for calling of the mapper methods in the model

At the very least the user must write an empty Mapper class
(named Model_Mapper_ModelName) with the property $table set. This will allow the
default methods to function (which will only be suitable where a model's
properties alias to fields in that table - if there are naming changes, or
properties that are not stored in that table, or any custom methods
("fetchByDate") then a custom mapper needs to be written (and should be anyway
really)).


Tuxxedo_Model
{
    public function __construct(Array $options) {
        $this->setOptions($options);
    }

    public function setOptions(Array $options);
    public function getOptions() {
        return get_class_vars(get_class($this));  
    }
    
    public function __get($name);
    public function __set($name, $value);
    
    private function get($name);
    private function set($name, $value);
    
    public function __call($method, $args) {
        $prefix = substr($method, 0, 3);
        $mapper = self::getMapper();
        
        if (prefix == "set" || $prefix == "get") {
            // call $this->get/$this->set
        } elseif (method_exists($mapper, $method)) {
            eval("$this->mapper->$method(" . implode(", " $args[0]) . ");");
            // Is there a way of doing this without eval?
        } else {
            throw new Tuxxedo_Basic_Exception("Invalid method called.");
        }
    }
    
    public static function getMapper() {
        // This exception will be thrown if the method is not overwritten
        throw new Tuxxedo_Basic_Exception("getMapper *must* be extended."); 
    }
}

Tuxxedo_Mapper
{
    protected $table;
    
    public function find($id) {
        $qry = $this->db->select()->from($this->table)->where(array("id" => $id))->limit(1);
        $res = $qry->execute()->fetch();
        
        $modelName = str_replace("Mapper_", "", __CLASS__);
        
        $model = new $modelName($res->current());
        return $model;
    }
    
    public function fetchAll() {
        $qry = $this->db->select()->from($this->table);
        $result = $qry->execute();
        
        $models = array();
        $modelName = str_replace("Mapper_", "", __CLASS__);
        
        for ($result->rewind(); $result->valid(); $result->next()) {
            $models[] = new $modelName($result->current());
        }
        
        return $models;
    }
    
    public function save(Tuxxedo_Model $model) {
        $values = $model->getOptions();
        unset($values["id"]);
        
        if ($model->id) {
            $qry = $this->db->update($this->table)->set($values)->where(array("id" => $model->id))->limit(1);
        } else {
            $qry = $this->db->insert($this->table)->values($values);
        }
        
        $qry->execute();
    }
}
