a:79:{s:9:"index.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:3:{i:0;s:17:"\Tuxxedo\MVC\View";i:1;s:8:"Template";i:2;s:16:"\Tuxxedo\Version";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:30:"dev/extra/bootstrap_simple.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:8:{s:11:"TUXXEDO_DIR";a:2:{s:8:"docblock";a:2:{s:11:"description";s:136:"Sets the path to where the root script is, if the
constant CWD is defined before including this file,
then it will be used as root dir";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:15:"TUXXEDO_LIBRARY";a:2:{s:8:"docblock";a:2:{s:11:"description";s:21:"Sets the library path";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:14:"TUXXEDO_PREFIX";a:2:{s:8:"docblock";a:2:{s:11:"description";s:34:"Set database table prefix constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:13:"TUXXEDO_DEBUG";a:2:{s:8:"docblock";a:2:{s:11:"description";s:27:"Set the debug mode constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:12:"TUXXEDO_SELF";a:2:{s:8:"docblock";a:2:{s:11:"description";s:175:"URL of the current page being executed, including its
query string, note that this constant is using the
raw data. It is up to the user of this constant to
proper filter it";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:17:"TUXXEDO_USERAGENT";a:2:{s:8:"docblock";a:2:{s:11:"description";s:143:"User agent string if any for the browsing user, note that
like the TUXXEDO_SELF constant, this have to be escaped if
used in database context";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:11:"TIMENOW_UTC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:25:"Set the UTC time constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:7:"TIMENOW";a:2:{s:8:"docblock";a:2:{s:11:"description";s:21:"Current time constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:27:"dev/scripts/api_analyze.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:1:{i:0;s:22:"\DevTools\Utilities\IO";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:7:{s:10:"ACC_PUBLIC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:33:"Access modifier constant - Public";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:13:"ACC_PROTECTED";a:2:{s:8:"docblock";a:2:{s:11:"description";s:36:"Access modifier constant - Protected";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:11:"ACC_PRIVATE";a:2:{s:8:"docblock";a:2:{s:11:"description";s:34:"Access modifier constant - Private";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:12:"ACC_ABSTRACT";a:2:{s:8:"docblock";a:2:{s:11:"description";s:35:"Access modifier constant - Abstract";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:9:"ACC_FINAL";a:2:{s:8:"docblock";a:2:{s:11:"description";s:32:"Access modifier constant - Final";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:10:"ACC_STATIC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:33:"Access modifier constant - Static";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:12:"ACC_DOCBLOCK";a:2:{s:8:"docblock";a:2:{s:11:"description";s:35:"Access modifier constant - Docblock";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:10:{i:0;a:4:{s:8:"function";s:7:"analyze";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:48:"Fetches all analyzable files into one huge array";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:34:"string				The path to analyze from";}s:6:"return";a:1:{i:0;s:89:"array				Returns an array with all the files that can be analyzed from the root directory";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"function";s:13:"dump_metadata";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:35:"Dumps metadata for printf arguments";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:30:"array				The meta data to dump";}s:6:"return";a:1:{i:0;s:37:"string				Returns a string for printf";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"function";s:23:"resolve_namespace_alias";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:51:"Resolves a class object to its full namespaced path";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:84:"string				The root namespace, from the namespace declaration in the top of each file";i:1;s:80:"array				Array of aliases to use for the class object when attempting to resolve";i:2;s:26:"string				The class object";}s:6:"return";a:1:{i:0;s:66:"string				Returns the resolved namespaced path to the class object";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"function";s:18:"lexical_next_index";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:34:"Finds the next lexical token index";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:30:"array				The tokens copy array";i:1;s:32:"integer				The token start index";i:2;s:34:"integer|string			The token to find";}s:6:"return";a:1:{i:0;s:68:"integer				Returns the token index found token, and false on failure";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"function";s:12:"lexical_scan";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:64:"Scans from the current pointer until the first match token match";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:30:"array				The tokens copy array";i:1;s:32:"integer				The token start index";i:2;s:34:"integer|string			The token to find";}s:6:"return";a:1:{i:0;s:61:"string				Returns the token content if found, otherwise false";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"function";s:19:"lexical_scan_concat";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:51:"Scans and concates the matched tokens into a string";s:4:"tags";a:2:{s:5:"param";a:4:{i:0;s:30:"array				The tokens copy array";i:1;s:32:"integer				The token start index";i:2;s:69:"integer|string			The stop token, when this is hit the scanner returns";i:3;s:51:"boolean				Whether to skip whitespace tokens or not";}s:6:"return";a:1:{i:0;s:100:"string				Returns the concated string with the tokens between the current pointer and the stop token";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:6;a:4:{s:8:"function";s:22:"lexical_scan_separator";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:72:"Scans a statement and breaks it into an array based on a separator token";s:4:"tags";a:2:{s:5:"param";a:5:{i:0;s:30:"array				The tokens copy array";i:1;s:32:"integer				The token start index";i:2;s:36:"integer|string			The separator token";i:3;s:49:"integer|string			The stop token, end of statement";i:4;s:51:"boolean				Whether to skip whitespace tokens or not";}s:6:"return";a:1:{i:0;s:98:"array				Returns an array with each part as a new value, like explode() and empty array on failure";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:7;a:4:{s:8:"function";s:31:"lexical_scan_extends_implements";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:62:"Lexical scan extend and implements tokens to find their childs";s:4:"tags";a:2:{s:5:"param";a:4:{i:0;s:30:"array				The tokens copy array";i:1;s:32:"integer				The token start index";i:2;s:32:"integer|string			The start token";i:3;s:88:"array				Stop tokens, if any of the tokens in this array is hit, the scanner will return";}s:6:"return";a:1:{i:0;s:54:"array				Returns an array with the matched child parts";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:8;a:4:{s:8:"function";s:16:"lexical_docblock";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:24:"Lexical docblock scanner";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:30:"array				The tokens copy array";i:1;s:32:"integer				The token start index";i:2;s:24:"array				The stop tokens";}s:6:"return";a:1:{i:0;s:92:"array				Returns an array with structured docblock information on success and false on error";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:9;a:4:{s:8:"function";s:22:"lexical_docblock_parse";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:23:"Lexical docblock parser";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:41:"string				The docblock tag value to parse";}s:6:"return";a:1:{i:0;s:82:"array				Returns a structured array with the docblock variables and false on error";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:32:"dev/scripts/compile_devtools.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:3:{i:0;s:22:"\DevTools\Utilities\IO";i:1;s:18:"\Tuxxedo\Exception";i:2;s:26:"\Tuxxedo\Template\Compiler";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:12:"TEMPLATE_DIR";a:2:{s:8:"docblock";a:2:{s:11:"description";s:23:"Template directory path";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:30:"dev/scripts/sync_templates.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:1:{i:0;s:22:"\DevTools\Utilities\IO";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:12:"TEMPLATE_DIR";a:2:{s:8:"docblock";a:2:{s:11:"description";s:23:"Template directory path";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:34:"dev/scripts/includes/bootstrap.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:6:{s:13:"TUXXEDO_DEBUG";a:2:{s:8:"docblock";a:2:{s:11:"description";s:27:"Set the debug mode constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:11:"TUXXEDO_DIR";a:2:{s:8:"docblock";a:2:{s:11:"description";s:136:"Sets the path to where the root script is, if the
constant CWD is defined before including this file,
then it will be used as root dir";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:15:"TUXXEDO_LIBRARY";a:2:{s:8:"docblock";a:2:{s:11:"description";s:21:"Sets the library path";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:7:"TIMENOW";a:2:{s:8:"docblock";a:2:{s:11:"description";s:21:"Current time constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:11:"TIMENOW_UTC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:25:"Set the UTC time constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:14:"TUXXEDO_PREFIX";a:2:{s:8:"docblock";a:2:{s:11:"description";s:34:"Set database table prefix constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:23:"dev/tools/datastore.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:2:{s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:19:"dev/tools/index.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:2:{s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:21:"dev/tools/options.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:2:{s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:22:"dev/tools/sessions.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:1:{i:0;s:13:"\Tuxxedo\User";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:2:{s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:20:"dev/tools/styles.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:3:{i:0;s:20:"\Tuxxedo\Datamanager";i:1;s:18:"\Tuxxedo\Exception";i:2;s:14:"\Tuxxedo\Input";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:2:{s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:19:"dev/tools/tools.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:2:{i:0;s:14:"\DevTools\Test";i:1;s:26:"\Tuxxedo\Template\Compiler";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:1:{s:11:"SCRIPT_NAME";a:2:{s:8:"docblock";a:2:{s:11:"description";s:15:"Set script name";s:4:"tags";a:0:{}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:32:"dev/tools/includes/bootstrap.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:4:{i:0;s:15:"\DevTools\Style";i:1;s:18:"\Tuxxedo\Exception";i:2;s:17:"\Tuxxedo\Registry";i:3;s:16:"\Tuxxedo\Version";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:8:{s:13:"TUXXEDO_DEBUG";a:2:{s:8:"docblock";a:2:{s:11:"description";s:27:"Set the debug mode constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:11:"TUXXEDO_DIR";a:2:{s:8:"docblock";a:2:{s:11:"description";s:136:"Sets the path to where the root script is, if the
constant CWD is defined before including this file,
then it will be used as root dir";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:15:"TUXXEDO_LIBRARY";a:2:{s:8:"docblock";a:2:{s:11:"description";s:21:"Sets the library path";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:12:"TUXXEDO_SELF";a:2:{s:8:"docblock";a:2:{s:11:"description";s:175:"URL of the current page being executed, including its
query string, note that this constant is using the
raw data. It is up to the user of this constant to
proper filter it";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:17:"TUXXEDO_USERAGENT";a:2:{s:8:"docblock";a:2:{s:11:"description";s:143:"User agent string if any for the browsing user, note that
like the TUXXEDO_SELF constant, this have to be escaped if
used in database context";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:14:"TUXXEDO_PREFIX";a:2:{s:8:"docblock";a:2:{s:11:"description";s:34:"Set database table prefix constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:7:"TIMENOW";a:2:{s:8:"docblock";a:2:{s:11:"description";s:21:"Current time constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:11:"TIMENOW_UTC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:25:"Set the UTC time constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:21:"library/bootstrap.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:3:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:17:"\Tuxxedo\Template";i:2;s:13:"\Tuxxedo\User";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:8:{s:11:"TUXXEDO_DIR";a:2:{s:8:"docblock";a:2:{s:11:"description";s:136:"Sets the path to where the root script is, if the
constant CWD is defined before including this file,
then it will be used as root dir";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:15:"TUXXEDO_LIBRARY";a:2:{s:8:"docblock";a:2:{s:11:"description";s:21:"Sets the library path";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:14:"TUXXEDO_PREFIX";a:2:{s:8:"docblock";a:2:{s:11:"description";s:34:"Set database table prefix constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:13:"TUXXEDO_DEBUG";a:2:{s:8:"docblock";a:2:{s:11:"description";s:27:"Set the debug mode constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:12:"TUXXEDO_SELF";a:2:{s:8:"docblock";a:2:{s:11:"description";s:175:"URL of the current page being executed, including its
query string, note that this constant is using the
raw data. It is up to the user of this constant to
proper filter it";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:17:"TUXXEDO_USERAGENT";a:2:{s:8:"docblock";a:2:{s:11:"description";s:143:"User agent string if any for the browsing user, note that
like the TUXXEDO_SELF constant, this have to be escaped if
used in database context";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:11:"TIMENOW_UTC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:21:"Current time constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:7:"TIMENOW";a:2:{s:8:"docblock";a:2:{s:11:"description";s:21:"Current time constant";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:9:"functions";a:0:{}}s:25:"library/configuration.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:30:"library/DevTools/functions.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:2:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:2:{i:0;a:4:{s:8:"function";s:14:"recursive_glob";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:25:"A recursive glob function";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:39:"string			The glob expression to execute";}s:6:"return";a:1:{i:0;s:75:"array			Returns an array containing the matched elements and false on error";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"function";s:26:"devtools_exception_handler";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:26:"Extended exception handler";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:35:"\Exception		The exception to handle";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:38:"library/DevTools/functions_options.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:10:{i:0;a:4:{s:8:"function";s:18:"options_value_dump";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:66:"Returns a var_dump() a-like syntax for an option
and its datatype";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:28:"string			The option datatype";i:1;s:25:"string			The option value";}s:6:"return";a:1:{i:0;s:86:"string			Returns a string containing the datatype and its value and 'unknown' on error";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"function";s:15:"options_get_all";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:44:"Gets all available options from the database";s:4:"tags";a:2:{s:6:"return";a:1:{i:0;s:80:"array			Returns an array with all the option names as values, and false on error";}s:6:"throws";a:1:{i:0;s:70:"\Tuxxedo\Exception\SQL	Throws a SQL exception if the query should fail";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"function";s:16:"options_is_valid";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:40:"Checks whether an option is valid or not";s:4:"tags";a:3:{s:5:"param";a:1:{i:0;s:24:"string			The option name";}s:7:"returns";a:1:{i:0;s:66:"boolean			Returns true if the option was valid, and false on error";}s:6:"throws";a:1:{i:0;s:70:"\Tuxxedo\Exception\SQL	Throws a SQL exception if the query should fail";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"function";s:18:"options_get_single";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:20:"Gets a single option";s:4:"tags";a:3:{s:5:"param";a:1:{i:0;s:24:"string			The option name";}s:7:"returns";a:1:{i:0;s:76:"array			Returns the option value if the option was valid, and false on error";}s:6:"throws";a:1:{i:0;s:70:"\Tuxxedo\Exception\SQL	Throws a SQL exception if the query should fail";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"function";s:13:"options_reset";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:37:"Resets an option to its default value";s:4:"tags";a:3:{s:5:"param";a:1:{i:0;s:24:"string			The option name";}s:6:"return";a:1:{i:0;s:57:"boolean			True if the value was reset, and false on error";}s:6:"throws";a:1:{i:0;s:70:"\Tuxxedo\Exception\SQL	Throws a SQL exception if the query should fail";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"function";s:14:"options_delete";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:17:"Deletes an option";s:4:"tags";a:3:{s:5:"param";a:1:{i:0;s:24:"string			The option name";}s:6:"return";a:1:{i:0;s:68:"boolean			Returns true if the option was deleted, and false on error";}s:6:"throws";a:1:{i:0;s:70:"\Tuxxedo\Exception\SQL	Throws a SQL exception if the query should fail";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:6;a:4:{s:8:"function";s:20:"options_convert_type";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:34:"Converts a value to an option type";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:49:"string			The one character option type: b, i etc.";i:1;s:29:"string			The value to convert";}s:6:"return";a:1:{i:0;s:79:"string			Converts the value into the desired type, and string for unknown types";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:7;a:4:{s:8:"function";s:22:"options_shorthand_type";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:43:"Converts an option type to a shorthand name";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:29:"string			The long option type";}s:6:"return";a:1:{i:0;s:42:"string			Returns the shorthand option type";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:8;a:4:{s:8:"function";s:11:"options_add";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:17:"Adds a new option";s:4:"tags";a:3:{s:5:"param";a:3:{i:0;s:24:"string			The option name";i:1;s:29:"string			The option data type";i:2;s:25:"string			The option value";}s:6:"return";a:1:{i:0;s:64:"boolean			Returns true if the option were added, otherwise false";}s:6:"throws";a:1:{i:0;s:70:"\Tuxxedo\Exception\SQL	Throws a SQL exception if the query should fail";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:9;a:4:{s:8:"function";s:12:"options_edit";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:15:"Edits an option";s:4:"tags";a:3:{s:5:"param";a:4:{i:0;s:28:"string			The old option name";i:1;s:28:"string			The new option name";i:2;s:33:"string			The new option data type";i:3;s:29:"string			The new option value";}s:6:"return";a:1:{i:0;s:65:"boolean			Returns true if the option were edited, otherwise false";}s:6:"throws";a:1:{i:0;s:70:"\Tuxxedo\Exception\SQL	Throws a SQL exception if the query should fail";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:37:"library/DevTools/functions_widget.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:3:{i:0;s:15:"\DevTools\Style";i:1;s:14:"\Tuxxedo\Input";i:2;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:1:{i:0;a:4:{s:8:"function";s:18:"widget_hook_styles";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:29:"Widget hook function - styles";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:42:"\Devtools\Style		The Devtools style object";i:1;s:40:"\Tuxxedo\Registry	The registry reference";i:2;s:40:"string			The template name of the widget";}s:6:"return";a:1:{i:0;s:44:"string			Returns the compiled sidebar widget";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:26:"library/DevTools/Style.php";a:6:{s:10:"namespaces";a:1:{s:9:"\DevTools";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:22:"\Tuxxedo\Style\Storage";}s:7:"classes";a:1:{s:14:"\Tuxxedo\Style";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:29:"Constructs a new style object";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:40:"\Tuxxedo\Registry	The Registry reference";i:1;s:31:"array			The configuration array";i:2;s:25:"array			The options array";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:16:"getSidebarWidget";s:8:"docblock";a:2:{s:11:"description";s:30:"Gets a sidebar widget template";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:61:"boolean			Reference to check whether a hook was called or not";}s:6:"return";a:1:{i:0;s:79:"boolean			Returns the template contents on success and boolean false on failure";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:9:"\DevTools";s:7:"extends";s:14:"\Tuxxedo\Style";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:151:"Development Tools styling class, this class overrides the
default styling class so we can overload the default style
storage engines and use our own.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:25:"library/DevTools/Test.php";a:6:{s:10:"namespaces";a:1:{s:9:"\DevTools";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:4:"Test";a:8:{s:9:"constants";a:5:{i:0;a:4:{s:8:"constant";s:12:"OPT_REQUIRED";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Option constant - test is required";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:12:"OPT_OPTIONAL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Option constant - test is optional";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:13:"OPT_EXTENSION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:39:"Option constant - tests a PHP extension";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:11:"OPT_VERSION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Option constant - tests versioning";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:12:"OPT_FUNCTION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:115:"Developmental Tools namespace. This namespace is for all development
tool related routines, as used by /dev/tools.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:42:"Option constant - tests function existance";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:7:"options";s:8:"docblock";a:2:{s:11:"description";s:15:"Option bitfield";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:4:"argv";s:8:"docblock";a:2:{s:11:"description";s:17:"Testing arguments";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:4:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:26:"Constructs a new test case";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:77:"integer                 The options bitfield, using the OPT_* class constants";i:1;s:69:"array                   The arguments that needs to be tested against";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"isRequired";s:8:"docblock";a:2:{s:11:"description";s:27:"Check if a test is required";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:76:"boolean                 Returns true if the test is required otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"isOptional";s:8:"docblock";a:2:{s:11:"description";s:27:"Check if a test is optional";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:76:"boolean                 Returns true if the test is optional otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:4:"test";s:8:"docblock";a:2:{s:11:"description";s:22:"Executes the test case";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:72:"boolean                 Returns true if the test passed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:9:"\DevTools";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:82:"Minor testing class, used for testing availability for
various requirement checks";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:43:"library/DevTools/Style/Storage/DevTools.php";a:6:{s:10:"namespaces";a:1:{s:23:"\DevTools\Style\Storage";a:2:{s:8:"docblock";a:2:{s:11:"description";s:116:"Development tools style storage namespace. This namespace is for the special
overrides used when loading templates.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{i:0;s:17:"\Tuxxedo\Registry";i:1;s:14:"\Tuxxedo\Style";i:2;s:33:"\Tuxxedo\Style\Storage\Filesystem";}s:7:"classes";a:1:{s:32:"\DevTools\Style\Storage\DevTools";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:31:"Constructs a new storage engine";s:4:"tags";a:1:{s:5:"param";a:3:{i:0;s:40:"\Tuxxedo\Registry	The Registry reference";i:1;s:45:"\Tuxxedo\Style		Reference to the style object";i:2;s:53:"object			Object reference to the templates data table";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"exists";s:8:"docblock";a:2:{s:11:"description";s:56:"Checks whether a template file exists on the file system";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:42:"string			The name of the template to check";}s:6:"return";a:1:{i:0;s:66:"boolean			Returns true if the template file exists otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:23:"\DevTools\Style\Storage";s:7:"extends";s:10:"Filesystem";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:137:"Development Tools style storage, this class overrides the
default filesystem storage engine so we can define our own
template location.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:33:"library/DevTools/Utilities/IO.php";a:6:{s:10:"namespaces";a:1:{s:19:"\DevTools\Utilities";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:2:"IO";a:8:{s:9:"constants";a:5:{i:0;a:4:{s:8:"constant";s:9:"TAG_START";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:44:"Tag mode constant - indicates start of a tag";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:7:"TAG_END";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:42:"Tag mode constant - indicates end of a tag";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:10:"STYLE_BOLD";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:41:"Style mode constant - indicates bold text";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:12:"STYLE_ITALIC";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:43:"Style mode constant - indicates italic text";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:15:"STYLE_UNDERLINE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:103:"Development utilities namespace. This namespace contains various
random classes for the code in /dev/.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:47:"Style mode constant - indicates underlined text";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:5:"depth";s:8:"docblock";a:2:{s:11:"description";s:31:"Nesting level of block elements";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:7:{i:0;a:3:{s:6:"method";s:5:"isCli";s:8:"docblock";a:2:{s:11:"description";s:47:"Checks if the script is running using a console";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:82:"boolean				Returns true if the client is a console, otherwise false for webservers";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:8:"headline";s:8:"docblock";a:2:{s:11:"description";s:17:"Writes a headline";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:27:"string				The headline text";i:1;s:39:"integer				The headline size (web only)";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:2:"ul";s:8:"docblock";a:2:{s:11:"description";s:39:"Starts or end writing an unordered list";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:67:"integer				Either TAG_START or TAG_END class constants as a boolean";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:2:"li";s:8:"docblock";a:2:{s:11:"description";s:44:"Writes a list item, optionally using a style";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:28:"string				The list item text";i:1;s:68:"integer				The style bitfield, consisting of the STYLE_XXX constants";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:4:"text";s:8:"docblock";a:2:{s:11:"description";s:46:"Writes a text string, optionally using a style";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:18:"string				The text";i:1;s:68:"integer				The style bitfield, consisting of the STYLE_XXX constants";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:3:"eol";s:8:"docblock";a:2:{s:11:"description";s:32:"Repeats an end of line character";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:37:"integer				The times to repeat an EOL";}s:6:"return";a:1:{i:0;s:38:"string				Returns the EOLs as a string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:5:"style";s:8:"docblock";a:2:{s:11:"description";s:20:"Styles a text string";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:25:"string				The text buffer";i:1;s:68:"integer				The style bitfield, consisting of the STYLE_XXX constants";}s:6:"return";a:1:{i:0;s:34:"string				Returns the style string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:19:"\DevTools\Utilities";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:147:"Input/Output writer. This class is designed to make basic scripts
work in CLI and in a browser without having to make alot of if/else
constructs.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:8:"DevTools";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:28:"library/Tuxxedo/Database.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:18:"\Tuxxedo\Exception";}s:7:"classes";a:1:{s:17:"\Tuxxedo\Database";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:6:{i:0;a:3:{s:8:"property";s:4:"link";s:8:"docblock";a:2:{s:11:"description";s:78:"Link pointer, this contains the internal link
to the database from the driver";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"mixed";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:7:"delayed";s:8:"docblock";a:2:{s:11:"description";s:56:"Whether the database connection still is delayed
or not";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:7:"queries";s:8:"docblock";a:2:{s:11:"description";s:41:"List of executed queries during execution";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:13:"configuration";s:8:"docblock";a:2:{s:11:"description";s:37:"Database specific configuration array";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:16:"shutdown_queries";s:8:"docblock";a:2:{s:11:"description";s:78:"List of shutdown queries that will be executed
when then destructor is called";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:14:"loaded_drivers";s:8:"docblock";a:2:{s:11:"description";s:116:"List of loaded drivers used for caching in the
special required cases where more than one driver
have to be loaded";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:8:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:47:"Default constructor for a new database instance";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:46:"array				Database specific configuration array";}s:6:"throws";a:1:{i:0;s:91:"\Tuxxedo\Exception\Basic	If the database connection fails, a basic exception will be thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"__destruct";s:8:"docblock";a:2:{s:11:"description";s:121:"Default destructor, this simply closes a database connection
and executes any registered shutdown queries there might be";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:32:"array				The configuration array";}s:6:"return";a:1:{i:0;s:25:"object				Object instance";}s:6:"throws";a:1:{i:0;s:102:"\Tuxxedo\Exception\Basic	Only thrown on poorly a configured database section in the configuration file";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:7:"factory";s:8:"docblock";a:2:{s:11:"description";s:34:"Constructs a new database instance";s:4:"tags";a:3:{s:5:"param";a:3:{i:0;s:21:"string				Driver name";i:1;s:46:"array				Database specific configuration array";i:2;s:49:"boolean				Whether this is a custom driver or not";}s:6:"return";a:1:{i:0;s:50:"\Tuxxedo\Database		Returns a new database instance";}s:6:"throws";a:1:{i:0;s:100:"\Tuxxedo\Exception\Basic	Throws a basic exception if loading of a driver should fail for some reason";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:6:"equery";s:8:"docblock";a:2:{s:11:"description";s:58:"Escape all arguments set to the query, prior to formatting";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:23:"string			SQL to execute";i:1;s:133:"mixed			Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf";}s:6:"return";a:1:{i:0;s:118:"boolean|object		Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed";}s:6:"throws";a:1:{i:0;s:89:"\Tuxxedo\Exception\SQL	If the SQL should fail for whatever reason, an exception is thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:16:"setShutdownQuery";s:8:"docblock";a:2:{s:11:"description";s:39:"Sets a new query to execute at shutdown";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:34:"string			The SQL string to execute";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:13:"getNumQueries";s:8:"docblock";a:2:{s:11:"description";s:55:"Gets the number of queries executed during this request";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:36:"integer			Number of queries executed";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:10:"getQueries";s:8:"docblock";a:2:{s:11:"description";s:45:"Gets the executed queries during this request";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:38:"array			A list of executed SQL queries";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:2:{i:0;s:15:"Database\Driver";i:1;s:9:"Invokable";}s:8:"docblock";a:2:{s:11:"description";s:245:"Abstract database class

Every main driver class must extend this class in order to be loadable
and to comply with the database access layer interface. This also contains
the factory method used to instanciate a new database driver instance.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:29:"library/Tuxxedo/Datastore.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:18:"\Tuxxedo\Datastore";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\Registry";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:44:"Holds the cached elements from the datastore";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:6:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:11:"Constructor";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:5:"__get";s:8:"docblock";a:2:{s:11:"description";s:70:"Quick reference for overloading of a loaded
element in the datastore.";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:38:"string			The datastore element to load";}s:6:"return";a:1:{i:0;s:62:"array			An array is returned, otherwise boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:4:"free";s:8:"docblock";a:2:{s:11:"description";s:39:"Frees a datastore from the loaded cache";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:49:"string			The datastore element to free from cache";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:327:"Rebuilds a datastore element if it already exists, or adds
a new entry in the datastore if no elements with that name
already exists. To delete a datastore element completely,
the data parameter must be set to NULL. If the delay
parameter is set to true, then the current cached data
will not be updated with the new data.";s:4:"tags";a:3:{s:5:"param";a:3:{i:0;s:30:"string			The datastore element";i:1;s:103:"mixed			This can be either an array or object, if this is NULL then the datastore is deleted completely";i:2;s:74:"boolean			Should this action be delayed until shutdown? (Defaults to true)";}s:6:"return";a:1:{i:0;s:51:"boolean			True on success, otherwise false on error";}s:6:"throws";a:1:{i:0;s:113:"\Tuxxedo\Exception\SQL	Throws an exception if the query should fail (only if the delay parameter is set to false)";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:68:"Caches a set of elements from the datastore into
the current cache.";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:66:"array			An array, where the values are the datastore element names";i:1;s:150:"array			An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";}s:6:"return";a:1:{i:0;s:42:"boolean			True on success, otherwise false";}s:6:"throws";a:1:{i:0;s:63:"\Tuxxedo\Exception	Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:6:"filter";s:8:"docblock";a:2:{s:11:"description";s:52:"Filters out already loaded elements in the datastore";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:40:"string				The datastore element to check";}s:6:"return";a:1:{i:0;s:69:"boolean				Returns true if the element not is loaded, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:168:"Datastore cache, this enables datastore caching for
databases. This assumes the datastore table and
everything else required for a database based
datastore is setup.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:29:"library/Tuxxedo/Exception.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:9:"Exception";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:84:"Standard exception, indicates that this is a GUI themed error (a non critical fatal)";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:86:"string			The error message, in a printf-alike formatted string or just a normal string";i:1;s:43:"mixed			Optional argument #n for formatting";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:10:"\Exception";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:106:"Default exception, mainly used for general errors. All
Tuxxedo specific exceptions extend this exception.";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:29:"library/Tuxxedo/functions.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:3:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:17:"\Tuxxedo\Registry";i:2;s:16:"\Tuxxedo\Version";}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:14:{i:0;a:4:{s:8:"function";s:25:"tuxxedo_exception_handler";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:155:"Exception handler, this terminates the script execution
if an exception is fatal and buffer non fatal exceptions
so they can be displayed on the template";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:36:"\Exception			The exception to handle";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"function";s:21:"tuxxedo_error_handler";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:307:"Error handler, this handles general errors from php. If
the script should error non fatal errors such as warnings
or notices, it will add them to the error buffer and show
then on the main template output. Note that this function is
not designed to be called directly and should be called by
php itself";s:4:"tags";a:3:{s:5:"param";a:4:{i:0;s:22:"integer				Error level";i:1;s:23:"string				Error message";i:2;s:19:"string				File path";i:3;s:22:"integer				Line number";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}s:6:"throws";a:1:{i:0;s:70:"\Tuxxedo\Exception\Basic	Throws a basic exception on fatal error types";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"function";s:17:"tuxxedo_doc_error";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:59:"Print a document error (startup) and halts script execution";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:59:"mixed				The message to show, this can also be an exception";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"function";s:18:"tuxxedo_doc_errorf";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:21:"Formattable doc error";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:87:"string				The error message, in a printf-alike formatted string or just a normal string";i:1;s:44:"mixed				Optional argument #n for formatting";}s:6:"return";a:1:{i:0;s:28:"Void				No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"function";s:17:"tuxxedo_trim_path";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:72:"Trims a file path to hide its path prior to the root
of the application";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:26:"string				The path to trim";i:1;s:80:"boolean				Should the path also be trimmed if debug mode is on? Defaults to true";}s:6:"return";a:1:{i:0;s:26:"string				The trimmed path";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"function";s:24:"tuxxedo_shutdown_handler";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:16:"Shutdown handler";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:6;a:4:{s:8:"function";s:19:"tuxxedo_multi_error";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:35:"Handles multiple errors repeatingly";s:4:"tags";a:3:{s:5:"param";a:3:{i:0;s:31:"string				A sprintf-like format";i:1;s:47:"array				An array with elements to loop through";i:2;s:51:"string				A fully quanified exception name to throw";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}s:6:"throws";a:1:{i:0;s:63:"mixed				Throws an exception until the errors have been cleared";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:7;a:4:{s:8:"function";s:16:"tuxxedo_redirect";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:43:"Issues a redirect and terminates the script";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:59:"string				The message to show to the user while redirecting";i:1;s:31:"string				The redirect location";i:2;s:38:"integer				Redirect timeout in seconds";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:8;a:4:{s:8:"function";s:23:"tuxxedo_header_redirect";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:62:"Issues a redirect using headers and then terminates the script";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:31:"string				The redirect location";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:9;a:4:{s:8:"function";s:13:"tuxxedo_error";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:86:"Prints an error message using the current loaded
theme and then terminates the script";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:27:"string				The error message";i:1;s:54:"boolean				Whether to show the 'Go back' button or not";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:10;a:4:{s:8:"function";s:12:"tuxxedo_date";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:20:"Date format function";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:34:"integer				The timestamp to format";i:1;s:83:"string				Optional format to use, defaults to the format defined within the options";}s:6:"return";a:1:{i:0;s:36:"string				Returns the formatted date";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:11;a:4:{s:8:"function";s:4:"page";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:30:"Generates code to print a page";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:36:"string				The template name to print";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:12;a:4:{s:8:"function";s:10:"page_print";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:130:"Wrapper function for printing a page content
from a variable. This function is mainly for
views that have layout mode activated.";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:40:"string				The template contents to print";}s:6:"return";a:1:{i:0;s:53:"string				Returns a string for eval()'ing the content";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:13;a:4:{s:8:"function";s:14:"is_valid_email";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:164:"Email validation, check if a supplied email
is written with a correct syntax.

This function is based on code by:
Alexander Meesters <admin@budgetwebhosting.nl>";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:39:"string				The email address to validate";}s:6:"return";a:1:{i:0;s:62:"boolean				Returns true if the email is valid, otherwise false";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:35:"library/Tuxxedo/functions_debug.php";a:6:{s:10:"namespaces";a:0:{}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:2:{i:0;a:4:{s:8:"function";s:23:"tuxxedo_debug_backtrace";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:145:"Backtrace handler

Generates a backtrace with extended information so theres
less to parse from the regular debug_backtrace() function
in PHP";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:109:"\Exception		If the current trace is combined with an exception, then pass the exception to get a better trace";}s:6:"return";a:1:{i:0;s:86:"array			Returns an array with object as keys carrying information about each trace bit";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"function";s:22:"tuxxedo_debug_typedata";s:9:"namespace";b:0;s:8:"docblock";a:2:{s:11:"description";s:67:"Dumps type data for argument call lists within the debug backtraces";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:36:"mixed			Any type of variable to dump";}s:6:"return";a:1:{i:0;s:58:"string			Returns a formatted string with the variable data";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}}s:26:"library/Tuxxedo/Helper.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:15:"\Tuxxedo\Helper";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:14:"loaded_helpers";s:8:"docblock";a:2:{s:11:"description";s:27:"Contains the loaded helpers";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:31:"Constructs a new storage engine";s:4:"tags";a:1:{s:5:"param";a:1:{i:0;s:47:"\Tuxxedo\Registry		The Tuxxedo object reference";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:1;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"factory";s:8:"docblock";a:2:{s:11:"description";s:186:"Factory method for loading a new helper

When loading multiple helpers and set them to register in the registry, then
the last registered one will override the old one in the registry";s:4:"tags";a:3:{s:5:"param";a:3:{i:0;s:47:"\Tuxxedo\Registry		The Tuxxedo object reference";i:1;s:42:"string				The helper handle to instanciate";i:2;s:58:"boolean				Whether to register this helper in the registry";}s:6:"return";a:1:{i:0;s:50:"object				Returns a helper handle object reference";}s:6:"throws";a:1:{i:0;s:68:"\Tuxxedo\Exception\Basic	Throws a basic exception on invalid helpers";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:24:"Helper loading interface";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:30:"library/Tuxxedo/InfoAccess.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:10:"InfoAccess";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:11:"information";s:8:"docblock";a:2:{s:11:"description";s:17:"Information array";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:4:{i:0;a:3:{s:6:"method";s:12:"offsetExists";s:8:"docblock";a:2:{s:11:"description";s:42:"Checks whether an information is available";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:42:"scalar			The information row name to check";}s:6:"return";a:1:{i:0;s:68:"boolean			Returns true if the information is stored, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"offsetGet";s:8:"docblock";a:2:{s:11:"description";s:39:"Gets a value from the information store";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:40:"scalar			The information row name to get";}s:6:"return";a:1:{i:0;s:73:"mixed			Returns the information value, and NULL if the value wasn't found";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:9:"offsetSet";s:8:"docblock";a:2:{s:11:"description";s:28:"Sets a new information value";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:40:"scalar			The information row name to set";i:1;s:41:"mixed			The new/update value for this row";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:11:"offsetUnset";s:8:"docblock";a:2:{s:11:"description";s:28:"Deletes an information value";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:43:"scalar			The information row name to delete";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:1:{i:0;s:12:"\ArrayAccess";}s:8:"docblock";a:2:{s:11:"description";s:120:"Information access, enables the ability for classes
to access their loaded information through the array-alike
syntax.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:25:"library/Tuxxedo/Input.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:14:"\Tuxxedo\Input";a:8:{s:9:"constants";a:7:{i:0;a:4:{s:8:"constant";s:12:"TYPE_NUMERIC";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:35:"Data filter constant, numeric value";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:11:"TYPE_STRING";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Data filter constant, string value";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:10:"TYPE_EMAIL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:33:"Data filter constant, email value";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:12:"TYPE_BOOLEAN";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:35:"Data filter constant, boolean value";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:13:"TYPE_CALLBACK";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:36:"Data filter constant, callback value";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"constant";s:13:"INPUT_OPT_RAW";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:82:"Data filter option, gets the raw value
of the input without any type of santizing";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:6;a:4:{s:8:"constant";s:15:"INPUT_OPT_ARRAY";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:182:"Data filter option, tells the cleaner that this
is an array input and any of its elements must be of
the given type. Note that recursive operations are not
done by the data filter";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:15:"have_filter_ext";s:8:"docblock";a:2:{s:11:"description";s:41:"Whether the filter extension is available";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:17:"have_magic_quotes";s:8:"docblock";a:2:{s:11:"description";s:42:"Whether magic_quotes_gpc is enabled or not";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:7:{i:0;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:40:"\Tuxxedo\Registry	The Registry reference";i:1;s:31:"array			The configuration array";}s:6:"return";a:1:{i:0;s:24:"object			Object instance";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:8:"validate";s:8:"docblock";a:2:{s:11:"description";s:53:"Validates data using a user specified callback method";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:28:"mixed			The data to validate";i:1;s:52:"callback		A callback thats used to validate the data";}s:6:"return";a:1:{i:0;s:72:"boolean			Returns true if the callback returned success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:3:"get";s:8:"docblock";a:2:{s:11:"description";s:18:"Filters 'GET' data";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:39:"string			Field name in the input source";i:1;s:43:"integer			Type of input filtering performed";i:2;s:38:"integer			Additional filtering options";}s:6:"return";a:1:{i:0;s:57:"mixed			Returns the filtered value, returns NULL on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:4:"post";s:8:"docblock";a:2:{s:11:"description";s:19:"Filters 'POST' data";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:39:"string			Field name in the input source";i:1;s:43:"integer			Type of input filtering performed";i:2;s:38:"integer			Additional filtering options";}s:6:"return";a:1:{i:0;s:57:"mixed			Returns the filtered value, returns NULL on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:6:"cookie";s:8:"docblock";a:2:{s:11:"description";s:21:"Filters 'COOKIE' data";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:39:"string			Field name in the input source";i:1;s:43:"integer			Type of input filtering performed";i:2;s:38:"integer			Additional filtering options";}s:6:"return";a:1:{i:0;s:57:"mixed			Returns the filtered value, returns NULL on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:4:"user";s:8:"docblock";a:2:{s:11:"description";s:45:"Filters 'user' data, as passed to this method";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:26:"string			The data to clean";i:1;s:43:"integer			Type of input filtering performed";}s:6:"return";a:1:{i:0;s:57:"mixed			Returns the filtered value, returns NULL on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:7:"process";s:8:"docblock";a:2:{s:11:"description";s:62:"Private filter method used by the GPC methods
to filter data.";s:4:"tags";a:2:{s:5:"param";a:4:{i:0;s:92:"integer			Where the data to filter is coming from (1 = GET, 2 = POST, 3 = COOKIE & 4 = User)";i:1;s:39:"string			Field name in the input source";i:2;s:43:"integer			Type of input filtering performed";i:3;s:38:"integer			Additional filtering options";}s:6:"return";a:1:{i:0;s:57:"mixed			Returns the filtered value, returns NULL on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:1:{i:0;s:9:"Invokable";}s:8:"docblock";a:2:{s:11:"description";s:175:"Input filtering class, this class cleans data
with magic quotes in mind. It will use the filter
extension if its available or use its own filtering
functions to emulate it.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:24:"library/Tuxxedo/Intl.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:13:"\Tuxxedo\Intl";i:2;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:13:"\Tuxxedo\Intl";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\Registry";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:7:"phrases";s:8:"docblock";a:2:{s:11:"description";s:32:"Holds the current loaded phrases";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:9:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:44:"Constructs a new internationalization object";s:4:"tags";a:1:{s:5:"param";a:1:{i:0;s:32:"array			The language data to use";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:32:"array				The configuration array";}s:6:"return";a:1:{i:0;s:25:"object				Object instance";}s:6:"throws";a:1:{i:0;s:100:"\Tuxxedo\Exception\Basic	Throws a basic exception if an invalid (or not cached) language id was used";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:86:"Caches a phrase group, trying to cache an already loaded
phrase group will recache it";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:40:"array				A list of phrase groups to load";i:1;s:151:"array				An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";}s:6:"return";a:1:{i:0;s:50:"boolean				Returns true on success otherwise false";}s:6:"throws";a:1:{i:0;s:68:"\Tuxxedo\Exception\SQL		Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:14:"getPhrasegroup";s:8:"docblock";a:2:{s:11:"description";s:44:"Gets all phrases from a specific phrasegroup";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:31:"string			The phrasegroup to get";i:1;s:69:"boolean			Whether to return a new phrasegroup object or just an array";}s:6:"return";a:1:{i:0;s:112:"mixed			Depending on the value of second parameter, an object or array is returned. False is returned on faliure";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:15:"getPhrasegroups";s:8:"docblock";a:2:{s:11:"description";s:21:"Gets all phrasegroups";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:102:"array			Returns an array with all loaded phrasegroups, false is returned if no phrasegroups is loaded.";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:4:"find";s:8:"docblock";a:2:{s:11:"description";s:14:"Finds a phrase";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:27:"string			The phrase to find";i:1;s:79:"string			Optionally search in a specific phrasegroup, defaults to search in all";}s:6:"return";a:1:{i:0;s:68:"string			Returns a phrases translation, false is returned on failure";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:6:"format";s:8:"docblock";a:2:{s:11:"description";s:27:"Format a translation string";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:47:"string		  The phrase to perform replacements on";i:1;s:31:"scalar		  Replacement string #1";i:2;s:31:"scalar		  Replacement string #n";}s:6:"return";a:1:{i:0;s:50:"string		  Returns the formatted translation string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:10:"getPhrases";s:8:"docblock";a:2:{s:11:"description";s:215:"Gets all phrases, note that phrases may be overridden by
another if there is more with the same name. To overcome this
limitation you must fetch the phrasegroup in which the phrase
belongs and fetch it from there";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:54:"array			Returns an array containing all loaded phrases";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:6:"filter";s:8:"docblock";a:2:{s:11:"description";s:72:"Filter callback for checking if a phrasegroup have any
elements phrases";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:33:"string			The phrasegroup to check";}s:6:"return";a:1:{i:0;s:75:"boolean			True if is one or more phrases in that phrasegroup, false if none";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:10:"InfoAccess";s:10:"implements";a:1:{i:0;s:9:"Invokable";}s:8:"docblock";a:2:{s:11:"description";s:133:"Internationalization Interface

This class deals with basic routines for internationalization
support and its relative components.";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:29:"library/Tuxxedo/Invokable.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:18:"\Tuxxedo\Invokable";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:32:"array				The configuration array";}s:6:"return";a:1:{i:0;s:25:"object				Object instance";}s:6:"throws";a:1:{i:0;s:102:"\Tuxxedo\Exception\Basic	Only thrown on poorly a configured database section in the configuration file";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:98:"Interface for requring the registry to pass certain information
before the constructor is called.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:26:"library/Tuxxedo/Loader.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:18:"\Tuxxedo\Exception";}s:7:"classes";a:1:{s:15:"\Tuxxedo\Loader";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:4:{i:0;a:3:{s:8:"property";s:9:"separator";s:8:"docblock";a:2:{s:11:"description";s:77:"Default separator for classes, this is commonly '_'
for non namespaced code.";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:4:"root";s:8:"docblock";a:2:{s:11:"description";s:56:"Default root to load from, defaults to the library
path";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:5:"paths";s:8:"docblock";a:2:{s:11:"description";s:38:"Custom paths for third party libraries";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:6:"routes";s:8:"docblock";a:2:{s:11:"description";s:45:"Custom match points using regular expressions";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:5:{i:0;a:3:{s:6:"method";s:3:"add";s:8:"docblock";a:2:{s:11:"description";s:56:"Defines one or more rewrite rules for autoloading
paths";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:74:"string|array			The class or an array of classes to define custom rules for";i:1;s:54:"string				The class separator, defaults to a backslash";i:2;s:36:"string				The root path to load from";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:5:"route";s:8:"docblock";a:2:{s:11:"description";s:67:"Defines one or more rewrite rules for autoloading
paths using PCRE";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:76:"string				The regular expression to match (without delimiters and modifiers)";i:1;s:62:"string				The matching formatting, including separators if any";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:17:"getNormalizedPath";s:8:"docblock";a:2:{s:11:"description";s:35:"Normalizes a class name into a path";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:30:"string				The class to convert";}s:6:"return";a:1:{i:0;s:35:"string				Returns the matching path";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:4:"load";s:8:"docblock";a:2:{s:11:"description";s:106:"Autoloads a class, if a class fails to load, the error handler is called
directly and the error is shown.";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:44:"string				The class or interface to autoload";i:1;s:98:"boolean				Whether to return true or false in case of loading instead of calling the error handler";}s:6:"return";a:1:{i:0;s:131:"boolean				Returns true if loaded, false otherwise if loading failed (latter is only true, if the $silent parameter is set to true)";}s:6:"throws";a:1:{i:0;s:118:"\Tuxxedo\Exception\Basic	Throws a basic exception if its loaded into runtime, else falls back to a standard error call";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:6:"exists";s:8:"docblock";a:2:{s:11:"description";s:77:"Check whether a class or interface exists without attempting to autoload them";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:41:"string				The class or interface to check";}s:6:"return";a:1:{i:0;s:45:"boolean				True if exists and false otherwise";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:18:"Autoloader handler";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:28:"library/Tuxxedo/Registry.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:18:"\Tuxxedo\Exception";}s:7:"classes";a:1:{s:17:"\Tuxxedo\Registry";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:4:{i:0;a:3:{s:8:"property";s:8:"instance";s:8:"docblock";a:2:{s:11:"description";s:23:"Holds the main instance";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\Registry";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:13:"configuration";s:8:"docblock";a:2:{s:11:"description";s:29:"Holds the configuration array";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:9:"instances";s:8:"docblock";a:2:{s:11:"description";s:42:"Holds an array of the instances registered";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:7:"globals";s:8:"docblock";a:2:{s:11:"description";s:49:"Holds the list of global variables across
Engine";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:10:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:43:"Disable the ability to construct the object";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"__clone";s:8:"docblock";a:2:{s:11:"description";s:39:"Disable the ability to clone the object";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"__get";s:8:"docblock";a:2:{s:11:"description";s:67:"Magic get method, this handles overloading of registered
instances";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:24:"string					Instance name";}s:6:"return";a:1:{i:0;s:76:"object					Returns the object instance if it exists, otherwise boolean false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:4:"init";s:8:"docblock";a:2:{s:11:"description";s:141:"Initializes a new object instance, this implements the
singleton pattern and can be called from any context and
the same object is returned";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:80:"array					The configuration array, this is only needed first time this is called";}s:6:"return";a:1:{i:0;s:53:"\Tuxxedo\Registry			An instance to the Tuxxedo object";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:8:"register";s:8:"docblock";a:2:{s:11:"description";s:342:"Registers a new instance and makes it accessable through
the name defined by the first parameter in the global scope
like the example below:

use Tuxxedo\Registry;



Note that the class must be a full path, and not an alias as
the class is instanciated inside the registry, not the scope
where custom aliasing rules may be defined.";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:36:"string					The name of this instance";i:1;s:92:"string					The class to register, this must implement a 'magic' method called invoke to work";}s:6:"return";a:1:{i:0;s:54:"object					Returns a reference to the created instance";}s:6:"throws";a:1:{i:0;s:114:"\Tuxxedo\Exception\Basic		This a basic exception if the class doesn't exists or implements the magic invoke method";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:3:"set";s:8:"docblock";a:2:{s:11:"description";s:36:"Sets a new reference in the registry";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:36:"string					The name of the reference";i:1;s:36:"mixed					The value of the reference";}s:6:"return";a:1:{i:0;s:29:"void					No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:3:"get";s:8:"docblock";a:2:{s:11:"description";s:33:"Gets a registered object instance";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:39:"string				The name of the object to get";}s:6:"return";a:1:{i:0;s:70:"object				Returns an instance to the object and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:16:"getConfiguration";s:8:"docblock";a:2:{s:11:"description";s:28:"Gets the configuration array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:68:"array				Returns the configuration array if defined, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:7:"globals";s:8:"docblock";a:2:{s:11:"description";s:25:"Sets or gets a new global";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:42:"string					The name of the variable to set";i:1;s:93:"mixed					A value, this can be of any type, this is only used if adding or editing a variable";}s:6:"return";a:1:{i:0;s:117:"mixed					Returns the value of variable on both set and get, and boolean false if trying to get an undefined variable";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:8:"symtable";s:8:"docblock";a:2:{s:11:"description";s:42:"Sets or gets a new value in a symbol table";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:61:"string					The name of the symbol table to read from/write to";i:1;s:42:"string					The name of the variable to set";i:2;s:93:"mixed					A value, this can be of any type, this is only used if adding or editing a variable";}s:6:"return";a:1:{i:0;s:117:"mixed					Returns the value of variable on both set and get, and boolean false if trying to get an undefined variable";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:64:"Registry class, this acts as a mixed singleton/registry
object.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:26:"library/Tuxxedo/Router.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:15:"\Tuxxedo\Loader";i:2;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:15:"\Tuxxedo\Router";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:7:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\Registry";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"prefix";s:8:"docblock";a:2:{s:11:"description";s:21:"Application namespace";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:10:"controller";s:8:"docblock";a:2:{s:11:"description";s:18:"Current controller";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:6:"action";s:8:"docblock";a:2:{s:11:"description";s:14:"Current action";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:10:"parameters";s:8:"docblock";a:2:{s:11:"description";s:21:"Additional parameters";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:18:"default_controller";s:8:"docblock";a:2:{s:11:"description";s:18:"Default controller";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:8:"property";s:14:"default_action";s:8:"docblock";a:2:{s:11:"description";s:14:"Default action";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:9:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:66:"Constructor, set the controller and action to their
default names";s:4:"tags";a:1:{s:5:"param";a:1:{i:0;s:46:"string						The application prefix (namespace)";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:13:"setController";s:8:"docblock";a:2:{s:11:"description";s:34:"Set the normalised controller name";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:31:"string						The controller name";}s:6:"return";a:1:{i:0;s:30:"void						No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:13:"getController";s:8:"docblock";a:2:{s:11:"description";s:30:"Get the routed controller name";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:31:"string						The Controller name";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:9:"setAction";s:8:"docblock";a:2:{s:11:"description";s:30:"Set the normalised action name";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:27:"string						The action name";}s:6:"return";a:1:{i:0;s:30:"void						No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:9:"getAction";s:8:"docblock";a:2:{s:11:"description";s:26:"Get the routed action name";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"string						The action name";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:15:"getActionMethod";s:8:"docblock";a:2:{s:11:"description";s:33:"Get the routed action method name";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"string						The action name";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:5:"__get";s:8:"docblock";a:2:{s:11:"description";s:21:"Get a parameter value";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:34:"string						Index of the parameter";}s:6:"return";a:1:{i:0;s:65:"string						The Parameter value, and NULL on undefined parameters";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:7:"__isset";s:8:"docblock";a:2:{s:11:"description";s:27:"Check if a parameter is set";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:43:"string						Index of the parameter to check";}s:6:"return";a:1:{i:0;s:63:"bool						Returns true if the parameter exists, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:5:"route";s:8:"docblock";a:2:{s:11:"description";s:28:"Route (start the controller)";s:4:"tags";a:2:{s:6:"return";a:1:{i:0;s:60:"\Tuxxedo\MVC\Controller				Returns a new controller instance";}s:6:"throws";a:1:{i:0;s:117:"\Tuxxedo\Exception\MVC\InvalidController	Throws an invalid controller exception if the controller could not be loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:93:"The router can detect from a range of sources the required controller and
action to execute.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:27:"library/Tuxxedo/Session.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:13:"\Tuxxedo\User";}s:7:"classes";a:1:{s:16:"\Tuxxedo\Session";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:3:{i:0;a:3:{s:8:"property";s:7:"started";s:8:"docblock";a:2:{s:11:"description";s:35:"Whether a session is started or not";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:2:"id";s:8:"docblock";a:2:{s:11:"description";s:14:"The session id";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:7:"options";s:8:"docblock";a:2:{s:11:"description";s:46:"The session options, such as prefix, path etc.";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:11:{i:0;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:31:"array			The configuration array";}s:6:"return";a:1:{i:0;s:24:"object			Object instance";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:3:"get";s:8:"docblock";a:2:{s:11:"description";s:23:"Gets a session variable";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:22:"string			Variable name";i:1;s:72:"boolean			Whether to include the session prefix or not, defaults to true";}s:6:"return";a:1:{i:0;s:73:"mixed			Returns the session variable value on success, or null on failure";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:3:"set";s:8:"docblock";a:2:{s:11:"description";s:23:"Sets a session variable";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:22:"string			Variable name";i:1;s:22:"mixed			Variable value";i:2;s:72:"boolean			Whether to include the session prefix or not, defaults to true";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:5:"start";s:8:"docblock";a:2:{s:11:"description";s:16:"Starts a session";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:9:"terminate";s:8:"docblock";a:2:{s:11:"description";s:20:"Terminates a session";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:16:"getSecurityToken";s:8:"docblock";a:2:{s:11:"description";s:28:"Get the specified CSRF token";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:85:"string			Returns a token string thats hexadecimal, and boolean false if its undefined";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:19:"getNewSecurityToken";s:8:"docblock";a:2:{s:11:"description";s:155:"Creates a new security token, note that this regenerates the session id and therefore
the relevant APIs must update the session id if its kept in storage.";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:36:"string			Returns the new token value";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:12:"offsetExists";s:8:"docblock";a:2:{s:11:"description";s:46:"Checks whether a session variable is available";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:42:"scalar			The information row name to check";}s:6:"return";a:1:{i:0;s:68:"boolean			Returns true if the information is stored, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:9:"offsetGet";s:8:"docblock";a:2:{s:11:"description";s:36:"Gets a value from a session variable";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:40:"scalar			The information row name to get";}s:6:"return";a:1:{i:0;s:73:"mixed			Returns the information value, and NULL if the value wasn't found";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:9:"offsetSet";s:8:"docblock";a:2:{s:11:"description";s:27:"Sets a new session variable";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:40:"scalar			The information row name to set";i:1;s:41:"mixed			The new/update value for this row";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:11:"offsetUnset";s:8:"docblock";a:2:{s:11:"description";s:26:"Deletes a session variable";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:43:"scalar			The information row name to delete";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:10:"InfoAccess";s:10:"implements";a:1:{i:0;s:9:"Invokable";}s:8:"docblock";a:2:{s:11:"description";s:116:"Session interface, this class is designed to be attached to
classes that implements an interface based on sessions.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:25:"library/Tuxxedo/Style.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:14:"\Tuxxedo\Style";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\Registry";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:9:"templates";s:8:"docblock";a:2:{s:11:"description";s:34:"Holds the current loaded templates";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:5:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:29:"Constructs a new style object";s:4:"tags";a:1:{s:5:"param";a:1:{i:0;s:30:"array				The style data to use";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"invoke";s:8:"docblock";a:2:{s:11:"description";s:81:"Magic method called when creating a new instance of the
object from the registry";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:32:"array				The configuration array";}s:6:"return";a:1:{i:0;s:25:"object				Object instance";}s:6:"throws";a:1:{i:0;s:97:"\Tuxxedo\Exception\Basic	Throws a basic exception if an invalid (or not cached) style id was used";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:78:"Caches a template, trying to cache an already loaded
template will recache it";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:36:"array				A list of templates to load";i:1;s:151:"array				An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";}s:6:"return";a:1:{i:0;s:50:"boolean				Returns true on success otherwise false";}s:6:"throws";a:1:{i:0;s:64:"\Tuxxedo\Exception		Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:5:"fetch";s:8:"docblock";a:2:{s:11:"description";s:25:"Fetches a cached template";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:43:"string				The name of the template to fetch";}s:6:"return";a:1:{i:0;s:86:"string				Returns the compiled template code for execution, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:6:"unload";s:8:"docblock";a:2:{s:11:"description";s:38:"Unloads a template from current memory";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:67:"string|array			The name of the template(s) to remove from the cache";}s:6:"return";a:1:{i:0;s:53:"boolean				Returns true on success and false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:10:"InfoAccess";s:10:"implements";a:1:{i:0;s:9:"Invokable";}s:8:"docblock";a:2:{s:11:"description";s:228:"Styling API, this enables basic styling frontend for
caching templates and fetching them for execution.

To compile templates thats loadable through this class
you should look at the {@link Tuxxedo_Template_Compiler}
class.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:28:"library/Tuxxedo/Template.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:19:"\Tuxxedo\InfoAccess";i:2;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:17:"\Tuxxedo\Template";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:5:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\Registry";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:4:"name";s:8:"docblock";a:2:{s:11:"description";s:28:"The name of the view to load";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:6:"layout";s:8:"docblock";a:2:{s:11:"description";s:15:"The layout mode";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:6:"buffer";s:8:"docblock";a:2:{s:11:"description";s:15:"Template buffer";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:9:"variables";s:8:"docblock";a:2:{s:11:"description";s:34:"The variables used within the view";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:4:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:34:"Constructor, constructs a new View";s:4:"tags";a:1:{s:5:"param";a:3:{i:0;s:38:"string				The name of the view to load";i:1;s:64:"boolean				Set to true to activate layout mode, and false to not";i:2;s:33:"array				Default variables to set";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"setLayout";s:8:"docblock";a:2:{s:11:"description";s:38:"Whether to set this as a layout or not";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:64:"boolean				Set to true to activate layout mode, and false to not";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"parse";s:8:"docblock";a:2:{s:11:"description";s:13:"Parses a view";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:33:"string				Returns the parsed view";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:10:"__toString";s:8:"docblock";a:2:{s:11:"description";s:14:"Outputs a view";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:48:"string				Returns the parsed view for outputting";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:10:"InfoAccess";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:131:"Template class, this class serves as an object oriented way of creating
templates, mainly designed for use with the MVC View class";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:24:"library/Tuxxedo/User.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{i:0;s:20:"\Tuxxedo\Datamanager";i:1;s:17:"\Tuxxedo\Registry";i:2;s:16:"\Tuxxedo\Session";}s:7:"classes";a:1:{s:13:"\Tuxxedo\User";a:8:{s:9:"constants";a:3:{i:0;a:4:{s:8:"constant";s:11:"OPT_SESSION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:62:"User info constant, also get session information if
available";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:9:"OPT_CACHE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:127:"User info constant, cache the user information within
the class to save a query if trying to query the same
user again  twice";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:16:"OPT_CURRENT_ONLY";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:115:"User info constant, return a reference to the current
stored information, no matter if a user is logged on or
not";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:6:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\Registry";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:8:"userinfo";s:8:"docblock";a:2:{s:11:"description";s:16:"User information";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:8:"stdClass";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:13:"usergroupinfo";s:8:"docblock";a:2:{s:11:"description";s:21:"Usergroup information";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:7:"session";s:8:"docblock";a:2:{s:11:"description";s:12:"User session";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:16:"\Tuxxedo\Session";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:9:"sessiondm";s:8:"docblock";a:2:{s:11:"description";s:24:"User session datamanager";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:36:"\Tuxxedo\Datamanager\Adapter\Session";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:73:"Cached userinfo, for calls to get user information
about a specific user";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:14:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:45:"Constructor, instanciates a new user session.";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:63:"boolean				Whether to auto detect if a user is logged in or not";i:1;s:44:"boolean				Whether to start a session or not";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"__destruct";s:8:"docblock";a:2:{s:11:"description";s:45:"Destructor, executes the cleanup queries etc.";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"login";s:8:"docblock";a:2:{s:11:"description";s:252:"Authenticates a user. If a user is currently logged in, then it
will be logged out and the session id will be regenerated.

A user can be logged in by a unique identifier, such as:

To attempt a login, the constructor must be instanciated with the";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:24:"string			User identifier";i:1;s:37:"string			User's password (raw format)";i:2;s:59:"string			The identifier field to check and validate against";}s:6:"return";a:1:{i:0;s:78:"boolean			Returns true if the user was logged in with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:6:"logout";s:8:"docblock";a:2:{s:11:"description";s:34:"Log the current logged in user out";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:47:"boolean			Whether to restart the session or not";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:11:"getUserInfo";s:8:"docblock";a:2:{s:11:"description";s:37:"Fetch user data about a specific user";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:28:"string			The user identifier";i:1;s:78:"string			The user identifier field, this defaults to 'id' to lookup by user id";i:2;s:86:"integer			Additional options, this uses the Tuxxedo_User::OPT_* constants as a bitmask";}s:6:"return";a:1:{i:0;s:98:"object			Returns a user data object with all user information if a user was found, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:16:"getUserGroupInfo";s:8:"docblock";a:2:{s:11:"description";s:105:"Get usergroup information about the current user's group
or a customed defined based on the usergroup id";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:103:"integer			The usergroup id to check, if NULL is passed then the current logged in usergroup is returned";}s:6:"return";a:1:{i:0;s:112:"object			Returns a standard object with the relevant usergroup information if found, otherwise false is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:10:"isMemberOf";s:8:"docblock";a:2:{s:11:"description";s:105:"Checks whether the user id a member of a
specific usergroup. This only checks for the
primary usergroup";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:35:"integer			The usergroup id to check";}s:6:"return";a:1:{i:0;s:80:"boolean			Returns true if the user is a member of that usergroup otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:10:"isLoggedIn";s:8:"docblock";a:2:{s:11:"description";s:52:"Checks whether this session have a user logon or not";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:62:"boolean			Returns true if a user is logged on, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:9:"isGranted";s:8:"docblock";a:2:{s:11:"description";s:154:"Checks whether the user's permissions can access a
certain feature. Note that this checks for the user's
permissions only, not per usergroup permissions";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:33:"integer			The permission to check";i:1;s:76:"boolean			Whether to check if the user's group have permission as a fallback";}s:6:"return";a:1:{i:0;s:69:"boolean			Returns true if the user is granted access, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:14:"isGroupGranted";s:8:"docblock";a:2:{s:11:"description";s:170:"Checks whether the user's usergroup permissions can
access a certain feature. Note that this checks for
the user's usergroup permissions only, not per
user permissions";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:33:"integer			The permission to check";}s:6:"return";a:1:{i:0;s:74:"boolean			Returns true if the usergroup is granted access, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:15:"isValidPassword";s:8:"docblock";a:2:{s:11:"description";s:48:"Checks if a password matches with its hash value";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:25:"string			The raw password";i:1;s:50:"string			The user salt that generated the password";i:2;s:28:"string			The hashed password";}s:6:"return";a:1:{i:0;s:63:"boolean			Returns true if the password matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:15:"getPasswordHash";s:8:"docblock";a:2:{s:11:"description";s:30:"Hashes a password using a salt";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:32:"string			The password to encrypt";i:1;s:42:"string			The unique salt for this password";}s:6:"return";a:1:{i:0;s:38:"string			Returns the computed password";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:15:"getPasswordSalt";s:8:"docblock";a:2:{s:11:"description";s:48:"Generates a salt for using with password hashing";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:70:"integer			The number of bytes the salt should be, must be 8 or greater";}s:6:"return";a:1:{i:0;s:34:"string			Returns the computed salt";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:13;a:3:{s:6:"method";s:22:"setPermissionConstants";s:8:"docblock";a:2:{s:11:"description";s:55:"Defines global constant values of datastore permissions";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:10:"InfoAccess";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:102:"User session class, this class manages the current user
session information and permission bitfields.";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:27:"library/Tuxxedo/Version.php";a:6:{s:10:"namespaces";a:1:{s:8:"\Tuxxedo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:7:"Version";a:8:{s:9:"constants";a:10:{i:0;a:4:{s:8:"constant";s:6:"SIMPLE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:128:"Engine simple version, this contains the current
release in the form of:

major.minor.release

For example, 1.0, 1.0.1 ect.";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:5:"MAJOR";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:20:"Major version number";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:5:"MINOR";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:20:"Minor version number";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:7:"RELEASE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:22:"Release version number";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:2:"ID";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:183:"Engine version ID, this contains the version id in the form
of:

id = (major_version * 10000) + (minor_version * 100) + release_version

Examples of the version id string can be:";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"constant";s:7:"PREVIEW";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:120:"Development preview mode, this is set to true if this is a development
release, like a Alpha, Beta or Release Candidate";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:6;a:4:{s:8:"constant";s:12:"PREVIEW_TYPE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:72:"Development preview type, this is set to the preview type, like 'Alpha',";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:7;a:4:{s:8:"constant";s:14:"PREVIEW_NUMBER";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:138:"Development preview number, this is set to the preview number for the
current preview type. This is only set if this is a preview release";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:8;a:4:{s:8:"constant";s:12:"VCS_REVISION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:46:"Current version control system revision number";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:9;a:4:{s:8:"constant";s:4:"FULL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:249:"Core Tuxxedo library namespace. This namespace contains all the main
foundation components of Tuxxedo Engine, plus additional utilities
thats provided by default. Some of these default components have
sub namespaces if they provide child objects.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:178:"Engine version string, this is the full version string, which
includes the pre-release name, version and the version number
of the upcoming version if pre-release. For example:";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:0:{}s:7:"methods";a:0:{}s:9:"namespace";s:8:"\Tuxxedo";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:53:"Versioning class, contains all of the Core versioning";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:35:"library/Tuxxedo/Database/Driver.php";a:6:{s:10:"namespaces";a:1:{s:17:"\Tuxxedo\Database";a:2:{s:8:"docblock";a:2:{s:11:"description";s:226:"Database Access Layer implementation. This namespace controls
all access to the database, multiple drivers for the database
can be loaded at the same time, along with multiple database
connection, even to the same database.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:6:"Driver";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:13:{i:0;a:3:{s:6:"method";s:17:"isDriverSupported";s:8:"docblock";a:2:{s:11:"description";s:158:"Returns if the current system supports the  driver, if this
method isn't called, a driver may start shutting down or
throwing random exceptions unexpectedly";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:55:"boolean				True if dirver is supported, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"connect";s:8:"docblock";a:2:{s:11:"description";s:61:"Connect to a database, if no connection isn't already
active";s:4:"tags";a:3:{s:5:"param";a:1:{i:0;s:80:"array				Change the configuration and use this new configuration to connect with";}s:6:"return";a:1:{i:0;s:51:"boolean				True if a successful connection was made";}s:6:"throws";a:1:{i:0;s:55:"\Tuxxedo\Exception\Basic	If a database connection fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"close";s:8:"docblock";a:2:{s:11:"description";s:27:"Close a database connection";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:61:"boolean				True if the connection was closed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:11:"isConnected";s:8:"docblock";a:2:{s:11:"description";s:32:"Checks if a connection is active";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:68:"boolean				True if a connection is currently active, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:6:"isLink";s:8:"docblock";a:2:{s:11:"description";s:84:"Checks if a variable is a connection of the same type
as the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:30:"mixed				The variable to check";}s:6:"return";a:1:{i:0;s:61:"boolean				True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:12:"isPersistent";s:8:"docblock";a:2:{s:11:"description";s:46:"Checks if the current connection is persistent";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:64:"boolean				True if the connection is persistent, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:8:"isResult";s:8:"docblock";a:2:{s:11:"description";s:80:"Checks if a variable is a result of the same type as
the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:30:"mixed				The variable to check";}s:6:"return";a:1:{i:0;s:61:"boolean				True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:8:"getError";s:8:"docblock";a:2:{s:11:"description";s:56:"Get the error message from the last occured error
error";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"string				The error message";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:8:"getErrno";s:8:"docblock";a:2:{s:11:"description";s:48:"Get the error number from the last occured error";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"integer				The error number";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:11:"getInsertId";s:8:"docblock";a:2:{s:11:"description";s:58:"Get the last insert id from last executed SELECT statement";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:65:"integer				Returns the last insert id, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:15:"getAffectedRows";s:8:"docblock";a:2:{s:11:"description";s:79:"Get the number of affected rows from last INSERT INTO/UPDATE/DELETE
operation.";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:62:"integer				Returns the number of affected rows, and 0 on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:6:"escape";s:8:"docblock";a:2:{s:11:"description";s:65:"Escape a piece of data using the database specific
escape method";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:27:"mixed				The data to escape";}s:6:"return";a:1:{i:0;s:22:"string				Escaped data";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:5:"query";s:8:"docblock";a:2:{s:11:"description";s:61:"Executes a query and returns the result on SELECT
statements";s:4:"tags";a:3:{s:5:"param";a:1:{i:0;s:24:"string				SQL to execute";}s:6:"return";a:1:{i:0;s:119:"boolean|object			Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed";}s:6:"throws";a:1:{i:0;s:90:"\Tuxxedo\Exception\SQL		If the SQL should fail for whatever reason, an exception is thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:17:"\Tuxxedo\Database";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:142:"Base database driver interface

This defines the driver structure of which functions a driver
must implement and how they should be called.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:35:"library/Tuxxedo/Database/Result.php";a:6:{s:10:"namespaces";a:1:{s:17:"\Tuxxedo\Database";a:2:{s:8:"docblock";a:2:{s:11:"description";s:226:"Database Access Layer implementation. This namespace controls
all access to the database, multiple drivers for the database
can be loaded at the same time, along with multiple database
connection, even to the same database.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:17:"\Tuxxedo\Database";}s:7:"classes";a:1:{s:24:"\Tuxxedo\Database\Result";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:3:{i:0;a:3:{s:8:"property";s:8:"instance";s:8:"docblock";a:2:{s:11:"description";s:55:"The database instance from where the result was created";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\Database";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"result";s:8:"docblock";a:2:{s:11:"description";s:19:"The result resource";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"mixed";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:15:"cached_num_rows";s:8:"docblock";a:2:{s:11:"description";s:21:"Cached number of rows";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:30:"Constructs a new result object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:38:"\Tuxxedo\Database		A database instance";i:1;s:86:"mixed				A database result, this must be delivered from the driver it was created from";}s:6:"throws";a:1:{i:0;s:124:"\Tuxxedo\Exception\Basic	If the result passed is from a different driver type, or if the result does not contain any results";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"__destruct";s:8:"docblock";a:2:{s:11:"description";s:59:"Simple destructor to free result when the
result is unset.";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:17:"\Tuxxedo\Database";s:7:"extends";s:0:"";s:10:"implements";a:1:{i:0;s:20:"Result\Specification";}s:8:"docblock";a:2:{s:11:"description";s:163:"Abstract database result class

Every driver result class must extend this class in order to be loadable
and to comply with the database access layer interface.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:41:"library/Tuxxedo/Database/Driver/Mysql.php";a:6:{s:10:"namespaces";a:1:{s:24:"\Tuxxedo\Database\Driver";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{i:0;s:17:"\Tuxxedo\Database";i:1;s:30:"\Tuxxedo\Database\Driver\Mysql";i:2;s:18:"\Tuxxedo\Exception";i:3;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:30:"\Tuxxedo\Database\Driver\MySQL";a:8:{s:9:"constants";a:1:{i:0;a:4:{s:8:"constant";s:11:"DRIVER_NAME";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:11:"Driver name";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:4:"link";s:8:"docblock";a:2:{s:11:"description";s:78:"Link pointer, this contains the internal link
to the database from the driver";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:8:"resource";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:13:{i:0;a:3:{s:6:"method";s:17:"isDriverSupported";s:8:"docblock";a:2:{s:11:"description";s:158:"Returns if the current system supports the  driver, if this
method isn't called, a driver may start shutting down or
throwing random exceptions unexpectedly";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:55:"boolean				True if dirver is supported, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"connect";s:8:"docblock";a:2:{s:11:"description";s:61:"Connect to a database, if no connection isn't already
active";s:4:"tags";a:3:{s:5:"param";a:1:{i:0;s:80:"array				Change the configuration and use this new configuration to connect with";}s:6:"return";a:1:{i:0;s:51:"boolean				True if a successful connection was made";}s:6:"throws";a:1:{i:0;s:55:"\Tuxxedo\Exception\Basic	If a database connection fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"close";s:8:"docblock";a:2:{s:11:"description";s:27:"Close a database connection";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:61:"boolean				True if the connection was closed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:11:"isConnected";s:8:"docblock";a:2:{s:11:"description";s:32:"Checks if a connection is active";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:68:"boolean				True if a connection is currently active, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:6:"isLink";s:8:"docblock";a:2:{s:11:"description";s:84:"Checks if a variable is a connection of the same type
as the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:30:"mixed				The variable to check";}s:6:"return";a:1:{i:0;s:61:"boolean				True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:12:"isPersistent";s:8:"docblock";a:2:{s:11:"description";s:46:"Checks if the current connection is persistent";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:64:"boolean				True if the connection is persistent, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:8:"isResult";s:8:"docblock";a:2:{s:11:"description";s:80:"Checks if a variable is a result of the same type as
the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:30:"mixed				The variable to check";}s:6:"return";a:1:{i:0;s:61:"boolean				True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:8:"getError";s:8:"docblock";a:2:{s:11:"description";s:56:"Get the error message from the last occured error
error";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"string				The error message";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:8:"getErrno";s:8:"docblock";a:2:{s:11:"description";s:48:"Get the error number from the last occured error";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"integer				The error number";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:11:"getInsertId";s:8:"docblock";a:2:{s:11:"description";s:58:"Get the last insert id from last executed SELECT statement";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:65:"integer				Returns the last insert id, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:15:"getAffectedRows";s:8:"docblock";a:2:{s:11:"description";s:79:"Get the number of affected rows from last INSERT INTO/UPDATE/DELETE
operation.";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:87:"\Tuxxedo\Database\Result	The result used to determine how many affected rows there were";}s:6:"return";a:1:{i:0;s:62:"integer				Returns the number of affected rows, and 0 on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:6:"escape";s:8:"docblock";a:2:{s:11:"description";s:65:"Escape a piece of data using the database specific
escape method";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:27:"mixed				The data to escape";}s:6:"return";a:1:{i:0;s:22:"string				Escaped data";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:5:"query";s:8:"docblock";a:2:{s:11:"description";s:61:"Executes a query and returns the result on SELECT
statements";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:24:"string				SQL to execute";i:1;s:134:"mixed				Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf";}s:6:"return";a:1:{i:0;s:119:"boolean|object			Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed";}s:6:"throws";a:1:{i:0;s:90:"\Tuxxedo\Exception\SQL		If the SQL should fail for whatever reason, an exception is thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:24:"\Tuxxedo\Database\Driver";s:7:"extends";s:8:"Database";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:220:"MySQL driver for Tuxxedo

This driver enables access to a MySQL 3+ based database using
the mysql database extension. If using MySQL 4.1+ the MySQLi
driver should be used as a better alternative for talking to
MySQL";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:42:"library/Tuxxedo/Database/Driver/Mysqli.php";a:6:{s:10:"namespaces";a:1:{s:24:"\Tuxxedo\Database\Driver";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{i:0;s:17:"\Tuxxedo\Database";i:1;s:31:"\Tuxxedo\Database\Driver\Mysqli";i:2;s:18:"\Tuxxedo\Exception";i:3;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:31:"\Tuxxedo\Database\Driver\MySQLi";a:8:{s:9:"constants";a:1:{i:0;a:4:{s:8:"constant";s:11:"DRIVER_NAME";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:11:"Driver name";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:4:"link";s:8:"docblock";a:2:{s:11:"description";s:78:"Link pointer, this contains the internal link
to the database from the driver";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"mysqli";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:10:"persistent";s:8:"docblock";a:2:{s:11:"description";s:122:"Check if persistent connections is active, this
is to "fake" the isPersistent() method and make
the return value correct";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:13:{i:0;a:3:{s:6:"method";s:17:"isDriverSupported";s:8:"docblock";a:2:{s:11:"description";s:158:"Returns if the current system supports the  driver, if this
method isn't called, a driver may start shutting down or
throwing random exceptions unexpectedly";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:55:"boolean				True if dirver is supported, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"connect";s:8:"docblock";a:2:{s:11:"description";s:61:"Connect to a database, if no connection isn't already
active";s:4:"tags";a:3:{s:5:"param";a:1:{i:0;s:80:"array				Change the configuration and use this new configuration to connect with";}s:6:"return";a:1:{i:0;s:51:"boolean				True if a successful connection was made";}s:6:"throws";a:1:{i:0;s:55:"\Tuxxedo\Exception\Basic	If a database connection fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"close";s:8:"docblock";a:2:{s:11:"description";s:27:"Close a database connection";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:61:"boolean				True if the connection was closed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:11:"isConnected";s:8:"docblock";a:2:{s:11:"description";s:32:"Checks if a connection is active";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:68:"boolean				True if a connection is currently active, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:6:"isLink";s:8:"docblock";a:2:{s:11:"description";s:84:"Checks if a variable is a connection of the same type
as the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:30:"mixed				The variable to check";}s:6:"return";a:1:{i:0;s:61:"boolean				True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:12:"isPersistent";s:8:"docblock";a:2:{s:11:"description";s:46:"Checks if the current connection is persistent";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:64:"boolean				True if the connection is persistent, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:8:"isResult";s:8:"docblock";a:2:{s:11:"description";s:80:"Checks if a variable is a result of the same type as
the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:30:"mixed				The variable to check";}s:6:"return";a:1:{i:0;s:61:"boolean				True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:8:"getError";s:8:"docblock";a:2:{s:11:"description";s:56:"Get the error message from the last occured error
error";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"string				The error message";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:8:"getErrno";s:8:"docblock";a:2:{s:11:"description";s:48:"Get the error number from the last occured error";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"integer				The error number";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:11:"getInsertId";s:8:"docblock";a:2:{s:11:"description";s:58:"Get the last insert id from last executed SELECT statement";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:65:"integer				Returns the last insert id, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:15:"getAffectedRows";s:8:"docblock";a:2:{s:11:"description";s:295:"Get the number of affected rows from last INSERT INTO/UPDATE/DELETE
operation. Due to internal reasons this driver also counts number of
rows like the {@link \Tuxxedo\Database\Driver\MySQLi\Result::getNumRows()}
on SELECT statements, this is only for this driver and should NOT be
relied on.";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:87:"\Tuxxedo\Database\Result	The result used to determine how many affected rows there were";}s:6:"return";a:1:{i:0;s:62:"integer				Returns the number of affected rows, and 0 on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:6:"escape";s:8:"docblock";a:2:{s:11:"description";s:65:"Escape a piece of data using the database specific
escape method";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:27:"mixed				The data to escape";}s:6:"return";a:1:{i:0;s:22:"string				Escaped data";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:5:"query";s:8:"docblock";a:2:{s:11:"description";s:61:"Executes a query and returns the result on SELECT
statements";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:24:"string				SQL to execute";i:1;s:134:"mixed				Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf";}s:6:"return";a:1:{i:0;s:119:"boolean|object			Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed";}s:6:"throws";a:1:{i:0;s:90:"\Tuxxedo\Exception\SQL		If the SQL should fail for whatever reason, an exception is thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:24:"\Tuxxedo\Database\Driver";s:7:"extends";s:8:"Database";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:139:"MySQL Improved driver for Tuxxedo Engine

This driver enables access to a MySQL 4.1+ based database using
the mysqli database extension.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:39:"library/Tuxxedo/Database/Driver/Pdo.php";a:6:{s:10:"namespaces";a:1:{s:24:"\Tuxxedo\Database\Driver";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{i:0;s:17:"\Tuxxedo\Database";i:1;s:28:"\Tuxxedo\Database\Driver\Pdo";i:2;s:18:"\Tuxxedo\Exception";i:3;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:28:"\Tuxxedo\Database\Driver\PDO";a:8:{s:9:"constants";a:1:{i:0;a:4:{s:8:"constant";s:11:"DRIVER_NAME";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"Database driver namespace, this contains all the main driver files. All
sub classes are stored in their relevant sub namespace named after the
database driver.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:11:"Driver name";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:2:{i:0;a:3:{s:8:"property";s:4:"link";s:8:"docblock";a:2:{s:11:"description";s:78:"Link pointer, this contains the internal link
to the database from the driver";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:3:"PDO";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:10:"persistent";s:8:"docblock";a:2:{s:11:"description";s:122:"Check if persistent connections is active, this
is to "fake" the isPersistent() method and make
the return value correct";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:13:{i:0;a:3:{s:6:"method";s:17:"isDriverSupported";s:8:"docblock";a:2:{s:11:"description";s:158:"Returns if the current system supports the  driver, if this
method isn't called, a driver may start shutting down or
throwing random exceptions unexpectedly";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:55:"boolean				True if dirver is supported, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"connect";s:8:"docblock";a:2:{s:11:"description";s:61:"Connect to a database, if no connection isn't already
active";s:4:"tags";a:3:{s:5:"param";a:1:{i:0;s:80:"array				Change the configuration and use this new configuration to connect with";}s:6:"return";a:1:{i:0;s:51:"boolean				True if a successful connection was made";}s:6:"throws";a:1:{i:0;s:55:"\Tuxxedo\Exception\Basic	If a database connection fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:5:"close";s:8:"docblock";a:2:{s:11:"description";s:27:"Close a database connection";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:62:"boolean					True if the connection was closed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:11:"isConnected";s:8:"docblock";a:2:{s:11:"description";s:32:"Checks if a connection is active";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:69:"boolean					True if a connection is currently active, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:6:"isLink";s:8:"docblock";a:2:{s:11:"description";s:84:"Checks if a variable is a connection of the same type
as the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:30:"mixed				The variable to check";}s:6:"return";a:1:{i:0;s:61:"boolean				True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:12:"isPersistent";s:8:"docblock";a:2:{s:11:"description";s:46:"Checks if the current connection is persistent";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:64:"boolean				True if the connection is persistent, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:8:"isResult";s:8:"docblock";a:2:{s:11:"description";s:80:"Checks if a variable is a result of the same type as
the one used by the driver";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:30:"mixed				The variable to check";}s:6:"return";a:1:{i:0;s:61:"boolean				True if the variable type matches, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:8:"getError";s:8:"docblock";a:2:{s:11:"description";s:56:"Get the error message from the last occured error
error";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"string				The error message";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:8:"getErrno";s:8:"docblock";a:2:{s:11:"description";s:48:"Get the error number from the last occured error";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"integer				The error number";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:11:"getInsertId";s:8:"docblock";a:2:{s:11:"description";s:58:"Get the last insert id from last executed SELECT statement";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:65:"integer				Returns the last insert id, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:15:"getAffectedRows";s:8:"docblock";a:2:{s:11:"description";s:79:"Get the number of affected rows from last INSERT INTO/UPDATE/DELETE
operation.";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:87:"\Tuxxedo\Database\Result	The result used to determine how many affected rows there were";}s:6:"return";a:1:{i:0;s:62:"integer				Returns the number of affected rows, and 0 on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:6:"escape";s:8:"docblock";a:2:{s:11:"description";s:65:"Escape a piece of data using the database specific
escape method";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:27:"mixed				The data to escape";}s:6:"return";a:1:{i:0;s:22:"string				Escaped data";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:6:"method";s:5:"query";s:8:"docblock";a:2:{s:11:"description";s:61:"Executes a query and returns the result on SELECT
statements";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:24:"string				SQL to execute";i:1;s:134:"mixed				Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf";}s:6:"return";a:1:{i:0;s:119:"boolean|object			Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed";}s:6:"throws";a:1:{i:0;s:90:"\Tuxxedo\Exception\SQL		If the SQL should fail for whatever reason, an exception is thrown";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:24:"\Tuxxedo\Database\Driver";s:7:"extends";s:8:"Database";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:189:"PDO abstraction driver for Tuxxedo Engine

This driver lets you use PDO as backend instead of the vendor
specific extensions. Any loaded PDO driver may be used to create
a new instance.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:48:"library/Tuxxedo/Database/Driver/Mysql/Result.php";a:6:{s:10:"namespaces";a:1:{s:30:"\Tuxxedo\Database\Driver\Mysql";a:2:{s:8:"docblock";a:2:{s:11:"description";s:86:"MySQL driver namespace, for driver components such as result statements
and the like.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Database";}s:7:"classes";a:1:{s:37:"\Tuxxedo\Database\Driver\Mysql\Result";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"result";s:8:"docblock";a:2:{s:11:"description";s:19:"The result resource";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:8:"resource";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:8:{i:0;a:3:{s:6:"method";s:4:"free";s:8:"docblock";a:2:{s:11:"description";s:51:"Frees the result from memory, and makes it unusable";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:64:"boolean				Returns true if the result was freed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"isFreed";s:8:"docblock";a:2:{s:11:"description";s:42:"Checks whenever the result is freed or not";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:75:"boolean				Returns true if the result is freed from memory, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"getNumRows";s:8:"docblock";a:2:{s:11:"description";s:36:"Get the number of rows in the result";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:79:"integer				Returns the number of rows in the result, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:10:"fetchArray";s:8:"docblock";a:2:{s:11:"description";s:60:"Fetch result with both associative and indexed indexes array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:41:"array				Returns an array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:10:"fetchAssoc";s:8:"docblock";a:2:{s:11:"description";s:51:"Fetches the result and returns an associative array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:53:"array				Returns an associative array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:8:"fetchRow";s:8:"docblock";a:2:{s:11:"description";s:47:"Fetches the result and returns an indexed array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:49:"array				Returns an indexed array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:11:"fetchObject";s:8:"docblock";a:2:{s:11:"description";s:84:"Fetches the result and returns an object, with overloaded
properties for rows names";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:43:"object				Returns an object with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:5:"fetch";s:8:"docblock";a:2:{s:11:"description";s:69:"Quick reference for not repeating code when fetching a different type";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:66:"integer				Result mode, 1 = array, 2 = assoc, 3 = row & 4 = object";}s:6:"return";a:1:{i:0;s:87:"array|object			Result type is based on result mode, boolean false is returned on errors";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:30:"\Tuxxedo\Database\Driver\Mysql";s:7:"extends";s:15:"Database\Result";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:179:"MySQL result class for Tuxxedo

This implements the result class for MySQL for Tuxxedo,
this contains methods to fetch, count result rows and
such for working with a resultset";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:49:"library/Tuxxedo/Database/Driver/Mysqli/Result.php";a:6:{s:10:"namespaces";a:1:{s:31:"\Tuxxedo\Database\Driver\Mysqli";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"MySQLi driver namespace, for driver components such as result statements
and the like.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Database";}s:7:"classes";a:1:{s:38:"\Tuxxedo\Database\Driver\Mysqli\Result";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"result";s:8:"docblock";a:2:{s:11:"description";s:19:"The result resource";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:13:"mysqli_result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:8:{i:0;a:3:{s:6:"method";s:4:"free";s:8:"docblock";a:2:{s:11:"description";s:51:"Frees the result from memory, and makes it unusable";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:64:"boolean				Returns true if the result was freed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"isFreed";s:8:"docblock";a:2:{s:11:"description";s:42:"Checks whenever the result is freed or not";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:75:"boolean				Returns true if the result is freed from memory, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"getNumRows";s:8:"docblock";a:2:{s:11:"description";s:36:"Get the number of rows in the result";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:79:"integer				Returns the number of rows in the result, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:10:"fetchArray";s:8:"docblock";a:2:{s:11:"description";s:60:"Fetch result with both associative and indexed indexes array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:41:"array				Returns an array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:10:"fetchAssoc";s:8:"docblock";a:2:{s:11:"description";s:51:"Fetches the result and returns an associative array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:52:"array			Returns an associative array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:8:"fetchRow";s:8:"docblock";a:2:{s:11:"description";s:47:"Fetches the result and returns an indexed array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:49:"array				Returns an indexed array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:11:"fetchObject";s:8:"docblock";a:2:{s:11:"description";s:84:"Fetches the result and returns an object, with overloaded
properties for rows names";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:43:"object				Returns an object with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:5:"fetch";s:8:"docblock";a:2:{s:11:"description";s:69:"Quick reference for not repeating code when fetching a different type";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:66:"integer				Result mode, 1 = array, 2 = assoc, 3 = row & 4 = object";}s:6:"return";a:1:{i:0;s:87:"array|object			Result type is based on result mode, boolean false is returned on errors";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:0;s:7:"private";b:1;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:31:"\Tuxxedo\Database\Driver\Mysqli";s:7:"extends";s:15:"Database\Result";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:198:"MySQL Improved result class for Tuxxedo

This implements the result class for MySQL Improved for
Tuxxedo, this contains methods to fetch, count result rows and
such for working with a resultset.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:46:"library/Tuxxedo/Database/Driver/Pdo/Result.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Database\Driver\Pdo";a:2:{s:8:"docblock";a:2:{s:11:"description";s:84:"PDO driver namespace, for driver components such as result statements
and the like.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{i:0;s:17:"\Tuxxedo\Database";i:1;s:18:"\Tuxxedo\Exception";}s:7:"classes";a:1:{s:35:"\Tuxxedo\Database\Driver\Pdo\Result";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"result";s:8:"docblock";a:2:{s:11:"description";s:19:"The result resource";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:13:"\PDOStatement";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:8:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:30:"Constructs a new result object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:38:"\Tuxxedo\Database		A database instance";i:1;s:86:"mixed				A database result, this must be delivered from the driver it was created from";}s:6:"throws";a:1:{i:0;s:124:"\Tuxxedo\Exception\Basic	If the result passed is from a different driver type, or if the result does not contain any results";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:4:"free";s:8:"docblock";a:2:{s:11:"description";s:51:"Frees the result from memory, and makes it unusable";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:64:"boolean				Returns true if the result was freed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:7:"isFreed";s:8:"docblock";a:2:{s:11:"description";s:42:"Checks whenever the result is freed or not";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:75:"boolean				Returns true if the result is freed from memory, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:10:"getNumRows";s:8:"docblock";a:2:{s:11:"description";s:36:"Get the number of rows in the result";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:79:"integer				Returns the number of rows in the result, and boolean false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:10:"fetchArray";s:8:"docblock";a:2:{s:11:"description";s:60:"Fetch result with both associative and indexed indexes array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:41:"array				Returns an array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:10:"fetchAssoc";s:8:"docblock";a:2:{s:11:"description";s:51:"Fetches the result and returns an associative array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:53:"array				Returns an associative array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:8:"fetchRow";s:8:"docblock";a:2:{s:11:"description";s:47:"Fetches the result and returns an indexed array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:49:"array				Returns an indexed array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:11:"fetchObject";s:8:"docblock";a:2:{s:11:"description";s:84:"Fetches the result and returns an object, with overloaded
properties for rows names";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:43:"object				Returns an object with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Database\Driver\Pdo";s:7:"extends";s:15:"Database\Result";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:206:"PDO abstraction result driver for Tuxxedo

This implements the result class for PDO based subdrivers for
Tuxxedo, this contains methods to fetch, count result rows and
such for working with a resultset.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:49:"library/Tuxxedo/Database/Result/Specification.php";a:6:{s:10:"namespaces";a:1:{s:24:"\Tuxxedo\Database\Result";a:2:{s:8:"docblock";a:2:{s:11:"description";s:121:"Database result namespace, this contains the driver specification
interface for database drivers to handle a result set.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:13:"Specification";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:7:{i:0;a:3:{s:6:"method";s:4:"free";s:8:"docblock";a:2:{s:11:"description";s:51:"Frees the result from memory, and makes it unusable";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:63:"boolean			Returns true if the result was freed, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"isFreed";s:8:"docblock";a:2:{s:11:"description";s:41:"Checks whether the result is freed or not";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:74:"boolean			Returns true if the result is freed from memory, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"getNumRows";s:8:"docblock";a:2:{s:11:"description";s:36:"Get the number of rows in the result";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:66:"integer			Returns the number of rows in the result, and 0 on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:10:"fetchArray";s:8:"docblock";a:2:{s:11:"description";s:60:"Fetch result with both associative and indexed indexes array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:40:"array			Returns an array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:10:"fetchAssoc";s:8:"docblock";a:2:{s:11:"description";s:51:"Fetches the result and returns an associative array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:52:"array			Returns an associative array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:8:"fetchRow";s:8:"docblock";a:2:{s:11:"description";s:47:"Fetches the result and returns an indexed array";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:48:"array			Returns an indexed array with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:11:"fetchObject";s:8:"docblock";a:2:{s:11:"description";s:84:"Fetches the result and returns an object, with overloaded
properties for rows names";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:42:"object			Returns an object with the result";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:24:"\Tuxxedo\Database\Result";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:170:"Base database driver result interface

This defines the driver structure of which functions a driver
must implement in the result object and how they should be called.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:39:"library/Tuxxedo/Datamanager/Adapter.php";a:6:{s:10:"namespaces";a:1:{s:20:"\Tuxxedo\Datamanager";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:5:{i:0;s:26:"\Tuxxedo\Datamanager\Hooks";i:1;s:18:"\Tuxxedo\Exception";i:2;s:14:"\Tuxxedo\Input";i:3;s:19:"\Tuxxedo\InfoAccess";i:4;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:8:{s:9:"constants";a:13:{i:0;a:4:{s:8:"constant";s:14:"FIELD_REQUIRED";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Indicates that a field is required";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:14:"FIELD_OPTIONAL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Indicates that a field is optional";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:15:"FIELD_PROTECTED";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:35:"Indicates that a field is protected";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:13:"FIELD_VIRTUAL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:33:"Indicates that a field is virtual";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:4;a:4:{s:8:"constant";s:16:"VALIDATE_NUMERIC";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Validation constant, numeric value";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:5;a:4:{s:8:"constant";s:15:"VALIDATE_STRING";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:33:"Validation constant, string value";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:6;a:4:{s:8:"constant";s:14:"VALIDATE_EMAIL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:32:"Validation constant, email value";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:7;a:4:{s:8:"constant";s:16:"VALIDATE_BOOLEAN";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:34:"Validation constant, boolean value";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:8;a:4:{s:8:"constant";s:17:"VALIDATE_CALLBACK";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:29:"Validation constant, callback";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:9;a:4:{s:8:"constant";s:23:"VALIDATE_OPT_ALLOWEMPTY";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:46:"Validation option constant, allow empty fields";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:10;a:4:{s:8:"constant";s:8:"OPT_INTL";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:64:"Factory option constant - internationalization (default enabled)";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:11;a:4:{s:8:"constant";s:13:"OPT_LOAD_ONLY";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:46:"Factory option constant - insert as new record";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:12;a:4:{s:8:"constant";s:11:"OPT_DEFAULT";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:222:"Datamanager namespace, this contains all base adapter class that
datamanagers must extend in order to become loadable. The root
namespace also hosts interfaces that datamanagers can implement
to extend the magic within.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:41:"Factory option constant - default options";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:13:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\Registry";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"dmname";s:8:"docblock";a:2:{s:11:"description";s:40:"Datamanager name, set by the datamanager";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:9:"tablename";s:8:"docblock";a:2:{s:11:"description";s:34:"Table name, set by the datamanager";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:6:"idname";s:8:"docblock";a:2:{s:11:"description";s:39:"Identifier name, set by the datamanager";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:10:"identifier";s:8:"docblock";a:2:{s:11:"description";s:18:"Identifier, if any";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:8:"userdata";s:8:"docblock";a:2:{s:11:"description";s:46:"Current data thats been set via the set method";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:9:"\stdClass";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:8:"property";s:6:"parent";s:8:"docblock";a:2:{s:11:"description";s:60:"Whether this datamanager are called from another datamanager";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:8:"property";s:10:"revalidate";s:8:"docblock";a:2:{s:11:"description";s:44:"Whether the datamanager needs to re-validate";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"boolean";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:8:"property";s:4:"data";s:8:"docblock";a:2:{s:11:"description";s:50:"The original data if instanciated by an identifier";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:8:"property";s:17:"shutdown_handlers";s:8:"docblock";a:2:{s:11:"description";s:36:"List of shutdown handlers to execute";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:8:"property";s:14:"invalid_fields";s:8:"docblock";a:2:{s:11:"description";s:76:"List of fields that had one or more errors and therefore
could not be saved";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:8:"property";s:14:"hooks_executor";s:8:"docblock";a:2:{s:11:"description";s:23:"Hooks executor callback";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"closure";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:12;a:3:{s:8:"property";s:19:"loaded_datamanagers";s:8:"docblock";a:2:{s:11:"description";s:121:"List of loaded datamanagers used for caching in the
special required cases where more than one driver
have to be loaded";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:12:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:202:"Constructor for the current datamanager, this
can be used to either create a datamanager based
on a certain record determined by the passed identifier
or as a clean datamanager to insert a new record";s:4:"tags";a:2:{s:5:"param";a:4:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:57:"mixed				The unique identifier to send to the datamanager";i:2;s:34:"integer				The datamanager options";i:3;s:58:"\Tuxxedo\Datamanager\Adapter	The parent datamanager if any";}s:6:"throws";a:1:{i:0;s:100:"\Tuxxedo\Exception		Throws an exception if the unique identifier sent to the datamanager was invalid";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:1;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"__destruct";s:8:"docblock";a:2:{s:11:"description";s:103:"Destructor for the current datamanager, this is
reserved for shutdown handlers in parent datamanagers.";s:4:"tags";a:0:{}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:4:"init";s:8:"docblock";a:2:{s:11:"description";s:104:"Datamanager initializer, this method initializes the default logic
used across all datamanager adapters";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:57:"integer				Additional options to apply on the datamanager";i:2;s:58:"\Tuxxedo\Datamanager\Adapter	The parent datamanager if any";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:7:"factory";s:8:"docblock";a:2:{s:11:"description";s:36:"Constructs a new datamanger instance";s:4:"tags";a:3:{s:5:"param";a:3:{i:0;s:25:"string				Datamanger name";i:1;s:92:"mixed				An identifier to send to the datamanager to load default data upon instanciating it";i:2;s:57:"integer				Additional options to apply on the datamanager";}s:6:"return";a:1:{i:0;s:60:"\Tuxxedo\Datamanager\Adapter	Returns a new database instance";}s:6:"throws";a:2:{i:0;s:104:"\Tuxxedo\Exception\Basic	Throws a basic exception if loading of a datamanger should fail for some reason";i:1;s:100:"\Tuxxedo\Exception\SQL		Throws a SQL exception if a database call fails when loading the datamanager";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:16:"getInvalidFields";s:8:"docblock";a:2:{s:11:"description";s:106:"Gets a list over invalid fields, this is only populated
if an attempt to saving a datamanager have failed";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:62:"array				Returns a list of those fields that failed validation";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:16:"getVirtualFields";s:8:"docblock";a:2:{s:11:"description";s:58:"Gets a list of virtual fields from the datamanager adapter";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:76:"array				Returns an array with field => value pairs, and empty array on none";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:3:"get";s:8:"docblock";a:2:{s:11:"description";s:12:"Gets a field";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:92:"string				The field to get, if this value is NULL then all the backend data will be returned";}s:6:"return";a:1:{i:0;s:77:"mixed				Returns the field value, and NULL if the field is non existant (set)";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:18:"setShutdownHandler";s:8:"docblock";a:2:{s:11:"description";s:23:"Sets a shutdown handler";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:32:"callback			A callback to execute";i:1;s:71:"array				Any additonal arguments the callback needs to execute properly";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:8:"validate";s:8:"docblock";a:2:{s:11:"description";s:51:"Validation method, validates the supplied user data";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:61:"boolean				Returns true if the data is valid, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:12:"setFieldType";s:8:"docblock";a:2:{s:11:"description";s:100:"Updates a field type (required or optional), note that its
not possible to set a field to protected";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:27:"string				Name of the field";i:1;s:36:"integer				The new type of the field";}s:6:"return";a:1:{i:0;s:64:"boolean				Returns true if the new type was set, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:10;a:3:{s:6:"method";s:4:"save";s:8:"docblock";a:2:{s:11:"description";s:70:"Save method, attempts to validate and save the data
into the database";s:4:"tags";a:3:{s:5:"param";a:1:{i:0;s:103:"boolean				Whether to execute hooks or not. This parameter is mainly designed for datamanager internals";}s:6:"return";a:1:{i:0;s:82:"boolean				Returns true if the data is saved with success, otherwise boolean false";}s:6:"throws";a:2:{i:0;s:74:"\Tuxxedo\Exception\Basic	Throws a basic exception if the query should fail";i:1;s:75:"\Tuxxedo\Exception\FormData	Throws a formdata exception if validation fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:11;a:3:{s:6:"method";s:6:"delete";s:8:"docblock";a:2:{s:11:"description";s:107:"Deletes the data, within the database if an identifier was specified, else
the current set data is removed";s:4:"tags";a:2:{s:6:"return";a:1:{i:0;s:77:"boolean				Returns true if the deletion was a success otherwise boolean false";}s:6:"throws";a:1:{i:0;s:74:"\Tuxxedo\Exception\Basic	Throws a basic exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:20:"\Tuxxedo\Datamanager";s:7:"extends";s:10:"InfoAccess";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:228:"Abstract datamanager class

Every datamanager class must extend this class in order to be loadable and to
comply with the datamanager API. This also contains the factory method used
to instanciate a new datamanager instance.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:47:"library/Tuxxedo/Datamanager/Adapter/Session.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:36:"\Tuxxedo\Datamanager\Adapter\Session";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:32:"Fields for validation of session";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:40:"Constructor for the sessions datamanager";s:4:"tags";a:1:{s:5:"param";a:4:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:29:"integer				Session identifier";i:2;s:57:"integer				Additional options to apply on the datamanager";i:3;s:58:"\Tuxxedo\Datamanager\Adapter	The parent datamanager if any";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:7:"Adapter";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:24:"Datamanager for sessions";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:45:"library/Tuxxedo/Datamanager/Adapter/Style.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:26:"\Tuxxedo\Datamanager\Hooks";i:2;s:18:"\Tuxxedo\Exception";i:3;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:34:"\Tuxxedo\Datamanager\Adapter\Style";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:31:"Fields for validation of styles";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:55:"Constructor, fetches a new style based on its id if set";s:4:"tags";a:2:{s:5:"param";a:4:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:23:"integer				The style id";i:2;s:57:"integer				Additional options to apply on the datamanager";i:3;s:58:"\Tuxxedo\Datamanager\Adapter	The parent datamanager if any";}s:6:"throws";a:2:{i:0;s:105:"\Tuxxedo\Exception\Basic	Throws an exception if the style id is set and it failed to load for some reason";i:1;s:71:"\Tuxxedo\Exception\SQL		Throws a SQL exception if a database call fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:119:"Save the style in the datastore, this method is called from
the parent class in cases when the save method was success";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:69:"array				A virtually populated array from the datamanager abstraction";}s:6:"return";a:1:{i:0;s:82:"boolean				Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:14:"virtualInherit";s:8:"docblock";a:2:{s:11:"description";s:103:"This event method is called if the query to store the
data was success, to rebuild the datastore cache";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:28:"mixed				The value to handle";}s:6:"return";a:1:{i:0;s:82:"boolean				Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:7:"Adapter";s:10:"implements";a:2:{i:0;s:11:"Hooks\Cache";i:1;s:23:"Hooks\VirtualDispatcher";}s:8:"docblock";a:2:{s:11:"description";s:22:"Datamanager for styles";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:48:"library/Tuxxedo/Datamanager/Adapter/Template.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:26:"\Tuxxedo\Datamanager\Hooks";i:2;s:18:"\Tuxxedo\Exception";i:3;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:37:"\Tuxxedo\Datamanager\Adapter\Template";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:31:"Fields for validation of styles";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:58:"Constructor, fetches a new template based on its id if set";s:4:"tags";a:2:{s:5:"param";a:4:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:26:"integer				The template id";i:2;s:57:"integer				Additional options to apply on the datamanager";i:3;s:58:"\Tuxxedo\Datamanager\Adapter	The parent datamanager if any";}s:6:"throws";a:2:{i:0;s:108:"\Tuxxedo\Exception\Basic	Throws an exception if the template id is set and it failed to load for some reason";i:1;s:71:"\Tuxxedo\Exception\SQL		Throws a SQL exception if a database call fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:44:"Updates the template ids in the styles table";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:69:"array				A virtually populated array from the datamanager abstraction";}s:6:"return";a:1:{i:0;s:82:"boolean				Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:7:"Adapter";s:10:"implements";a:1:{i:0;s:11:"Hooks\Cache";}s:8:"docblock";a:2:{s:11:"description";s:25:"Datamanager for templates";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:44:"library/Tuxxedo/Datamanager/Adapter/User.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:18:"\Tuxxedo\Exception";i:2;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:33:"\Tuxxedo\Datamanager\Adapter\User";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:30:"Fields for validation of users";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:8:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:54:"Constructor, fetches a new user based on its id if set";s:4:"tags";a:2:{s:5:"param";a:4:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:22:"integer				The user id";i:2;s:57:"integer				Additional options to apply on the datamanager";i:3;s:58:"\Tuxxedo\Datamanager\Adapter	The parent datamanager if any";}s:6:"throws";a:2:{i:0;s:104:"\Tuxxedo\Exception\Basic	Throws an exception if the user id is set and it failed to load for some reason";i:1;s:71:"\Tuxxedo\Exception\SQL		Throws a SQL exception if a database call fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:3:"set";s:8:"docblock";a:2:{s:11:"description";s:87:"Overloads the set method, so we can catch timezones
if updated so the validator passes";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:29:"string				The field to update";i:1;s:24:"mixed				The field value";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:16:"isValidUsergroup";s:8:"docblock";a:2:{s:11:"description";s:35:"Checks whether a usergroup is valid";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:60:"\Tuxxedo\Datamanager\Adapter	The current datamanager adapter";i:1;s:41:"\Tuxxedo\Registry		The Registry reference";i:2;s:49:"integer				The usergroup id to check for validity";}s:6:"return";a:1:{i:0;s:101:"boolean				Returns true if the usergroup is loaded and exists in the datastore cache, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:15:"isValidTimezone";s:8:"docblock";a:2:{s:11:"description";s:52:"Checks whether a timezone based by its name is valid";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:60:"\Tuxxedo\Datamanager\Adapter	The current datamanager adapter";i:1;s:41:"\Tuxxedo\Registry		The Registry reference";i:2;s:49:"string				The timezone name to check for validity";}s:6:"return";a:1:{i:0;s:100:"boolean				Returns true if the timezone is loaded and exists in the datastore cache, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:17:"getTimezoneOffset";s:8:"docblock";a:2:{s:11:"description";s:49:"Gets a timezone offset based on its timezone name";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:60:"\Tuxxedo\Datamanager\Adapter	The current datamanager adapter";i:1;s:41:"\Tuxxedo\Registry		The Registry reference";i:2;s:27:"string				The timezone name";}s:6:"return";a:1:{i:0;s:76:"string				Returns the timezone offset, or 0 if the timezone name was invalid";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:15:"isValidUsername";s:8:"docblock";a:2:{s:11:"description";s:42:"Checks whether a user name is taken or not";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:60:"\Tuxxedo\Datamanager\Adapter	The current datamanager adapter";i:1;s:41:"\Tuxxedo\Registry		The Registry reference";i:2;s:31:"string				The username to check";}s:6:"return";a:1:{i:0;s:76:"boolean				Returns true if the username is free to be taken, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:14:"isValidStyleId";s:8:"docblock";a:2:{s:11:"description";s:41:"Checks whether a style id is valid or not";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:60:"\Tuxxedo\Datamanager\Adapter	The current datamanager adapter";i:1;s:41:"\Tuxxedo\Registry		The Registry reference";i:2;s:23:"integer				The style id";}s:6:"return";a:1:{i:0;s:52:"boolean				True if the style exists, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:17:"isValidLanguageId";s:8:"docblock";a:2:{s:11:"description";s:44:"Checks whether a language id is valid or not";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:60:"\Tuxxedo\Datamanager\Adapter	The current datamanager adapter";i:1;s:41:"\Tuxxedo\Registry		The Registry reference";i:2;s:26:"integer				The language id";}s:6:"return";a:1:{i:0;s:55:"boolean				True if the language exists, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:7:"Adapter";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:21:"Datamanager for users";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:49:"library/Tuxxedo/Datamanager/Adapter/Usergroup.php";a:6:{s:10:"namespaces";a:1:{s:28:"\Tuxxedo\Datamanager\Adapter";a:2:{s:8:"docblock";a:2:{s:11:"description";s:180:"Datamanagers adapter namespace, this contains all the different
datamanager handler implementations to comply with the standard
adapter interface, and with the plugins for hooks.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{i:0;s:28:"\Tuxxedo\Datamanager\Adapter";i:1;s:26:"\Tuxxedo\Datamanager\Hooks";i:2;s:18:"\Tuxxedo\Exception";i:3;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:38:"\Tuxxedo\Datamanager\Adapter\Usergroup";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:6:"fields";s:8:"docblock";a:2:{s:11:"description";s:35:"Fields for validation of usergroups";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:59:"Constructor, fetches a new usergroup based on its id if set";s:4:"tags";a:2:{s:5:"param";a:4:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";i:1;s:27:"integer				The usergroup id";i:2;s:57:"integer				Additional options to apply on the datamanager";i:3;s:58:"\Tuxxedo\Datamanager\Adapter	The parent datamanager if any";}s:6:"throws";a:2:{i:0;s:109:"\Tuxxedo\Exception\Basic	Throws an exception if the usergroup id is set and it failed to load for some reason";i:1;s:71:"\Tuxxedo\Exception\SQL		Throws a SQL exception if a database call fails";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:11:"isValidType";s:8:"docblock";a:2:{s:11:"description";s:125:"Checks whether a usergroup type is valid, this is
used as a callback for the validation filter, hence
its staticlly defined";s:4:"tags";a:2:{s:5:"param";a:3:{i:0;s:60:"\Tuxxedo\Datamanager\Adapter	The current datamanager adapter";i:1;s:41:"\Tuxxedo\Registry		The Registry reference";i:2;s:28:"integer				The type to check";}s:6:"return";a:1:{i:0;s:61:"boolean				Returns true if the type is valid, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:123:"Save the usergroup in the datastore, this method is called from
the parent class in cases when the save method was success";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:69:"array				A virtually populated array from the datamanager abstraction";}s:6:"return";a:1:{i:0;s:82:"boolean				Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:28:"\Tuxxedo\Datamanager\Adapter";s:7:"extends";s:7:"Adapter";s:10:"implements";a:1:{i:0;s:11:"Hooks\Cache";}s:8:"docblock";a:2:{s:11:"description";s:26:"Datamanager for usergroups";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:43:"library/Tuxxedo/Datamanager/Hooks/Cache.php";a:6:{s:10:"namespaces";a:1:{s:26:"\Tuxxedo\Datamanager\Hooks";a:2:{s:8:"docblock";a:2:{s:11:"description";s:128:"Datamanager hooks, this namespace contains special hooks that can be used
trigger special routines within datamanager adapters.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:32:"\Tuxxedo\Datamanager\Hooks\Cache";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:7:"rebuild";s:8:"docblock";a:2:{s:11:"description";s:103:"This event method is called if the query to store the
data was success, to rebuild the datastore cache";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:69:"array				A virtually populated array from the datamanager abstraction";}s:6:"return";a:1:{i:0;s:82:"boolean				Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:26:"\Tuxxedo\Datamanager\Hooks";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:172:"Datastore requirement for using the datamanager

This interface is for datamanagers that interacts with the datastore
cache to rebuild it to prevent manual update of it.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:45:"library/Tuxxedo/Datamanager/Hooks/Virtual.php";a:6:{s:10:"namespaces";a:1:{s:26:"\Tuxxedo\Datamanager\Hooks";a:2:{s:8:"docblock";a:2:{s:11:"description";s:128:"Datamanager hooks, this namespace contains special hooks that can be used
trigger special routines within datamanager adapters.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:34:"\Tuxxedo\Datamanager\Hooks\Virtual";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:7:"virtual";s:8:"docblock";a:2:{s:11:"description";s:103:"This event method is called if the query to store the
data was success, to rebuild the datastore cache";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:37:"string				The virtual field to handle";i:1;s:34:"mixed				The virtual field's value";}s:6:"return";a:1:{i:0;s:82:"boolean				Returns true if the datastore was updated with success, otherwise false";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:26:"\Tuxxedo\Datamanager\Hooks";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:149:"Virtual field handler for using the datamanager

This interface is for allowing virtual fields to
be populated at runtime by datamanager adapters.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:55:"library/Tuxxedo/Datamanager/Hooks/VirtualDispatcher.php";a:6:{s:10:"namespaces";a:1:{s:26:"\Tuxxedo\Datamanager\Hooks";a:2:{s:8:"docblock";a:2:{s:11:"description";s:128:"Datamanager hooks, this namespace contains special hooks that can be used
trigger special routines within datamanager adapters.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:44:"\Tuxxedo\Datamanager\Hooks\VirtualDispatcher";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:0:{}s:9:"namespace";s:26:"\Tuxxedo\Datamanager\Hooks";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:146:"Virtual field dispatcher

This interface tells the datamanager API to dispatch virtual
fields to methods like: "username" -> "VirtualUsername".";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:35:"library/Tuxxedo/Exception/Basic.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:5:"Basic";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:0:{}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:18:"\Tuxxedo\Exception";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:181:"Basic exception type, this is used for errors that
should act as fatal errors. If an exception of this
is caught by the default exception handler it will
terminate the execution.";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:34:"library/Tuxxedo/Exception/Core.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:4:"Core";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:0:{}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:24:"\Tuxxedo\Exception\Basic";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:161:"Core exceptions indicates a critical fault in the Engine, these
are primary used during development processes and will not
appear in production ready versions.";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:38:"library/Tuxxedo/Exception/FormData.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:8:"FormData";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:8:"formdata";s:8:"docblock";a:2:{s:11:"description";s:34:"Holds the current stored form data";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:58:"Constructs a new formdata exception from an extended class";s:4:"tags";a:1:{s:5:"param";a:3:{i:0;s:38:"array			Form data to store as an array";i:1;s:86:"string			The error message, in a printf-alike formatted string or just a normal string";i:2;s:43:"mixed			Optional argument #n for formatting";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"getFields";s:8:"docblock";a:2:{s:11:"description";s:50:"Gets all the fields within the form data exception";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:57:"array			Returns an array with all the registered elements";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:18:"\Tuxxedo\Exception";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:151:"Form data exception, this exception is used to carry form data
so it can be displayed in a form if an error should occur while
processing the request";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:34:"library/Tuxxedo/Exception/Intl.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:17:"\Tuxxedo\Registry";}s:7:"classes";a:1:{s:23:"\Tuxxedo\Exception\Intl";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:967:"Constructs a new internalizationized exception, meaning that the
contents of this exception may be formatted for internationalized
usage.

If the internationalization object is not instanciated, then the
message is used as a raw translation, if the translation parameter
is specified then its formatted using a sprintf-alike syntax,
example:

try
throw new Exception\Intl('You are not old enough to view this content, you must be %d years old', 'age_limit_x', 18);
catch(Exception\Intl $e)
echo $e->getMessage();

If the translation method is specified and the component is not loaded, then
formatting will be applied internally.

Now if the internationalization component is loaded, then the above
would have outputted the same, however internally it would lookup the
phrase name 'age_limit_x' within the internationalization object, and
find its translation phrase and format it like regular phrases are
formatted with the {1}, {2}, {N} syntax.";s:4:"tags";a:1:{s:5:"param";a:3:{i:0;s:93:"string			The untranslated message, in case of the internationalization library was not loaded";i:1;s:31:"string			The translation phrase";i:2;s:70:"mixed			Optionally translation phrase replacement or parameter 1, 2, N";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:18:"\Tuxxedo\Exception";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:181:"Basic exception type, this is used for errors that
should act as fatal errors. If an exception of this
is caught by the default exception handler it will
terminate the execution.";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:33:"library/Tuxxedo/Exception/SQL.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:3:"SQL";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:8:"sqlstate";s:8:"docblock";a:2:{s:11:"description";s:17:"Current SQL state";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:30:"Constructs a new SQL exception";s:4:"tags";a:1:{s:5:"param";a:3:{i:0;s:31:"string			The error that occured";i:1;s:51:"integer			The associated error number for the error";i:2;s:68:"string			Optionally, an SQL state if the database driver supports it";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"getSQL";s:8:"docblock";a:2:{s:11:"description";s:56:"Gets the SQL string that caused the exception to trigger";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:31:"string			Returns the SQL string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:11:"getSQLState";s:8:"docblock";a:2:{s:11:"description";s:101:"Gets the current SQL state if the underlaying database
driver that threw this exception supports it.";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:72:"string			Returns the SQL state if supported, otherwise false is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:5:"Basic";s:10:"implements";a:0:{}s:8:"docblock";b:0;s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:46:"library/Tuxxedo/Exception/TemplateCompiler.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\Exception";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Exception namespace, this contains all the core exceptions defined within
the library.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:16:"TemplateCompiler";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:39:"Constructs a template compiler excepton";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:26:"string			The error message";i:1;s:51:"array			The current condition this error occured at";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:18:"\Tuxxedo\Exception";s:7:"extends";s:18:"\Tuxxedo\Exception";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:83:"Template compiler exception, any compilation error will be
of this exception type.";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:47:"library/Tuxxedo/Exception/MVC/InvalidAction.php";a:6:{s:10:"namespaces";a:1:{s:22:"\Tuxxedo\Exception\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:90:"MVC Exception namespace. This contains all the specialized exceptions for
MVC components.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:18:"\Tuxxedo\Exception";}s:7:"classes";a:1:{s:36:"\Tuxxedo\Exception\MVC\InvalidAction";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:52:"Constructor, sets the standardized exception message";s:4:"tags";a:1:{s:5:"param";a:1:{i:0;s:43:"\Exception				The previous exception if any";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:22:"\Tuxxedo\Exception\MVC";s:7:"extends";s:15:"Exception\Basic";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:21:"Invalid action method";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:51:"library/Tuxxedo/Exception/MVC/InvalidController.php";a:6:{s:10:"namespaces";a:1:{s:22:"\Tuxxedo\Exception\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:90:"MVC Exception namespace. This contains all the specialized exceptions for
MVC components.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:18:"\Tuxxedo\Exception";}s:7:"classes";a:1:{s:40:"\Tuxxedo\Exception\MVC\InvalidController";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:52:"Constructor, sets the standardized exception message";s:4:"tags";a:1:{s:5:"param";a:1:{i:0;s:43:"\Exception				The previous exception if any";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:22:"\Tuxxedo\Exception\MVC";s:7:"extends";s:15:"Exception\Basic";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:18:"Invalid controller";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:51:"library/Tuxxedo/Exception/MVC/InvalidPermission.php";a:6:{s:10:"namespaces";a:1:{s:22:"\Tuxxedo\Exception\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:90:"MVC Exception namespace. This contains all the specialized exceptions for
MVC components.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:18:"\Tuxxedo\Exception";}s:7:"classes";a:1:{s:40:"\Tuxxedo\Exception\MVC\InvalidPermission";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:52:"Constructor, sets the standardized exception message";s:4:"tags";a:1:{s:5:"param";a:1:{i:0;s:43:"\Exception				The previous exception if any";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:22:"\Tuxxedo\Exception\MVC";s:7:"extends";s:15:"Exception\Basic";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:18:"Invalid permission";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:36:"library/Tuxxedo/Intl/Phrasegroup.php";a:6:{s:10:"namespaces";a:1:{s:13:"\Tuxxedo\Intl";a:2:{s:8:"docblock";a:2:{s:11:"description";s:127:"Internationalization namespace, this contains components for
internationalization manipulation, like phrases and phrasegroups.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:13:"\Tuxxedo\Intl";}s:7:"classes";a:1:{s:25:"\Tuxxedo\Intl\Phrasegroup";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:7:"phrases";s:8:"docblock";a:2:{s:11:"description";s:54:"Holds the list of loaded phrases for
this phrasegroup";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:35:"Constructs a new phrasegroup object";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:88:"\Tuxxedo\Intl			Reference to the internationalization object to use for this phrasegroup";i:1;s:48:"string				Name of the phrasegroup to instanciate";}s:6:"throws";a:1:{i:0;s:115:"\Tuxxedo\Exception\Basic	Throws a basic exception if the phrasegroup isnt cached in the internationalization object";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"getPhrase";s:8:"docblock";a:2:{s:11:"description";s:44:"Gets a specific phrase from this phrasegroup";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:35:"string			Title of the phrase to get";}s:6:"return";a:1:{i:0;s:59:"string			Returns the phrase translation, and false on error";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"getPhrases";s:8:"docblock";a:2:{s:11:"description";s:45:"Gets all loaded phrases from this phrasegroup";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:55:"array			Returns all loaded phrases for this phrasegroup";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:13:"\Tuxxedo\Intl";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:103:"Internationalization phrasegroup class

Contains basic routines for working with single phrasegroups.";s:4:"tags";a:3:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:34:"library/Tuxxedo/MVC/Controller.php";a:6:{s:10:"namespaces";a:1:{s:12:"\Tuxxedo\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"MVC (Model-View-Controller) namespace, this contains all the base
implementation of each of the building bricks and extensions for
extending them even further.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:17:"\Tuxxedo\MVC\View";i:2;s:17:"\Tuxxedo\Registry";i:3;s:15:"\Tuxxedo\Router";}s:7:"classes";a:1:{s:23:"\Tuxxedo\MVC\Controller";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:5:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\Registry";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:6:"router";s:8:"docblock";a:2:{s:11:"description";s:13:"Router object";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:15:"\Tuxxedo\Router";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:6:"layout";s:8:"docblock";a:2:{s:11:"description";s:22:"Layout template object";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\MVC\View";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:4:"view";s:8:"docblock";a:2:{s:11:"description";s:21:"Current view template";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\MVC\View";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:6:"buffer";s:8:"docblock";a:2:{s:11:"description";s:15:"Template buffer";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:5:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:11:"Constructor";s:4:"tags";a:1:{s:5:"param";a:1:{i:0;s:41:"\Tuxxedo\Registry		The Registry reference";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"setRouter";s:8:"docblock";a:2:{s:11:"description";s:21:"Set the router object";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:39:"\Tuxxedo\Router\Uri		Router object used";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:9:"setLayout";s:8:"docblock";a:2:{s:11:"description";s:43:"Set the template object used for the layout";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:34:"\Tuxxedo\MVC\View		Layout template";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:7:"setView";s:8:"docblock";a:2:{s:11:"description";s:19:"Set the view object";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:55:"\Tuxxedo\MVC\View		View template for the current action";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:8:"dispatch";s:8:"docblock";a:2:{s:11:"description";s:54:"Dispatches the controller and renders the page content";s:4:"tags";a:2:{s:6:"return";a:1:{i:0;s:23:"string				Rendered view";}s:6:"throws";a:1:{i:0;s:53:"\Tuxxedo\Exception		If the controller does not exists";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:12:"\Tuxxedo\MVC";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:48:"The base controller class for the MVC components";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:29:"library/Tuxxedo/MVC/Model.php";a:6:{s:10:"namespaces";a:1:{s:12:"\Tuxxedo\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"MVC (Model-View-Controller) namespace, this contains all the base
implementation of each of the building bricks and extensions for
extending them even further.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:1:{i:0;s:18:"\Tuxxedo\Exception";}s:7:"classes";a:1:{s:18:"\Tuxxedo\MVC\Model";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:7:"methods";s:8:"docblock";a:2:{s:11:"description";s:18:"The methods to map";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:5:"remap";s:8:"docblock";a:2:{s:11:"description";s:21:"Re-indexes the mapper";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:6:"__call";s:8:"docblock";a:2:{s:11:"description";s:56:"Caller method, this emulates the defined method mappings";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:27:"string			The method to call";i:1;s:35:"array			The method arguments if any";}s:6:"return";a:1:{i:0;s:46:"mixed			Returns the value of the mapped method";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:12:"\Tuxxedo\MVC";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:292:"Model class

In a MVC application this would be extended to create logical models,
that are populated with data from another source (e.g. a datamanager).

This class implements a few methods that make writing models less
tedious, without having to write the same methods for each model.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:28:"library/Tuxxedo/MVC/View.php";a:6:{s:10:"namespaces";a:1:{s:12:"\Tuxxedo\MVC";a:2:{s:8:"docblock";a:2:{s:11:"description";s:161:"MVC (Model-View-Controller) namespace, this contains all the base
implementation of each of the building bricks and extensions for
extending them even further.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:4:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:19:"\Tuxxedo\InfoAccess";i:2;s:17:"\Tuxxedo\Registry";i:3;s:17:"\Tuxxedo\Template";}s:7:"classes";a:1:{s:17:"\Tuxxedo\MVC\View";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:0:{}s:9:"namespace";s:12:"\Tuxxedo\MVC";s:7:"extends";s:8:"Template";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:165:"The View class for MVC based components, this wraps around the
existing style API.

This class currently only serves as a wrapper for the regular
template class.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:47:"library/Tuxxedo/MVC/Controller/Dispatchable.php";a:6:{s:10:"namespaces";a:1:{s:23:"\Tuxxedo\MVC\Controller";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Controller extensions namespace. In here all extensions are stored
for MV-Controllers.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:12:"Dispatchable";a:8:{s:9:"constants";a:2:{i:0;a:4:{s:8:"constant";s:12:"DISPATCH_PRE";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Controller extensions namespace. In here all extensions are stored
for MV-Controllers.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:40:"Dispatch hook constant - Pre dispatching";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:13:"DISPATCH_POST";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:87:"Controller extensions namespace. In here all extensions are stored
for MV-Controllers.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:41:"Dispatch hook constant - Post dispatching";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:10:"dispatcher";s:8:"docblock";a:2:{s:11:"description";s:155:"Controller dispatch hook, this hook is called for
both pre and post dispatching and uses its only
parameter to determine which state we currently are
in";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:40:"integer				The current dispatching state";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:23:"\Tuxxedo\MVC\Controller";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:43:"Interface for dispatchable controller hooks";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:36:"library/Tuxxedo/MVC/Model/Mapper.php";a:6:{s:10:"namespaces";a:1:{s:18:"\Tuxxedo\MVC\Model";a:2:{s:8:"docblock";a:2:{s:11:"description";s:77:"Model extensions namespace. In here all extensions are stored
for Models-VC.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:0:{}s:10:"interfaces";a:1:{s:6:"Mapper";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:1:{i:0;a:3:{s:6:"method";s:9:"getMapper";s:8:"docblock";a:2:{s:11:"description";s:133:"Model mapper hook, this returns a list of the methods to
map properties for. To reindex the mapper, call the remap()
member method.";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:47:"array				Returns an array of the methods to map";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:18:"\Tuxxedo\MVC\Model";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:43:"Interface for dispatchable controller hooks";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:3:"MVC";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:30:"library/Tuxxedo/Router/Uri.php";a:6:{s:10:"namespaces";a:1:{s:15:"\Tuxxedo\Router";a:2:{s:8:"docblock";a:2:{s:11:"description";s:92:"Router handler namespaces, this namespace is for various interfaces
for hitting the router.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:3:"Uri";a:8:{s:9:"constants";a:2:{i:0;a:4:{s:8:"constant";s:15:"TYPE_CONTROLLER";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:92:"Router handler namespaces, this namespace is for various interfaces
for hitting the router.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:31:"Rule type constant - Controller";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:11:"TYPE_ACTION";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:92:"Router handler namespaces, this namespace is for various interfaces
for hitting the router.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:27:"Rule type constant - Action";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:0:{}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:5:"parse";s:8:"docblock";a:2:{s:11:"description";s:379:"Parses a uri and dispatches them all into controller, action and
parameters.

The general pattern for the URI routing in this case is fairly common
Assumed default names are Index and index for controller and action,
though these can be changed using the methods.

Default routes:
Follows #4 and #5 based on whether number of pieces is even or odd (
odd = #4, even = #5)";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:26:"string				The Uri to parse";}s:6:"return";a:1:{i:0;s:28:"void				No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:9:"canonical";s:8:"docblock";a:2:{s:11:"description";s:49:"Generates a canonical name for various components";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:43:"string 				The path or component to convert";i:1;s:69:"integer				A rule type, this is used to make sure things are callable";}s:6:"return";a:1:{i:0;s:36:"string				Returns the canonical name";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:15:"\Tuxxedo\Router";s:7:"extends";s:15:"\Tuxxedo\Router";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:27:"Uri based router interface.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:33:"library/Tuxxedo/Style/Storage.php";a:6:{s:10:"namespaces";a:1:{s:14:"\Tuxxedo\Style";a:2:{s:8:"docblock";a:2:{s:11:"description";s:198:"Style namespace, this contains all style related routines such as storage
of templates within handlers and all loading functions. Extended template
routines are in the \Tuxxedo\Template namespace.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:17:"\Tuxxedo\Registry";i:2;s:14:"\Tuxxedo\Style";}s:7:"classes";a:1:{s:22:"\Tuxxedo\Style\Storage";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:4:{i:0;a:3:{s:8:"property";s:8:"registry";s:8:"docblock";a:2:{s:11:"description";s:40:"Private instance to the Tuxxedo registry";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:17:"\Tuxxedo\Registry";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:5:"style";s:8:"docblock";a:2:{s:11:"description";s:42:"The style that this handler is assigned to";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:14:"\Tuxxedo\Style";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:9:"templates";s:8:"docblock";a:2:{s:11:"description";s:33:"Reference to the template storage";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"object";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:14:"loaded_engines";s:8:"docblock";a:2:{s:11:"description";s:28:"List of loaded style engines";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:3:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:31:"Constructs a new storage engine";s:4:"tags";a:1:{s:5:"param";a:3:{i:0;s:47:"\Tuxxedo\Registry		The Tuxxedo object reference";i:1;s:46:"\Tuxxedo\Style			Reference to the style object";i:2;s:54:"object				Object reference to the templates data table";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:1;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:78:"Caches a template, trying to cache an already loaded
template will recache it";s:4:"tags";a:3:{s:5:"param";a:2:{i:0;s:36:"array				A list of templates to load";i:1;s:151:"array				An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";}s:6:"return";a:1:{i:0;s:50:"boolean				Returns true on success otherwise false";}s:6:"throws";a:1:{i:0;s:68:"\Tuxxedo\Exception\SQL		Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:1;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:7:"factory";s:8:"docblock";a:2:{s:11:"description";s:57:"Factory method for creating a new storage engine instance";s:4:"tags";a:3:{s:5:"param";a:4:{i:0;s:47:"\Tuxxedo\Registry		The Tuxxedo object reference";i:1;s:46:"\Tuxxedo\Style			Reference to the style object";i:2;s:43:"string				The storage engine to instanciate";i:3;s:50:"object				Reference to the template storage object";}s:6:"return";a:1:{i:0;s:57:"object				Returns a style storage engine object reference";}s:6:"throws";a:1:{i:0;s:82:"\Tuxxedo\Exception\Basic	Throws a basic exception on invalid style storage engines";}}}s:8:"metadata";a:7:{s:5:"final";b:1;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:1;s:8:"docblock";b:1;}}}s:9:"namespace";s:14:"\Tuxxedo\Style";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:38:"Interface for template storage engines";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:1;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:42:"library/Tuxxedo/Style/Storage/Database.php";a:6:{s:10:"namespaces";a:1:{s:22:"\Tuxxedo\Style\Storage";a:2:{s:8:"docblock";a:2:{s:11:"description";s:146:"Style storage namespace, this is for handlers that can load templates via
different backends such as file system or database. All must extend the";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:17:"\Tuxxedo\Registry";i:2;s:14:"\Tuxxedo\Style";}s:7:"classes";a:1:{s:31:"\Tuxxedo\Style\Storage\Database";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:31:"Constructs a new storage engine";s:4:"tags";a:1:{s:5:"param";a:3:{i:0;s:46:"\Tuxxedo\Registry	The Tuxxedo object reference";i:1;s:45:"\Tuxxedo\Style		Reference to the style object";i:2;s:53:"object			Object reference to the templates data table";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:78:"Caches a template, trying to cache an already loaded
template will recache it";s:4:"tags";a:3:{s:5:"param";a:3:{i:0;s:35:"array			A list of templates to load";i:1;s:150:"array			An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";i:2;s:100:"array			An array passed by reference, this contains all the elements that where loaded if referenced";}s:6:"return";a:1:{i:0;s:49:"boolean			Returns true on success otherwise false";}s:6:"throws";a:1:{i:0;s:67:"\Tuxxedo\Exception\SQL	Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:22:"\Tuxxedo\Style\Storage";s:7:"extends";s:13:"Style\Storage";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:49:"Style storage engine for database based templates";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:44:"library/Tuxxedo/Style/Storage/Filesystem.php";a:6:{s:10:"namespaces";a:1:{s:22:"\Tuxxedo\Style\Storage";a:2:{s:8:"docblock";a:2:{s:11:"description";s:146:"Style storage namespace, this is for handlers that can load templates via
different backends such as file system or database. All must extend the";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:3:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:17:"\Tuxxedo\Registry";i:2;s:14:"\Tuxxedo\Style";}s:7:"classes";a:1:{s:33:"\Tuxxedo\Style\Storage\FileSystem";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:1:{i:0;a:3:{s:8:"property";s:4:"path";s:8:"docblock";a:2:{s:11:"description";s:48:"Directory where the compiled templates are saved";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:31:"Constructs a new storage engine";s:4:"tags";a:1:{s:5:"param";a:3:{i:0;s:38:"Tuxxedo			The Tuxxedo object reference";i:1;s:44:"Tuxxedo\Style		Reference to the style object";i:2;s:53:"object			Object reference to the templates data table";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:5:"cache";s:8:"docblock";a:2:{s:11:"description";s:78:"Caches a template, trying to cache an already loaded
template will recache it";s:4:"tags";a:3:{s:5:"param";a:3:{i:0;s:35:"array			A list of templates to load";i:1;s:150:"array			An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements";i:2;s:100:"array			An array passed by reference, this contains all the elements that where loaded if referenced";}s:6:"return";a:1:{i:0;s:49:"boolean			Returns true on success otherwise false";}s:6:"throws";a:1:{i:0;s:66:"Tuxxedo\Exception\SQL	Throws an exception if the query should fail";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:22:"\Tuxxedo\Style\Storage";s:7:"extends";s:13:"Style\Storage";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:52:"Style storage engine for file system based templates";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:37:"library/Tuxxedo/Template/Compiler.php";a:6:{s:10:"namespaces";a:1:{s:17:"\Tuxxedo\Template";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:2:{i:0;s:18:"\Tuxxedo\Exception";i:1;s:32:"\Tuxxedo\Template\Compiler\Dummy";}s:7:"classes";a:1:{s:26:"\Tuxxedo\Template\Compiler";a:8:{s:9:"constants";a:4:{i:0;a:4:{s:8:"constant";s:26:"OPT_NO_FUNCTION_CALL_LIMIT";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:45:"Compiler option - Disable function call check";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:1;a:4:{s:8:"constant";s:23:"OPT_NO_CLASS_CALL_LIMIT";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:42:"Compiler option - Disable class call check";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:2;a:4:{s:8:"constant";s:25:"OPT_NO_CLOSURE_CALL_LIMIT";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:44:"Compiler option - Disable closure call check";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}i:3;a:4:{s:8:"constant";s:25:"OPT_NO_INTERPOLATED_CALLS";s:9:"namespace";a:2:{s:8:"docblock";a:2:{s:11:"description";s:129:"Template namespace. This contains special routines for template handling
and such. It is also the home of the template compiler.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}s:8:"docblock";a:2:{s:11:"description";s:54:"Compiler option - Disable interpolated call protection";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:10:"properties";a:8:{i:0;a:3:{s:8:"property";s:6:"source";s:8:"docblock";a:2:{s:11:"description";s:30:"The uncompiled raw source code";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:8:"property";s:15:"compiled_source";s:8:"docblock";a:2:{s:11:"description";s:24:"The compiled source code";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:6:"string";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:8:"property";s:15:"error_reporting";s:8:"docblock";a:2:{s:11:"description";s:22:"Error reporting buffer";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:8:"property";s:7:"options";s:8:"docblock";a:2:{s:11:"description";s:24:"Compiler options bitmask";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:8:"property";s:10:"conditions";s:8:"docblock";a:2:{s:11:"description";s:130:"The current number of parsed conditions, this is used for
making error messages more expressive so its easier to locate
an error";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:7:"integer";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:8:"property";s:9:"functions";s:8:"docblock";a:2:{s:11:"description";s:170:"The default functions to allow in expressions, note
that this also contains some predefined special
keywords for expressions, these must be lowercase if
manually added";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:8:"property";s:7:"classes";s:8:"docblock";a:2:{s:11:"description";s:51:"The default class instances to allow in expressions";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:8:"property";s:8:"closures";s:8:"docblock";a:2:{s:11:"description";s:44:"The default closures to allow in expressions";s:4:"tags";a:1:{s:3:"var";a:1:{i:0;s:5:"array";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:0;s:9:"protected";b:1;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:7:"methods";a:10:{i:0;a:3:{s:6:"method";s:11:"__construct";s:8:"docblock";a:2:{s:11:"description";s:29:"Template compiler constructor";s:4:"tags";a:1:{s:5:"param";a:2:{i:0;s:106:"integer			The compiler options, this is used for recursive code by the compiler, or by setting the default";i:1;s:113:"integer			The current conditions, this is used for recursive code by the compile method and should not be touched";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:10:"setOptions";s:8:"docblock";a:2:{s:11:"description";s:25:"Set a new compiler option";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:34:"integer			The new compiler bitmask";i:1;s:81:"boolean			Whether to add it the bitmask to the current bitmask or reset it before";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:2;a:3:{s:6:"method";s:10:"getOptions";s:8:"docblock";a:2:{s:11:"description";s:33:"Gets the current compiler options";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:38:"integer			The current compiler options";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:3;a:3:{s:6:"method";s:13:"allowFunction";s:8:"docblock";a:2:{s:11:"description";s:47:"Allows a new function to be used in expressions";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:120:"string			A function name to be allowed in expressions, notice that this have to be an existing function and not a method";}s:6:"return";a:1:{i:0;s:96:"boolean			Returns true if success, and false if the function doesn't exists or already is loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:4;a:3:{s:6:"method";s:10:"allowClass";s:8:"docblock";a:2:{s:11:"description";s:53:"Allows a new class instance to be used in expressions";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:136:"string			A class instance name to be allowed in expressions, notice that this is the instance name of the variable, not the class itself";}s:6:"return";a:1:{i:0;s:65:"boolean			Returns true if success, and false if already is loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:5;a:3:{s:6:"method";s:12:"allowClosure";s:8:"docblock";a:2:{s:11:"description";s:35:"Allows a closure within expressions";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:74:"string			The closure expression name (to allow $closure, supply 'closure')";}s:6:"return";a:1:{i:0;s:65:"boolean			Returns true if success, and false if already is loaded";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:6;a:3:{s:6:"method";s:3:"set";s:8:"docblock";a:2:{s:11:"description";s:33:"Sets a new uncompiled source code";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:39:"string			The new uncompiled source code";}s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:7;a:3:{s:6:"method";s:3:"get";s:8:"docblock";a:2:{s:11:"description";s:33:"Gets the compiled template source";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:123:"string			Returns the source code of the original template in compiled form and boolean false if template isn't compiled yet";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:8;a:3:{s:6:"method";s:7:"compile";s:8:"docblock";a:2:{s:11:"description";s:26:"Compiles a template source";s:4:"tags";a:2:{s:6:"return";a:1:{i:0;s:27:"void			No value is returned";}s:6:"throws";a:1:{i:0;s:35:"\Tuxxedo\Exception\TemplateCompiler";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:9;a:3:{s:6:"method";s:4:"test";s:8:"docblock";a:2:{s:11:"description";s:42:"Tests a compiled template for parse errors";s:4:"tags";a:1:{s:6:"return";a:1:{i:0;s:106:"boolean			Returns a boolean value depending on the test, NULL is returned if the source isn't compiled yet";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:17:"\Tuxxedo\Template";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:240:"Template compiler, this compiles raw template source
code into php executable code with support for
expressions. It supports recursive expressions with
else support.

This class is inspired by the vBulletin template
compilation model.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}s:43:"library/Tuxxedo/Template/Compiler/Dummy.php";a:6:{s:10:"namespaces";a:1:{s:26:"\Tuxxedo\Template\Compiler";a:2:{s:8:"docblock";a:2:{s:11:"description";s:141:"Template compiler namespace, this contains all components that the
compiler utilizes when compiling or testing the generated template
code.";s:4:"tags";a:4:{s:6:"author";a:2:{i:0;s:40:"Kalle Sommer Nielsen	<kalle@tuxxedo.net>";i:1;s:33:"Ross Masters 		<ross@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:1:{s:8:"docblock";b:1;}}}s:7:"aliases";a:0:{}s:7:"classes";a:1:{s:5:"Dummy";a:8:{s:9:"constants";a:0:{}s:10:"properties";a:0:{}s:7:"methods";a:2:{i:0;a:3:{s:6:"method";s:6:"__call";s:8:"docblock";a:2:{s:11:"description";s:64:"Dummy method to emulate method overloading
to make testing pass";s:4:"tags";a:2:{s:5:"param";a:2:{i:0;s:31:"string		The method name to call";i:1;s:42:"array		The arguments to pass to the method";}s:6:"return";a:1:{i:0;s:28:"boolean		Always returns true";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}i:1;a:3:{s:6:"method";s:8:"__invoke";s:8:"docblock";a:2:{s:11:"description";s:75:"Dummy method to emulate method overloading
to make testing pass (closures)";s:4:"tags";a:2:{s:5:"param";a:1:{i:0;s:42:"array		The arguments to pass to the method";}s:6:"return";a:1:{i:0;s:28:"boolean		Always returns true";}}}s:8:"metadata";a:7:{s:5:"final";b:0;s:8:"abstract";b:0;s:6:"public";b:1;s:9:"protected";b:0;s:7:"private";b:0;s:6:"static";b:0;s:8:"docblock";b:1;}}}s:9:"namespace";s:26:"\Tuxxedo\Template\Compiler";s:7:"extends";s:0:"";s:10:"implements";a:0:{}s:8:"docblock";a:2:{s:11:"description";s:127:"Dummy compiler class, this is used for emulation within the
test method to make sure object oriented features may be compiled.";s:4:"tags";a:4:{s:6:"author";a:1:{i:0;s:40:"Kalle Sommer Nielsen <kalle@tuxxedo.net>";}s:7:"version";a:1:{i:0;s:3:"1.0";}s:7:"package";a:1:{i:0;s:6:"Engine";}s:10:"subpackage";a:1:{i:0;s:7:"Library";}}}s:8:"metadata";a:3:{s:5:"final";b:0;s:8:"abstract";b:0;s:8:"docblock";b:1;}}}s:10:"interfaces";a:0:{}s:9:"constants";a:0:{}s:9:"functions";a:0:{}}}