{".tuxxedo":{"version":3,"timestamp":1406277592,"generator":"Tuxxedo Engine 1.2.0 \"Beloved\" Release Candidate 2 (experimental)"},"dev\/scripts\/api_analyze.php":{"namespaces":[],"aliases":{"\\DevTools\\Utilities\\IO":"","\\Tuxxedo\\Version":""},"classes":[],"interfaces":[],"traits":[],"constants":{"ACC_PUBLIC":{"namespace":"","docblock":{"description":"Access modifier constant - Public","tags":{"var":"integer"}},"metadata":{"docblock":true}},"ACC_PROTECTED":{"namespace":"","docblock":{"description":"Access modifier constant - Protected","tags":{"var":"integer"}},"metadata":{"docblock":true}},"ACC_PRIVATE":{"namespace":"","docblock":{"description":"Access modifier constant - Private","tags":{"var":"integer"}},"metadata":{"docblock":true}},"ACC_ABSTRACT":{"namespace":"","docblock":{"description":"Access modifier constant - Abstract","tags":{"var":"integer"}},"metadata":{"docblock":true}},"ACC_FINAL":{"namespace":"","docblock":{"description":"Access modifier constant - Final","tags":{"var":"integer"}},"metadata":{"docblock":true}},"ACC_STATIC":{"namespace":"","docblock":{"description":"Access modifier constant - Static","tags":{"var":"integer"}},"metadata":{"docblock":true}},"ACC_DOCBLOCK":{"namespace":"","docblock":{"description":"Access modifier constant - Docblock","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}}},"functions":[{"function":"analyze","namespace":"","docblock":{"description":"Fetches all analyzable files into one huge array","tags":{"param":[["string","The path to analyze from"]],"return":["array","Returns an array with all the files that can be analyzed from the root directory"]}},"metadata":{"docblock":true}},{"function":"dump_metadata","namespace":"","docblock":{"description":"Dumps metadata for printf arguments","tags":{"param":[["array","The meta data to dump"]],"return":["string","Returns a string for printf"]}},"metadata":{"docblock":true}},{"function":"resolve_namespace","namespace":"","docblock":{"description":"Resolves a namespace based on the datamap stack","tags":{"param":[["array","The datamap stack containing the namespaces for the current file"]],"return":["string","Returns the namespace if it can be resolved, otherwise false"],"since":"1.2.0"}},"metadata":{"docblock":true}},{"function":"resolve_namespace_alias","namespace":"","docblock":{"description":"Resolves a class object to its full namespaced path","tags":{"param":[["string","The root namespace, from the namespace declaration in the top of each file"],["array","Array of aliases to use for the class object when attempting to resolve"],["string","The class object"]],"return":["string","Returns the resolved namespaced path to the class object"]}},"metadata":{"docblock":true}},{"function":"lexical_next_index","namespace":"","docblock":{"description":"Finds the next lexical token index","tags":{"param":[["array","The tokens copy array"],["integer","The token start index"],["integer|string","The token to find"],["array","The stop tokens to break scanning"]],"return":["integer","Returns the token index found token, and false on failure"]}},"metadata":{"docblock":true}},{"function":"lexical_scan","namespace":"","docblock":{"description":"Scans from the current pointer until the first match token match","tags":{"param":[["array","The tokens copy array"],["integer","The token start index"],["integer|string","The token to find"]],"return":["string","Returns the token content if found, otherwise false"]}},"metadata":{"docblock":true}},{"function":"lexical_scan_concat","namespace":"","docblock":{"description":"Scans and concates the matched tokens into a string","tags":{"param":[["array","The tokens copy array"],["integer","The token start index"],["integer|string","The stop token, when this is hit the scanner returns"],["boolean","Whether to skip whitespace tokens or not"]],"return":["string","Returns the concated string with the tokens between the current pointer and the stop token"]}},"metadata":{"docblock":true}},{"function":"lexical_scan_separator","namespace":"","docblock":{"description":"Scans a statement and breaks it into an array based on a separator token","tags":{"param":[["array","The tokens copy array"],["integer","The token start index"],["integer|string","The separator token"],["integer|string","The stop token, end of statement"],["boolean","Whether to skip whitespace tokens or not"]],"return":["array","Returns an array with each part as a new value, like explode() and empty array on failure"]}},"metadata":{"docblock":true}},{"function":"lexical_scan_extends_implements","namespace":"","docblock":{"description":"Lexical scan extends and implements tokens to find their children","tags":{"param":[["array","The tokens copy array"],["integer","The token start index"],["integer|string","The start token"],["array","Stop tokens, if any of the tokens in this array is hit, the scanner will return"]],"return":["array","Returns an array with the matched child parts"]}},"metadata":{"docblock":true}},{"function":"lexical_docblock","namespace":"","docblock":{"description":"Lexical docblock scanner","tags":{"param":[["array","The tokens copy array"],["integer","The index of the docblock ($context->last_docblock)"]],"return":["array","Returns an array with structured docblock information on success and false on error"],"since":"1.1.0"}},"metadata":{"docblock":true}},{"function":"lexical_docblock_parse","namespace":"","docblock":{"description":"Lexical docblock parser","tags":{"param":[["string","The docblock tag value to parse"]],"return":["array","Returns a structured array with the docblock variables and false on error"],"since":"1.1.0"}},"metadata":{"docblock":true}}]},"dev\/scripts\/api_indexer.php":{"namespaces":[],"aliases":{"\\DevTools\\Utilities\\IO":"","\\Tuxxedo\\Version":""},"classes":{"\\Template":{"reuses":[],"constants":[],"properties":[{"property":"name","docblock":{"description":"Name of the template currently loaded","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"outputdir","docblock":{"description":"Output directory","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"outputext","docblock":{"description":"Output extension (if custom)","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"templatedir","docblock":{"description":"Template directory","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"appname","docblock":{"description":"Application name (if custom)","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"timestamps","docblock":{"description":"Timestamps for when the API doc were generated","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"variables","docblock":{"description":"Template variables","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"templates","docblock":{"description":"Template cache","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Loads a new template and constructs the object\r\n\r\nInvalid templates halts the execution of the script.","tags":{"param":[["string","The name of the template"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__set","docblock":{"description":"Property overloader, to register template variables","tags":{"param":[["string","The name of the variable"],["string","The value of the variable"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__get","docblock":{"description":"Property overloader, to get template variables","tags":{"param":[["string","The name of the variable"]],"return":["void","Returns the value of the variable"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__toString","docblock":{"description":"String conversation overloader","tags":{"return":["string","Returns the parsed template"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"parse","docblock":{"description":"Parses the template variables","tags":{"return":["string","Returns the parsed template"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"save","docblock":{"description":"Saves the contents to a file","tags":{"param":[["string","Name of the file (will be: '.\/apidump\/output\/XXX.YYY')"]],"return":["boolean","Returns true if the file was saved with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"","extends":"","implements":[],"docblock":{"description":"Template class","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Dev","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}},"\\Layout":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Loads a new template in layout mode\r\n\r\nThis causes the template cache to be invoked and loads in 'header' and 'footer'\r\nwhich then will be declared as variables.","tags":{"param":[["string","The name of the template"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"","extends":"\\Template","implements":[],"docblock":{"description":"Layout class\r\n\r\nLayout wrapper class around the base template, see the\r\nconstructor for more information.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Dev","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}},"\\HashRegistry":{"reuses":[],"constants":[],"properties":[{"property":"hashes","docblock":{"description":"Stored hashes","tags":{"var":"\\stdClass"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"outputdir","docblock":{"description":"Output directory","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, this will attempt to see if the file 'api_hashes.json'\r\nexists within the output directory, and load it.","tags":{"param":[["string","The output directory"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__destruct","docblock":{"description":"Destructor, saves the hashes to the 'api_hashes.json' file if possible","tags":{}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"hash","docblock":{"description":"Gets a hash (or generates a new one)","tags":{"param":[["string","The type ('constant', 'function', 'class', 'interface', 'trait', 'property', 'method' or 'namespace'), note that class constants uses 'constant'"],["string","The meta information"],["string","The file of where the object exists (fx. 'library\/Tuxxedo\/Bootstrap.php'), this is case sensitive"]],"return":["string","Returns a file name without an extension (fx. 'constant-tuxxedo-library-123456') or false on failure"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getHashInfo","docblock":{"description":"Generates hash info based on the name of the object and\r\nits meta data.","tags":{"param":[["string","The type ('constant', 'function', 'class', 'interface', 'trait', 'property', 'method' or 'namespace'), note that class constants uses 'constant'"],["array","The meta information"],["string","The file of where the object exists (fx. 'library\/Tuxxedo\/Bootstrap.php'), this is case sensitive"]],"return":["array","Returns an array containing the hash values, returns false on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"","extends":"","implements":[],"docblock":{"description":"Hash registry\r\n\r\nThis class is a local cache for the hashes generated.\r\n\r\nIt will attempt to load the 'api_hashes.json' file if it\r\nexists in the output directory.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Dev","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"dev\/scripts\/check_dm_phrases.php":{"namespaces":[],"aliases":{"\\DevTools\\Utilities\\IO":"","\\Tuxxedo\\Datamanager":""},"classes":[],"interfaces":[],"traits":[],"constants":[],"functions":[]},"dev\/scripts\/compile_dev.php":{"namespaces":[],"aliases":{"\\DevTools\\Utilities\\IO":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Template\\Compiler":""},"classes":[],"interfaces":[],"traits":[],"constants":[],"functions":[]},"dev\/scripts\/includes\/bootstrap.php":{"namespaces":[],"aliases":{"\\Tuxxedo\\Registry":""},"classes":[],"interfaces":[],"traits":[],"constants":{"TUXXEDO_DIR":{"namespace":"","docblock":{"description":"Sets the path to where the root script is","tags":{"var":"string","since":"1.1.0"}},"metadata":{"docblock":true}},"TUXXEDO_LIBRARY":{"namespace":"","docblock":{"description":"Sets the library path","tags":{"var":"string","since":"1.1.0"}},"metadata":{"docblock":true}},"TIMENOW_UTC":{"namespace":"","docblock":{"description":"Set the UTC time constant","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},"TUXXEDO_PREFIX":{"namespace":"","docblock":{"description":"Set database table prefix constant","tags":{"var":"string","since":"1.1.0"}},"metadata":{"docblock":true}}},"functions":[]},"dev\/scripts\/sync_templates.php":{"namespaces":[],"aliases":{"\\DevTools\\Utilities\\IO":""},"classes":[],"interfaces":[],"traits":[],"constants":[],"functions":[]},"dev\/tools\/datastore.php":{"namespaces":[],"aliases":{"\\DevTools\\Utilities":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Helper":""},"classes":[],"interfaces":[],"traits":[],"constants":{"SCRIPT_NAME":{"namespace":"","docblock":{"description":"Set script name","tags":{"var":"string"}},"metadata":{"docblock":true}}},"functions":[]},"dev\/tools\/includes\/bootstrap.php":{"namespaces":[],"aliases":{"\\DevTools\\Bootstrap":"","\\Tuxxedo\\Registry":"","\\Tuxxedo\\Template":""},"classes":[],"interfaces":[],"traits":[],"constants":{"TUXXEDO_DIR":{"namespace":"","docblock":{"description":"Sets the path to where the root script is","tags":{"var":"string"}},"metadata":{"docblock":true}},"TUXXEDO_LIBRARY":{"namespace":"","docblock":{"description":"Sets the library path","tags":{"var":"string"}},"metadata":{"docblock":true}}},"functions":[]},"dev\/tools\/index.php":{"namespaces":[],"aliases":[],"classes":[],"interfaces":[],"traits":[],"constants":{"SCRIPT_NAME":{"namespace":"","docblock":{"description":"Set script name","tags":{"var":"string"}},"metadata":{"docblock":true}}},"functions":[]},"dev\/tools\/intl.php":{"namespaces":[],"aliases":{"\\DevTools\\Utilities":"","\\Tuxxedo\\Datamanager":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Input":""},"classes":[],"interfaces":[],"traits":[],"constants":{"SCRIPT_NAME":{"namespace":"","docblock":{"description":"Set script name","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}}},"functions":[]},"dev\/tools\/options.php":{"namespaces":[],"aliases":{"\\DevTools\\Utilities":"","\\Tuxxedo\\Datamanager":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Input":""},"classes":[],"interfaces":[],"traits":[],"constants":{"SCRIPT_NAME":{"namespace":"","docblock":{"description":"Set script name","tags":{"var":"string"}},"metadata":{"docblock":true}}},"functions":[]},"dev\/tools\/sessions.php":{"namespaces":[],"aliases":{"\\DevTools\\User":"","\\DevTools\\Utilities":"","\\Tuxxedo\\Datamanager":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Utilities":"CoreUtilities"},"classes":[],"interfaces":[],"traits":[],"constants":{"SCRIPT_NAME":{"namespace":"","docblock":{"description":"Set script name","tags":{"var":"string"}},"metadata":{"docblock":true}}},"functions":[{"function":"cleanup_cron","namespace":"","docblock":{"description":"Cleanup cronjob\r\n\r\nDeletes all inactive sessions (only 'marked' as expired)","tags":{"param":[["integer","Reference to the affected rows by this cronjob"]],"return":["void","No value is returned"],"since":"1.2.0"}},"metadata":{"docblock":true}}]},"dev\/tools\/styles.php":{"namespaces":[],"aliases":{"\\DevTools\\Utilities":"","\\Tuxxedo\\Datamanager":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Input":""},"classes":[],"interfaces":[],"traits":[],"constants":{"SCRIPT_NAME":{"namespace":"","docblock":{"description":"Set script name","tags":{"var":"string","since":"1.1.0"}},"metadata":{"docblock":true}}},"functions":[]},"dev\/tools\/tools.php":{"namespaces":[],"aliases":{"\\DevTools\\Test":"","\\DevTools\\User":"","\\DevTools\\Utilities":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Helper":"","\\Tuxxedo\\Input":"","\\Tuxxedo\\Template\\Compiler":""},"classes":[],"interfaces":[],"traits":[],"constants":{"SCRIPT_NAME":{"namespace":"","docblock":{"description":"Set script name","tags":{"var":"string"}},"metadata":{"docblock":true}}},"functions":[]},"dev\/tools\/users.php":{"namespaces":[],"aliases":{"\\DevTools\\User":"","\\DevTools\\Utilities":"","\\Tuxxedo\\Datamanager":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Input":""},"classes":[],"interfaces":[],"traits":[],"constants":{"SCRIPT_NAME":{"namespace":"","docblock":{"description":"Set script name","tags":{"var":"string","since":"1.1.0"}},"metadata":{"docblock":true}}},"functions":[]},"index.php":{"namespaces":[],"aliases":{"\\Tuxxedo\\Template\\Layout":"","\\Tuxxedo\\Version":""},"classes":[],"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/DevTools\/Bootstrap.php":{"namespaces":{"\\DevTools":{"docblock":{"description":"Developmental Tools namespace. This namespace is for all development\r\ntool related routines, as used by \/dev\/tools.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools"}},"metadata":{"docblock":true}}},"aliases":{"\\DevTools\\Style":"","\\Tuxxedo\\Input":"","\\Tuxxedo\\Registry":"","\\Tuxxedo\\Template":"","\\Tuxxedo\\Version":""},"classes":{"\\DevTools\\Bootstrap":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"preInit","docblock":{"description":"Pre initializer","tags":{"param":[["integer","The flags passed to the bootstraper initializer method"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"postInit","docblock":{"description":"Post initializer","tags":{"param":[["\\Tuxxedo\\Registry","The Tuxxedo registry object"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\DevTools","extends":"\\Tuxxedo\\Bootstrap","implements":[],"docblock":{"description":"Development Tools bootstraper, this integrates itself with the\r\nglobal bootstraper by using its hooks and other custom overrides\r\nthats needed specifically for the DevTools.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/DevTools\/Session.php":{"namespaces":{"\\DevTools":{"docblock":{"description":"Developmental Tools namespace. This namespace is for all development\r\ntool related routines, as used by \/dev\/tools.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Registry":""},"classes":{"\\DevTools\\Session":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"invoke","docblock":{"description":"Magic method called when creating a new instance of the\r\nobject from the registry","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["array","The configuration array"]],"return":["object","Object instance"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\DevTools","extends":"\\Tuxxedo\\Session","implements":[],"docblock":{"description":"DevTools session interface override. This class overrides\r\nthe options and 'bakes' them into the class so that it can\r\nbe used without loading the datastore.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools","since":"1.1.0","see":["\\Tuxxedo\\Session"]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/DevTools\/Style.php":{"namespaces":{"\\DevTools":{"docblock":{"description":"Developmental Tools namespace. This namespace is for all development\r\ntool related routines, as used by \/dev\/tools.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Registry":"","\\Tuxxedo\\Style\\Storage":""},"classes":{"\\DevTools\\Style":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new style object","tags":{}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"invoke","docblock":{"description":"Magic method called when creating a new instance of the\r\nobject from the registry","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["array","The configuration array"],["array","The options array"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"getSidebarWidget","docblock":{"description":"Gets a sidebar widget template","tags":{"param":[["boolean","Reference to check whether a hook was called or not"]],"return":["boolean","Returns the template contents on success and boolean false on failure"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\DevTools","extends":"\\Tuxxedo\\Style","implements":[],"docblock":{"description":"Development Tools styling class, this class overrides the\r\ndefault styling class so we can overload the default style\r\nstorage engines and use our own.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/DevTools\/Style\/Storage\/DevTools.php":{"namespaces":{"\\DevTools\\Style\\Storage":{"docblock":{"description":"Development tools style storage namespace. This namespace is for the special\r\noverrides used when loading templates.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Registry":"","\\Tuxxedo\\Style":"","\\Tuxxedo\\Style\\Storage\\Filesystem":""},"classes":{"\\DevTools\\Style\\Storage\\DevTools":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new storage engine","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["\\Tuxxedo\\Style","Reference to the style object"],["object","Object reference to the templates data table"]]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"exists","docblock":{"description":"Checks whether a template file exists on the file system","tags":{"param":[["string","The name of the template to check"]],"return":["boolean","Returns true if the template file exists otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\DevTools\\Style\\Storage","extends":"\\Tuxxedo\\Style\\Storage\\Filesystem","implements":[],"docblock":{"description":"Development Tools style storage, this class overrides the\r\ndefault filesystem storage engine so we can define our own\r\ntemplate location.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/DevTools\/Test.php":{"namespaces":{"\\DevTools":{"docblock":{"description":"Developmental Tools namespace. This namespace is for all development\r\ntool related routines, as used by \/dev\/tools.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\DevTools\\Test":{"reuses":[],"constants":[{"constant":"OPT_REQUIRED","namespace":"\\DevTools","docblock":{"description":"Option constant - test is required","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"OPT_OPTIONAL","namespace":"\\DevTools","docblock":{"description":"Option constant - test is optional","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"OPT_EXTENSION","namespace":"\\DevTools","docblock":{"description":"Option constant - tests a PHP extension","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"OPT_VERSION","namespace":"\\DevTools","docblock":{"description":"Option constant - tests versioning","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"OPT_FUNCTION","namespace":"\\DevTools","docblock":{"description":"Option constant - tests function existance","tags":{"var":"integer"}},"metadata":{"docblock":true}}],"properties":[{"property":"options","docblock":{"description":"Option bitfield","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"argv","docblock":{"description":"Testing arguments","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new test case","tags":{"param":[["integer","The options bitfield, using the OPT_* class constants"],["array","The arguments that needs to be tested against"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isRequired","docblock":{"description":"Check if a test is required","tags":{"return":["boolean","Returns true if the test is required otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isOptional","docblock":{"description":"Check if a test is optional","tags":{"return":["boolean","Returns true if the test is optional otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getOptions","docblock":{"description":"Gets the option flags assigned for this test","tags":{"return":["integer","Returns the option flags assigned for this test"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"test","docblock":{"description":"Executes the test case","tags":{"return":["boolean","Returns true if the test passed, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\DevTools","extends":"","implements":[],"docblock":{"description":"Minor testing class, used for testing availability for\r\nvarious requirement checks","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/DevTools\/User.php":{"namespaces":{"\\DevTools":{"docblock":{"description":"Developmental Tools namespace. This namespace is for all development\r\ntool related routines, as used by \/dev\/tools.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager":"","\\Tuxxedo\\Registry":""},"classes":{"\\DevTools\\User":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructor","tags":{}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\DevTools","extends":"\\Tuxxedo\\User","implements":[],"docblock":{"description":"DevTools user class, this class is used to bypass some of the\r\nrestrictions the core user class prohibits in order to ease\r\nthe code for some of the development tools and testing.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools","since":"1.1.0","see":["\\Tuxxedo\\User"]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/DevTools\/Utilities.php":{"namespaces":{"\\DevTools":{"docblock":{"description":"Developmental Tools namespace. This namespace is for all development\r\ntool related routines, as used by \/dev\/tools.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\DevTools\\Utilities":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"redirect","docblock":{"description":"Redirect using a template\r\n\r\nIf the timeout is set to 0, then a header redirect will be\r\nissued instead, thrus no template rendered.\r\n\r\nThis function terminates the script.","tags":{"param":[["string","The message to show to the user while redirecting"],["string","The redirect location"],["integer","The timeout in seconds (before redirecting)"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"headerRedirect","docblock":{"description":"Redirect directly using a header call\r\n\r\nThis function terminates the script.","tags":{"param":[["string","The redirect location"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\DevTools","extends":"","implements":[],"docblock":{"description":"Utilities class wrapper. This class wraps around the previously\r\ndeclared prodecural functions, which now exists as static methods\r\nfor primarily autoloading reasoning.\r\n\r\nUnlike the \\Tuxxedo\\Utilities class, this one is specific for\r\nthe DevTools application and contains mainly UI related methods.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/DevTools\/Utilities\/IO.php":{"namespaces":{"\\DevTools\\Utilities":{"docblock":{"description":"Development utilities namespace. This namespace contains various\r\nrandom classes for the code in \/dev\/.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Version":""},"classes":{"\\DevTools\\Utilities\\IO":{"reuses":[],"constants":[{"constant":"TAG_START","namespace":"\\DevTools\\Utilities","docblock":{"description":"Tag mode constant - indicates start of a tag","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"TAG_END","namespace":"\\DevTools\\Utilities","docblock":{"description":"Tag mode constant - indicates end of a tag","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"STYLE_BOLD","namespace":"\\DevTools\\Utilities","docblock":{"description":"Style mode constant - indicates bold text (web)","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"STYLE_ITALIC","namespace":"\\DevTools\\Utilities","docblock":{"description":"Style mode constant - indicates italic text (web)","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"STYLE_UNDERLINE","namespace":"\\DevTools\\Utilities","docblock":{"description":"Style mode constant - indicates underlined text (web)","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"STYLE_HIDDEN_DOT","namespace":"\\DevTools\\Utilities","docblock":{"description":"Style mode constant - indicates a hidden 'dot' for \\DevTools\\Utilities\\IO::li() (cli)","tags":{"var":"integer","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"depth","docblock":{"description":"Nesting level of block elements","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"isCli","docblock":{"description":"Checks if the script is running using a console","tags":{"return":["boolean","Returns true if the client is a console, otherwise false for webservers"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"signature","docblock":{"description":"Engine signature line","tags":{"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"input","docblock":{"description":"Gets an input variable, this uses argv in CLI and $_GET in web\r\n\r\nIn CLI, arguments must be prefixed with a hyphen ('-') and have\r\na space (ASCII 0x20) or it will return the default value.\r\n\r\n<code>\r\n\/\/CLI: `php .\/script.php -arg1 Hello -arg2 World'\r\n\/\/Web: http:\/\/<url>\/script.php?arg1=Hello&arg2=World\r\n\r\n\/\/Hello World\r\necho IO::input('arg1') . ' ' . IO::input('arg2');\r\n<\/code>","tags":{"param":[["string","The argument to get"],["mixed","The default value used on error"]],"return":["string","Returns the value as a string, and false if the argument was not found, arguments like `-test' returns true if no value is present for CLI"],"changelog":[["1.2.0","A value is no longer required for a CLI argument for it to be considered valid"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"error","docblock":{"description":"Prints a serve error message","tags":{"param":[["string","The error message"],["boolean","Whether or not to abort execution of the script (defaults to true)"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"headline","docblock":{"description":"Writes a headline","tags":{"param":[["string","The headline text"],["integer","The headline size (web only), for CLI this works as the number of EOL's to apply"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"ul","docblock":{"description":"Starts or end writing an unordered list","tags":{"param":[["integer","Either TAG_START or TAG_END class constants as a boolean"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"li","docblock":{"description":"Writes a list item, optionally using a style","tags":{"param":[["string","The list item text"],["integer","The style bitfield, consisting of the STYLE_XXX constants"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"text","docblock":{"description":"Writes a text string, optionally using a style","tags":{"param":[["string","The text"],["integer","The style bitfield, consisting of the STYLE_XXX constants"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"eol","docblock":{"description":"Repeats an end of line character","tags":{"param":[["integer","The times to repeat an EOL"]],"return":["string","Returns the EOLs as a string"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"style","docblock":{"description":"Styles a text string","tags":{"param":[["string","The text buffer"],["integer","The style bitfield, consisting of the STYLE_XXX constants"]],"return":["string","Returns the style string"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\DevTools\\Utilities","extends":"","implements":[],"docblock":{"description":"Input\/Output writer. This class is designed to make basic scripts\r\nwork in CLI and in a browser without having to make alot of if\/else\r\nconstructs.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"DevTools","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/DevTools\/functions.php":{"namespaces":[],"aliases":{"\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":"","\\Tuxxedo\\User":"","\\Tuxxedo\\Utilities":""},"classes":[],"interfaces":[],"traits":[],"constants":[],"functions":[{"function":"recursive_glob","namespace":"","docblock":{"description":"A recursive glob function","tags":{"param":[["string","The glob expression to execute"]],"return":["array","Returns an array containing the matched elements and false on error"]}},"metadata":{"docblock":true}},{"function":"test_login","namespace":"","docblock":{"description":"Tests a log in without interfering with the current session","tags":{"param":[["string","The user identifier"],["string","The user password"],["string","The user identifier field"]],"return":["boolean","Returns true if the login was successful and otherwise false"],"since":"1.1.0"}},"metadata":{"docblock":true}},{"function":"devtools_exception_handler","namespace":"","docblock":{"description":"Extended exception handler","tags":{"param":[["\\Exception","The exception to handle"]],"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"docblock":true}},{"function":"devtools_auth_handler","namespace":"","docblock":{"description":"Authentication handler\r\n\r\nThis function handles all perspectives of the DevTools authentication (both\r\nlog in and log out) and all the things in between.","tags":{"return":["void","No value is returned"],"since":"1.2.0"}},"metadata":{"docblock":true}},{"function":"page","namespace":"","docblock":{"description":"Generates code to print a page","tags":{"param":[["string","The template name to print"]],"return":["void","No value is returned"]}},"metadata":{"docblock":true}}]},"library\/DevTools\/functions_options.php":{"namespaces":[],"aliases":{"\\Tuxxedo\\Registry":""},"classes":[],"interfaces":[],"traits":[],"constants":[],"functions":[{"function":"options_categories_dropdown","namespace":"","docblock":{"description":"Generates the markup for the available option categories","tags":{"param":[["string","The current option category, if any"]],"return":["string","Returns the markup code for the option categories"],"since":"1.1.0"}},"metadata":{"docblock":true}},{"function":"options_categorize","namespace":"","docblock":{"description":"Categorizes the a list of options","tags":{"param":[["array","The options to categorize, uses the key as option name, and value as an array where an index named 'category' must exists"]],"return":["array","Returns the categorized array"],"since":"1.1.0"}},"metadata":{"docblock":true}},{"function":"var_dump_option","namespace":"","docblock":{"description":"Returns a var_dump() a-like syntax for an option\r\nand its datatype","tags":{"param":[["string","The option datatype"],["string","The option value"],["boolean","Whether to escape HTML characters for string values"]],"return":["string","Returns a string containing the datatype and its value and 'unknown' on error"],"since":"1.1.0"}},"metadata":{"docblock":true}},{"function":"var_typecast_option","namespace":"","docblock":{"description":"Converts a value to an option type","tags":{"param":[["string","The one character option type: b, i etc."],["string","The value to convert"]],"return":["string","Converts the value into the desired type, and string for unknown types"],"since":"1.1.0"}},"metadata":{"docblock":true}}]},"library\/DevTools\/functions_widget.php":{"namespaces":[],"aliases":{"\\DevTools\\Style":"","\\Tuxxedo\\Input":"","\\Tuxxedo\\Registry":""},"classes":[],"interfaces":[],"traits":[],"constants":[],"functions":[{"function":"widget_hook_datastore","namespace":"","docblock":{"description":"Widget hook function - datastore","tags":{"param":[["\\DevTools\\Style","The Devtools style object"],["\\Tuxxedo\\Registry","The registry reference"],["string","The template name of the widget"]],"return":["string","Returns the compiled sidebar widget"],"since":"1.2.0"}},"metadata":{"docblock":true}},{"function":"widget_hook_styles","namespace":"","docblock":{"description":"Widget hook function - styles","tags":{"param":[["\\DevTools\\Style","The Devtools style object"],["\\Tuxxedo\\Registry","The registry reference"],["string","The template name of the widget"]],"return":["string","Returns the compiled sidebar widget"],"since":"1.1.0"}},"metadata":{"docblock":true}},{"function":"widget_hook_intl","namespace":"","docblock":{"description":"Widget hook function - intl","tags":{"param":[["\\DevTools\\Style","The Devtools style object"],["\\Tuxxedo\\Registry","The registry reference"],["string","The template name of the widget"]],"return":["string","Returns the compiled sidebar widget"],"since":"1.2.0"}},"metadata":{"docblock":true}},{"function":"widget_hook_sessions","namespace":"","docblock":{"description":"Widget hook function - sessions","tags":{"param":[["\\DevTools\\Style","The Devtools style object"],["\\Tuxxedo\\Registry","The registry reference"],["string","The template name of the widget"]],"return":["string","Returns the compiled sidebar widget"],"since":"1.1.0"}},"metadata":{"docblock":true}},{"function":"widget_hook_users","namespace":"","docblock":{"description":"Widget hook function - users","tags":{"param":[["\\DevTools\\Style","The Devtools style object"],["\\Tuxxedo\\Registry","The registry reference"],["string","The template name of the widget"]],"return":["string","Returns the compiled sidebar widget"],"since":"1.1.0"}},"metadata":{"docblock":true}}]},"library\/Tuxxedo\/Bootstrap.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datastore":"","\\Tuxxedo\\LocalCache":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Bootstrap":{"reuses":[],"constants":[{"constant":"MODE_MINIMAL","namespace":"\\Tuxxedo","docblock":{"description":"Bootstrap mode - Minimal","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"MODE_NORMAL","namespace":"\\Tuxxedo","docblock":{"description":"Bootstrap mode - Normal","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"MODE_CUSTOM","namespace":"\\Tuxxedo","docblock":{"description":"Bootstrap mode - Custom","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FLAG_CORE","namespace":"\\Tuxxedo","docblock":{"description":"Loader flag - Core","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FLAG_DATE","namespace":"\\Tuxxedo","docblock":{"description":"Loader flag - Date","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FLAG_DATABASE","namespace":"\\Tuxxedo","docblock":{"description":"Loader flag - Database","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FLAG_DATASTORE","namespace":"\\Tuxxedo","docblock":{"description":"Loader flag - Datastore","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FLAG_INTL","namespace":"\\Tuxxedo","docblock":{"description":"Loader flag - Internationalization","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FLAG_OPTIONS","namespace":"\\Tuxxedo","docblock":{"description":"Loader flag - Options","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FLAG_STYLE","namespace":"\\Tuxxedo","docblock":{"description":"Loader flag - Style","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FLAG_USER","namespace":"\\Tuxxedo","docblock":{"description":"Loader flag - User","tags":{"var":"integer"}},"metadata":{"docblock":true}}],"properties":[{"property":"loaded","docblock":{"description":"Holds which elements thats been loaded (flags)","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}},{"property":"hooks","docblock":{"description":"Holds the registered hooks","tags":{"var":"array","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}},{"property":"preloadables","docblock":{"description":"Holds the elements that should be preloaded","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}},{"property":"flags","docblock":{"description":"Holds the various flags supported","tags":{"var":"array","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"setPreloadables","docblock":{"description":"Sets elements that should be preloaded by the next init call","tags":{"param":[["string","The type to preloadables for"],["array","The elements to preload"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"setHook","docblock":{"description":"Hooks into the initilization code and runs a callback\r\nbefore the default code is executed.\r\n\r\nIf the callback returns true, then the flag will be marked\r\nas initialized, otherwise the default code is executed.\r\n\r\nTo reset a hook, then simply pass NULL as the callback. This\r\nunregisters ALL hooks registered to that paticular flag.","tags":{"param":[["integer","The loader flag, this cannot be a bitmask"],["callback","The loader callback"],["string","The index of the preloadables, if any to send to the callback"]],"return":["void","No value is returned"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"init","docblock":{"description":"Initializes the bootstraper","tags":{"param":[["integer","The bootstraper mode"],["integer","The loader flags, this only have an effect on custom bootstraper mode"]],"return":["void","No value is returned"],"changelog":[["1.2.0","After a hook is executed, the preloadables is no longer unset, but reset to an array"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"","implements":[],"docblock":{"description":"Bootstraper, this class works as an encapsulated and easier way\r\nto write working bootstrapers while also not having to remember\r\nstartup orders and other similar things that can cause confusion.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":{"TUXXEDO_PREFIX":{"namespace":"","docblock":{"description":"Set database table prefix constant","tags":{"var":"string"}},"metadata":{"docblock":true}},"TIMENOW_UTC":{"namespace":"","docblock":{"description":"Current time constant","tags":{"var":"integer"}},"metadata":{"docblock":true}}},"functions":[]},"library\/Tuxxedo\/Cookie.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Cookie":{"reuses":[],"constants":[],"properties":[{"property":"options","docblock":{"description":"The cookie options, such as prefix, path etc.","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"invoke","docblock":{"description":"Magic method called when creating a new instance of the\r\nobject from the registry","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["array","The configuration array"]],"return":["object","Object instance"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"get","docblock":{"description":"Gets a cookie","tags":{"param":[["string","Cookie name"],["boolean","Whether to include the cookie prefix or not, defaults to true"]],"return":["mixed","Returns the cookie value on success, or null on failure"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"set","docblock":{"description":"Sets a cookie","tags":{"param":[["string","Cookie name"],["mixed","Cookie value"],["boolean","Whether to include the cookie prefix or not, defaults to true"],["array","Options, if overridding any default ones (Must contain: 'expires' (integer), 'path' (string), 'domain' (string) & 'secure' (boolean))"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"offsetExists","docblock":{"description":"Checks whether a cookie is available","tags":{"param":[["scalar","The information row name to check"]],"return":["boolean","Returns true if the information is stored, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetGet","docblock":{"description":"Gets a cookie value","tags":{"param":[["scalar","The information row name to get"]],"return":["mixed","Returns the information value, and NULL if the value wasn't found"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetSet","docblock":{"description":"Sets a new cookie","tags":{"param":[["scalar","The information row name to set"],["mixed","The new\/update value for this row"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetUnset","docblock":{"description":"Deletes a cookie","tags":{"param":[["scalar","The information row name to delete"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":["\\Tuxxedo\\Design\\Invokable"],"docblock":{"description":"Cookie Jar, this is a basic OO wrapper for cookies, it shares\r\nthe same globals as the session class, although they can be\r\noverridden using this interface per 'set' call.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":"","\\Tuxxedo\\Exception":""},"classes":{"\\Tuxxedo\\Database":{"reuses":[],"constants":[],"properties":[{"property":"registry","docblock":{"description":"Private instance to the Tuxxedo registry","tags":{"var":"\\Tuxxedo\\Registry","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"link","docblock":{"description":"Link pointer, this contains the internal link\r\nto the database from the driver","tags":{"var":"mixed"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"affected_rows","docblock":{"description":"Affected rows by last successful query that changed\r\ndata in the database","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"debug","docblock":{"description":"Whether or not debug mode is enabled","tags":{"var":"boolean","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"delayed","docblock":{"description":"Whether the database connection still is delayed\r\nor not","tags":{"var":"boolean"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"queries","docblock":{"description":"List of executed queries during execution","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"configuration","docblock":{"description":"Database specific configuration array","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"shutdown_queries","docblock":{"description":"List of shutdown queries that will be executed\r\nwhen then destructor is called","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"loaded_drivers","docblock":{"description":"List of loaded drivers used for caching in the\r\nspecial required cases where more than one driver\r\nhave to be loaded","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Default constructor for a new database instance","tags":{"param":[["array","Configuration array, containing the 'application' and 'database' indices"]],"throws":[["\\Tuxxedo\\Exception\\Basic","If the database connection fails, a basic exception will be thrown"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__destruct","docblock":{"description":"Default destructor, this simply closes a database connection\r\nand executes any registered shutdown queries there might be","tags":{}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"invoke","docblock":{"description":"Magic method called when creating a new instance of the\r\nobject from the registry","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["array","The configuration array"]],"return":["object","Object instance"],"throws":[["\\Tuxxedo\\Exception\\Basic","Only thrown on poorly a configured database section in the configuration file"]]}},"metadata":{"final":true,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"factory","docblock":{"description":"Constructs a new database instance","tags":{"param":[["string","Driver name"],["array","Database specific configuration array"]],"return":["\\Tuxxedo\\Database","Returns a new database instance"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if loading of a driver should fail for some reason"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"cfg","docblock":{"description":"Returns a configuration value","tags":{"param":[["string","The value from the configuration array to fetch"]],"return":["string","Returns the value from the database configuration array, and false on error"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"equery","docblock":{"description":"Escape all arguments set to the query, prior to formatting","tags":{"param":[["string","SQL to execute"],["mixed","Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf"]],"return":["boolean|object","Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed"],"throws":[["\\Tuxxedo\\Exception\\SQL","If the SQL should fail for whatever reason, an exception is thrown"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getAffectedRows","docblock":{"description":"Gets the affected rows by last successful query that changed\r\ndata in the database","tags":{"return":["integer","Returns the affected rows"],"since":"1.1.0","changelog":[["1.1.0","This method is no longer a part of the driver interface"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setShutdownQuery","docblock":{"description":"Sets a new query to execute at shutdown","tags":{"param":[["string","The SQL string to execute"],["mixed","Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getNumQueries","docblock":{"description":"Gets the number of queries executed during this request","tags":{"return":["integer","Number of queries executed"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getQueries","docblock":{"description":"Gets the executed queries during this request","tags":{"return":["array","A list of executed SQL queries"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"","implements":["\\Tuxxedo\\Database\\Driver","\\Tuxxedo\\Design\\Invokable"],"docblock":{"description":"Abstract database class\r\n\r\nEvery main driver class must extend this class in order to be loadable\r\nand to comply with the database access layer interface. This also contains\r\nthe factory method used to instanciate a new database driver instance.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":true,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database\/Driver.php":{"namespaces":{"\\Tuxxedo\\Database":{"docblock":{"description":"Database Access Layer implementation. This namespace controls\r\nall access to the database, multiple drivers for the database\r\ncan be loaded at the same time, along with multiple database\r\nconnection, even to the same database.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":[],"interfaces":{"\\Tuxxedo\\Database\\Driver":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"isDriverSupported","docblock":{"description":"Checks if the current system supports the driver, if this\r\nmethod isn't called, a driver may start not function properly\r\non the system","tags":{"return":["boolean","True if driver is supported, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"connect","docblock":{"description":"Connect to a database, if no connection isn't already\r\nactive","tags":{"param":[["array","Change the configuration and use this new configuration to connect with"]],"return":["boolean","True if a successful connection was made"],"throws":[["\\Tuxxedo\\Exception\\Basic","If a database connection fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"close","docblock":{"description":"Close a database connection","tags":{"return":["boolean","True if the connection was closed, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isConnected","docblock":{"description":"Checks if a connection is active","tags":{"return":["boolean","True if a connection is currently active, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isLink","docblock":{"description":"Checks if a variable is a connection of the same type\r\nas the one used by the driver","tags":{"param":[["mixed","The variable to check"]],"return":["boolean","True if the variable type matches, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isPersistent","docblock":{"description":"Checks if the current connection is persistent","tags":{"return":["boolean","True if the connection is persistent, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isResult","docblock":{"description":"Checks if a variable is a result of the same type as\r\nthe one used by the driver","tags":{"param":[["mixed","The variable to check"]],"return":["boolean","True if the variable type matches, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getError","docblock":{"description":"Get the error message from the last occured error\r\nerror","tags":{"return":["string","The error message"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getErrno","docblock":{"description":"Get the error number from the last occured error","tags":{"return":["integer","The error number"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getInsertId","docblock":{"description":"Get the last insert id from last executed INSERT statement","tags":{"return":["integer","Returns the last insert id, and boolean false on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"escape","docblock":{"description":"Escape a piece of data using the database specific\r\nescape method","tags":{"param":[["mixed","The data to escape"]],"return":["string","Escaped data"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"query","docblock":{"description":"Executes a query and returns the result on SELECT\r\nstatements","tags":{"param":[["string","SQL to execute"]],"return":["boolean|object","Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed"],"throws":[["\\Tuxxedo\\Exception\\SQL","If the SQL should fail for whatever reason, an exception is thrown"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Database","extends":"","implements":[],"docblock":{"description":"Base database driver interface\r\n\r\nThis defines the driver structure of which functions a driver\r\nmust implement and how they should be called.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","changelog":[["1.2.0","Removed the 'getDriverRequirements()' method"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database\/Driver\/Mysql.php":{"namespaces":{"\\Tuxxedo\\Database\\Driver":{"docblock":{"description":"Database driver namespace, this contains all the main driver files. All\r\nsub classes are stored in their relevant sub namespace named after the\r\ndatabase driver.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Database":"","\\Tuxxedo\\Database\\Driver\\Mysql":"","\\Tuxxedo\\Debug":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Database\\Driver\\Mysql":{"reuses":[],"constants":[{"constant":"DRIVER_NAME","namespace":"\\Tuxxedo\\Database\\Driver","docblock":{"description":"Driver name","tags":{"var":"string"}},"metadata":{"docblock":true}}],"properties":[{"property":"link","docblock":{"description":"Link pointer, this contains the internal link\r\nto the database from the driver","tags":{"var":"resource"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"isDriverSupported","docblock":{"description":"Checks if the current system supports the driver, if this\r\nmethod isn't called, a driver may start not function properly\r\non the system","tags":{"return":["boolean","True if driver is supported, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"connect","docblock":{"description":"Connect to a database, if no connection isn't already\r\nactive","tags":{"param":[["array","Change the configuration and use this new configuration to connect with"]],"return":["boolean","True if a successful connection was made"],"throws":[["\\Tuxxedo\\Exception\\Basic","If a database connection fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"close","docblock":{"description":"Close a database connection","tags":{"return":["boolean","True if the connection was closed, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isConnected","docblock":{"description":"Checks if a connection is active","tags":{"return":["boolean","True if a connection is currently active, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isLink","docblock":{"description":"Checks if a variable is a connection of the same type\r\nas the one used by the driver","tags":{"param":[["mixed","The variable to check"]],"return":["boolean","True if the variable type matches, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isPersistent","docblock":{"description":"Checks if the current connection is persistent","tags":{"return":["boolean","True if the connection is persistent, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isResult","docblock":{"description":"Checks if a variable is a result of the same type as\r\nthe one used by the driver","tags":{"param":[["mixed","The variable to check"]],"return":["boolean","True if the variable type matches, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getError","docblock":{"description":"Get the error message from the last occured error\r\nerror","tags":{"return":["string","The error message"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getErrno","docblock":{"description":"Get the error number from the last occured error","tags":{"return":["integer","The error number"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getInsertId","docblock":{"description":"Get the last insert id from last executed INSERT statement","tags":{"return":["integer","Returns the last insert id, and boolean false on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"escape","docblock":{"description":"Escape a piece of data using the database specific\r\nescape method","tags":{"param":[["mixed","The data to escape"]],"return":["string","Escaped data"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"query","docblock":{"description":"Executes a query and returns the result on SELECT\r\nstatements","tags":{"param":[["string","SQL to execute"],["mixed","Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf"]],"return":["boolean|object","Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed"],"throws":[["\\Tuxxedo\\Exception\\SQL","If the SQL should fail for whatever reason, an exception is thrown"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Database\\Driver","extends":"\\Tuxxedo\\Database","implements":[],"docblock":{"description":"MySQL driver\r\n\r\nThis driver enables access to a MySQL 3+ based database using\r\nthe mysql database extension. If using MySQL 4.1+ the MySQLi\r\ndriver should be used as a better alternative for talking to\r\nMySQL","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","changelog":[["1.1.0","The casing of this class was changed to comply with the autoloader rules"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database\/Driver\/Mysql\/Result.php":{"namespaces":{"\\Tuxxedo\\Database\\Driver\\Mysql":{"docblock":{"description":"MySQL driver namespace, for driver components such as result statements\r\nand the like.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Database":""},"classes":{"\\Tuxxedo\\Database\\Driver\\Mysql\\Result":{"reuses":[],"constants":[],"properties":[{"property":"result","docblock":{"description":"The result resource","tags":{"var":"resource"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new result object","tags":{"param":[["\\Tuxxedo\\Database","A database instance"],["mixed","A database result, this must be delivered from the driver it was created from"]],"throws":[["\\Tuxxedo\\Exception\\Basic","If the result passed is from a different driver type, or if the result does not contain any results"]],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"free","docblock":{"description":"Frees the result from memory, and makes it unusable","tags":{"return":["boolean","Returns true if the result was freed, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getNumRows","docblock":{"description":"Get the number of rows in the result","tags":{"return":["integer","Returns the number of rows in the result, or zero on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchArray","docblock":{"description":"Fetch result with both associative and indexed indexes array","tags":{"return":["array","Returns an array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchAssoc","docblock":{"description":"Fetches the result and returns an associative array","tags":{"return":["array","Returns an associative array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchRow","docblock":{"description":"Fetches the result and returns an indexed array","tags":{"return":["array","Returns an indexed array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchObject","docblock":{"description":"Fetches the result and returns an object, with overloaded\r\nproperties for rows names","tags":{"return":["object","Returns an object with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"current","docblock":{"description":"Iterator method - current","tags":{"return":["mixed","Returns the current result"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Database\\Driver\\Mysql","extends":"\\Tuxxedo\\Database\\Result","implements":[],"docblock":{"description":"MySQL result class\r\n\r\nThis implements the result class for MySQL for Tuxxedo,\r\nthis contains methods to fetch, count result rows and\r\nsuch for working with a resultset","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","changelog":[["1.1.0","The casing of this class' namespace was changed to comply with the autoloader rules"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database\/Driver\/Mysqli.php":{"namespaces":{"\\Tuxxedo\\Database\\Driver":{"docblock":{"description":"Database driver namespace, this contains all the main driver files. All\r\nsub classes are stored in their relevant sub namespace named after the\r\ndatabase driver.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Database":"","\\Tuxxedo\\Database\\Driver\\Mysqli":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Database\\Driver\\Mysqli":{"reuses":[],"constants":[{"constant":"DRIVER_NAME","namespace":"\\Tuxxedo\\Database\\Driver","docblock":{"description":"Driver name","tags":{"var":"string"}},"metadata":{"docblock":true}}],"properties":[{"property":"link","docblock":{"description":"Link pointer, this contains the internal link\r\nto the database from the driver","tags":{"var":"mysqli"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"isDriverSupported","docblock":{"description":"Checks if the current system supports the driver, if this\r\nmethod isn't called, a driver may start not function properly\r\non the system","tags":{"return":["boolean","True if driver is supported, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"connect","docblock":{"description":"Connect to a database, if no connection isn't already\r\nactive","tags":{"param":[["array","Change the configuration and use this new configuration to connect with"]],"return":["boolean","True if a successful connection was made"],"throws":[["\\Tuxxedo\\Exception\\Basic","If a database connection fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"close","docblock":{"description":"Close a database connection","tags":{"return":["boolean","True if the connection was closed, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isConnected","docblock":{"description":"Checks if a connection is active","tags":{"return":["boolean","True if a connection is currently active, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isLink","docblock":{"description":"Checks if a variable is a connection of the same type\r\nas the one used by the driver","tags":{"param":[["mixed","The variable to check"]],"return":["boolean","True if the variable type matches, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isPersistent","docblock":{"description":"Checks if the current connection is persistent","tags":{"return":["boolean","True if the connection is persistent, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isResult","docblock":{"description":"Checks if a variable is a result of the same type as\r\nthe one used by the driver","tags":{"param":[["mixed","The variable to check"]],"return":["boolean","True if the variable type matches, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getError","docblock":{"description":"Get the error message from the last occured error\r\nerror","tags":{"return":["string","The error message"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getErrno","docblock":{"description":"Get the error number from the last occured error","tags":{"return":["integer","The error number"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getInsertId","docblock":{"description":"Get the last insert id from last executed INSERT statement","tags":{"return":["integer","Returns the last insert id, and boolean false on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"escape","docblock":{"description":"Escape a piece of data using the database specific\r\nescape method","tags":{"param":[["mixed","The data to escape"]],"return":["string","Escaped data"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"query","docblock":{"description":"Executes a query and returns the result on SELECT\r\nstatements","tags":{"param":[["string","SQL to execute"],["mixed","Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf"]],"return":["boolean|object","Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed"],"throws":[["\\Tuxxedo\\Exception\\SQL","If the SQL should fail for whatever reason, an exception is thrown"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Database\\Driver","extends":"\\Tuxxedo\\Database","implements":[],"docblock":{"description":"MySQL Improved driver\r\n\r\nThis driver enables access to a MySQL 4.1+ based database using\r\nthe mysqli database extension.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","changelog":[["1.1.0","The casing of this class was changed to comply with the autoloader rules"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database\/Driver\/Mysqli\/Result.php":{"namespaces":{"\\Tuxxedo\\Database\\Driver\\Mysqli":{"docblock":{"description":"MySQLi driver namespace, for driver components such as result statements\r\nand the like.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Database":""},"classes":{"\\Tuxxedo\\Database\\Driver\\Mysqli\\Result":{"reuses":[],"constants":[],"properties":[{"property":"result","docblock":{"description":"The result resource","tags":{"var":"\\mysqli_result"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new result object","tags":{"param":[["\\Tuxxedo\\Database","A database instance"],["mixed","A database result, this must be delivered from the driver it was created from"]],"throws":[["\\Tuxxedo\\Exception\\Basic","If the result passed is from a different driver type, or if the result does not contain any results"]],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"free","docblock":{"description":"Frees the result from memory, and makes it unusable","tags":{"return":["boolean","Returns true if the result was freed, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getNumRows","docblock":{"description":"Get the number of rows in the result","tags":{"return":["integer","Returns the number of rows in the result, or zero on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchArray","docblock":{"description":"Fetch result with both associative and indexed indexes array","tags":{"return":["array","Returns an array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchAssoc","docblock":{"description":"Fetches the result and returns an associative array","tags":{"return":["array","Returns an associative array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchRow","docblock":{"description":"Fetches the result and returns an indexed array","tags":{"return":["array","Returns an indexed array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchObject","docblock":{"description":"Fetches the result and returns an object, with overloaded\r\nproperties for rows names","tags":{"return":["object","Returns an object with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"current","docblock":{"description":"Iterator method - current","tags":{"return":["mixed","Returns the current result"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Database\\Driver\\Mysqli","extends":"\\Tuxxedo\\Database\\Result","implements":[],"docblock":{"description":"MySQL Improved result class\r\n\r\nThis implements the result class for MySQL Improved for\r\nTuxxedo, this contains methods to fetch, count result rows and\r\nsuch for working with a resultset.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","changelog":[["1.1.0","The casing of this class' namespace was changed to comply with the autoloader rules"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database\/Driver\/Pdo.php":{"namespaces":{"\\Tuxxedo\\Database\\Driver":{"docblock":{"description":"Database driver namespace, this contains all the main driver files. All\r\nsub classes are stored in their relevant sub namespace named after the\r\ndatabase driver.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Database":"","\\Tuxxedo\\Database\\Driver\\Pdo":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Database\\Driver\\Pdo":{"reuses":[],"constants":[{"constant":"DRIVER_NAME","namespace":"\\Tuxxedo\\Database\\Driver","docblock":{"description":"Driver name","tags":{"var":"string"}},"metadata":{"docblock":true}}],"properties":[{"property":"link","docblock":{"description":"Link pointer, this contains the internal link\r\nto the database from the driver","tags":{"var":"PDO"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"persistent","docblock":{"description":"Check if persistent connections is active, this\r\nis to \"fake\" the isPersistent() method and make\r\nthe return value correct","tags":{"var":"boolean"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"isDriverSupported","docblock":{"description":"Checks if the current system supports the driver, if this\r\nmethod isn't called, a driver may start not function properly\r\non the system","tags":{"return":["boolean","True if driver is supported, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"connect","docblock":{"description":"Connect to a database, if no connection isn't already\r\nactive","tags":{"param":[["array","Change the configuration and use this new configuration to connect with"]],"return":["boolean","True if a successful connection was made"],"throws":[["\\Tuxxedo\\Exception\\Basic","If a database connection fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"close","docblock":{"description":"Close a database connection","tags":{"return":["boolean","True if the connection was closed, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isConnected","docblock":{"description":"Checks if a connection is active","tags":{"return":["boolean","True if a connection is currently active, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isLink","docblock":{"description":"Checks if a variable is a connection of the same type\r\nas the one used by the driver","tags":{"param":[["mixed","The variable to check"]],"return":["boolean","True if the variable type matches, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isPersistent","docblock":{"description":"Checks if the current connection is persistent","tags":{"return":["boolean","True if the connection is persistent, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isResult","docblock":{"description":"Checks if a variable is a result of the same type as\r\nthe one used by the driver","tags":{"param":[["mixed","The variable to check"]],"return":["boolean","True if the variable type matches, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getError","docblock":{"description":"Get the error message from the last occured error\r\nerror","tags":{"return":["string","The error message"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getErrno","docblock":{"description":"Get the error number from the last occured error","tags":{"return":["integer","The error number"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getInsertId","docblock":{"description":"Get the last insert id from last executed INSERT statement","tags":{"return":["integer","Returns the last insert id, and boolean false on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"escape","docblock":{"description":"Escape a piece of data using the database specific\r\nescape method","tags":{"param":[["mixed","The data to escape"]],"return":["string","Escaped data"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"query","docblock":{"description":"Executes a query and returns the result on SELECT\r\nstatements","tags":{"param":[["string","SQL to execute"],["mixed","Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf"]],"return":["boolean|object","Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed"],"throws":[["\\Tuxxedo\\Exception\\SQL","If the SQL should fail for whatever reason, an exception is thrown"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Database\\Driver","extends":"\\Tuxxedo\\Database","implements":[],"docblock":{"description":"PDO abstraction driver\r\n\r\nThis driver lets you use PDO as backend instead of the vendor\r\nspecific extensions. Any loaded PDO driver may be used to create\r\na new instance.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","changelog":[["1.1.0","The casing of this class was changed to comply with the autoloader rules"],["1.1.0","This class now works flawlessly with SQLite"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database\/Driver\/Pdo\/Result.php":{"namespaces":{"\\Tuxxedo\\Database\\Driver\\Pdo":{"docblock":{"description":"PDO driver namespace, for driver components such as result statements\r\nand the like.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Database":"","\\Tuxxedo\\Exception":""},"classes":{"\\Tuxxedo\\Database\\Driver\\Pdo\\Result":{"reuses":[],"constants":[],"properties":[{"property":"result","docblock":{"description":"The result resource","tags":{"var":"\\PDOStatement"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new result object","tags":{"param":[["\\Tuxxedo\\Database","A database instance"],["mixed","A database result, this must be delivered from the driver it was created from"]],"throws":[["\\Tuxxedo\\Exception\\Basic","If the result passed is from a different driver type, or if the result does not contain any results"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"free","docblock":{"description":"Frees the result from memory, and makes it unusable","tags":{"return":["boolean","Returns true if the result was freed, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getNumRows","docblock":{"description":"Get the number of rows in the result","tags":{"return":["integer","Returns the number of rows in the result, or zero on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchArray","docblock":{"description":"Fetch result with both associative and indexed indexes array","tags":{"return":["array","Returns an array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchAssoc","docblock":{"description":"Fetches the result and returns an associative array","tags":{"return":["array","Returns an associative array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchRow","docblock":{"description":"Fetches the result and returns an indexed array","tags":{"return":["array","Returns an indexed array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchObject","docblock":{"description":"Fetches the result and returns an object, with overloaded\r\nproperties for rows names","tags":{"return":["object","Returns an object with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Database\\Driver\\Pdo","extends":"\\Tuxxedo\\Database\\Result","implements":[],"docblock":{"description":"PDO abstraction result driver\r\n\r\nThis implements the result class for PDO based subdrivers for\r\nTuxxedo, this contains methods to fetch, count result rows and\r\nsuch for working with a resultset.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","changelog":[["1.1.0","The casing of this class' namespace was changed to comply with the autoloader rules"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database\/Driver\/Sqlite.php":{"namespaces":{"\\Tuxxedo\\Database\\Driver":{"docblock":{"description":"Database driver namespace, this contains all the main driver files. All\r\nsub classes are stored in their relevant sub namespace named after the\r\ndatabase driver.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Database":"","\\Tuxxedo\\Database\\Driver\\Sqlite":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Database\\Driver\\Sqlite":{"reuses":[],"constants":[{"constant":"DRIVER_NAME","namespace":"\\Tuxxedo\\Database\\Driver","docblock":{"description":"Driver name","tags":{"var":"string"}},"metadata":{"docblock":true}}],"properties":[{"property":"link","docblock":{"description":"Link pointer, this contains the internal link\r\nto the database from the driver","tags":{"var":"resource"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"isDriverSupported","docblock":{"description":"Checks if the current system supports the driver, if this\r\nmethod isn't called, a driver may start not function properly\r\non the system","tags":{"return":["boolean","True if driver is supported, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"connect","docblock":{"description":"Connect to a database, if no connection isn't already\r\nactive","tags":{"param":[["array","Change the configuration and use this new configuration to connect with"]],"return":["boolean","True if a successful connection was made"],"throws":[["\\Tuxxedo\\Exception\\Basic","If a database connection fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"close","docblock":{"description":"Close a database connection","tags":{"return":["boolean","True if the connection was closed, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isConnected","docblock":{"description":"Checks if a connection is active","tags":{"return":["boolean","True if a connection is currently active, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isLink","docblock":{"description":"Checks if a variable is a connection of the same type\r\nas the one used by the driver","tags":{"param":[["mixed","The variable to check"]],"return":["boolean","True if the variable type matches, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isPersistent","docblock":{"description":"Checks if the current connection is persistent","tags":{"return":["boolean","True if the connection is persistent, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isResult","docblock":{"description":"Checks if a variable is a result of the same type as\r\nthe one used by the driver","tags":{"param":[["mixed","The variable to check"]],"return":["boolean","True if the variable type matches, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getError","docblock":{"description":"Get the error message from the last occured error\r\nerror","tags":{"return":["string","The error message"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getErrno","docblock":{"description":"Get the error number from the last occured error","tags":{"return":["integer","The error number"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getInsertId","docblock":{"description":"Get the last insert id from last executed INSERT statement","tags":{"return":["integer","Returns the last insert id, and boolean false on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"escape","docblock":{"description":"Escape a piece of data using the database specific\r\nescape method","tags":{"param":[["mixed","The data to escape"]],"return":["string","Escaped data"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"query","docblock":{"description":"Executes a query and returns the result on SELECT\r\nstatements","tags":{"param":[["string","SQL to execute"],["mixed","Genetic parameter for formatting, if two or more parameters are passed to the method, the sql will be formatted using sprintf"]],"return":["boolean|object","Returns a result object on SELECT statements, and boolean true otherwise if the statement was executed"],"throws":[["\\Tuxxedo\\Exception\\SQL","If the SQL should fail for whatever reason, an exception is thrown"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Database\\Driver","extends":"\\Tuxxedo\\Database","implements":[],"docblock":{"description":"SQLite driver\r\n\r\nThis driver enables access to a Sqlite 3+ based database using\r\nthe sqlite3 database extension. Engine does not in any way support\r\nolder versions of sqlite as only 3+ is supported.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database\/Driver\/Sqlite\/Result.php":{"namespaces":{"\\Tuxxedo\\Database\\Driver\\Sqlite":{"docblock":{"description":"SQLite driver namespace, for driver components such as result statements\r\nand the like.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Database":"","\\Tuxxedo\\Exception":""},"classes":{"\\Tuxxedo\\Database\\Driver\\Sqlite\\Result":{"reuses":[],"constants":[],"properties":[{"property":"result","docblock":{"description":"The result resource","tags":{"var":"sqlite3result"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new result object","tags":{"param":[["\\Tuxxedo\\Database","A database instance"],["mixed","A database result, this must be delivered from the driver it was created from"]],"throws":[["\\Tuxxedo\\Exception\\Basic","If the result passed is from a different driver type, or if the result does not contain any results"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"free","docblock":{"description":"Frees the result from memory, and makes it unusable","tags":{"return":["boolean","Returns true if the result was freed, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getNumRows","docblock":{"description":"Get the number of rows in the result","tags":{"return":["integer","Returns the number of rows in the result, or zero on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchArray","docblock":{"description":"Fetch result with both associative and indexed indexes array","tags":{"return":["array","Returns an array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchAssoc","docblock":{"description":"Fetches the result and returns an associative array","tags":{"return":["array","Returns an associative array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchRow","docblock":{"description":"Fetches the result and returns an indexed array","tags":{"return":["array","Returns an indexed array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchObject","docblock":{"description":"Fetches the result and returns an object, with overloaded\r\nproperties for rows names","tags":{"return":["object","Returns an object with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Database\\Driver\\Sqlite","extends":"\\Tuxxedo\\Database\\Result","implements":[],"docblock":{"description":"SQLite result class\r\n\r\nThis implements the result class for SQLite3 for\r\nTuxxedo, this contains methods to fetch, count result rows and\r\nsuch for working with a resultset.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database\/Result.php":{"namespaces":{"\\Tuxxedo\\Database":{"docblock":{"description":"Database Access Layer implementation. This namespace controls\r\nall access to the database, multiple drivers for the database\r\ncan be loaded at the same time, along with multiple database\r\nconnection, even to the same database.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":"","\\Tuxxedo\\Database":"","\\Tuxxedo\\Database\\Result":"","\\Tuxxedo\\Design":""},"classes":{"\\Tuxxedo\\Database\\Result":{"reuses":[],"constants":[{"constant":"FETCH_ROW","namespace":"\\Tuxxedo\\Database","docblock":{"description":"Fetch mode constant - row","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"FETCH_ARRAY","namespace":"\\Tuxxedo\\Database","docblock":{"description":"Fetch mode constant - array","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"FETCH_ASSOC","namespace":"\\Tuxxedo\\Database","docblock":{"description":"Fetch mode constant - assoc","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"FETCH_OBJECT","namespace":"\\Tuxxedo\\Database","docblock":{"description":"Fetch mode constant - object","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"instance","docblock":{"description":"The database instance from where the result was created","tags":{"var":"\\Tuxxedo\\Database"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"result","docblock":{"description":"The result resource","tags":{"var":"mixed"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"cached_num_rows","docblock":{"description":"Cached number of rows","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"position","docblock":{"description":"Current iterator position","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"fetch_mode","docblock":{"description":"Fetch mode","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"iterator_data","docblock":{"description":"Iterator data for drivers that need to emulate the iterator functionality","tags":{"var":"array","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new result object","tags":{"param":[["\\Tuxxedo\\Database","A database instance"],["mixed","A database result, this must be delivered from the driver it was created from"]],"throws":[["\\Tuxxedo\\Exception\\Basic","If the result passed is from a different driver type, or if the result does not contain any results"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__destruct","docblock":{"description":"Simple destructor to free result when the\r\nresult is unset.","tags":{}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setFetchType","docblock":{"description":"Sets the fetch mode","tags":{"param":[["integer","One of the FETCH_* constants"]],"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isFreed","docblock":{"description":"Checks whenever the result is freed or not","tags":{"return":["boolean","Returns true if the result is freed from memory, otherwise false"],"changelog":[["1.1.0","Prior this method was a part of the result interface"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"key","docblock":{"description":"Iterator method - key","tags":{"return":["integer","Returns the numeric position of the current row in the resultset"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"next","docblock":{"description":"Iterator method - next","tags":{"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"rewind","docblock":{"description":"Iterator method - rewind","tags":{"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"valid","docblock":{"description":"Iterator method - valid","tags":{"return":["boolean","Returns true if its still possible to continue iterating"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"current","docblock":{"description":"Iterator method - current","tags":{"return":["mixed","Returns the current result"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"count","docblock":{"description":"Countable method, this is essentially a wrapper for getNumRows()\r\nbut allows usage of:\r\n\r\n<pre>\r\nprintf('Number of results: %d', sizeof($result));\r\n<\/pre>","tags":{"return":["integer","Returns the number of rows in the result, and 0 on error"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetch","docblock":{"description":"General fetch method, this method uses the FETCH_* constants\r\nto determine in what format the returned data should be in","tags":{"return":["array|object","Returns an object or array based on the fetching mode"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Database","extends":"","implements":["\\Tuxxedo\\Design\\Iteratable","\\Tuxxedo\\Database\\Result\\Specification"],"docblock":{"description":"Abstract database result class\r\n\r\nEvery driver result class must extend this class in order to be loadable\r\nand to comply with the database access layer interface.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","changelog":[["1.2.0","The iteratable pattern is no longer a class, but an interface"],["1.1.0","This class now implements the Iteratable design pattern"]]}},"metadata":{"final":false,"abstract":true,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Database\/Result\/Specification.php":{"namespaces":{"\\Tuxxedo\\Database\\Result":{"docblock":{"description":"Database result namespace, this contains the driver specification\r\ninterface for database drivers to handle a result set.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":[],"interfaces":{"\\Tuxxedo\\Database\\Result\\Specification":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"free","docblock":{"description":"Frees the result from memory, and makes it unusable","tags":{"return":["boolean","Returns true if the result was freed, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getNumRows","docblock":{"description":"Get the number of rows in the result","tags":{"return":["integer","Returns the number of rows in the result, or zero on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchArray","docblock":{"description":"Fetch result with both associative and indexed indexes array","tags":{"return":["array","Returns an array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchAssoc","docblock":{"description":"Fetches the result and returns an associative array","tags":{"return":["array","Returns an associative array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchRow","docblock":{"description":"Fetches the result and returns an indexed array","tags":{"return":["array","Returns an indexed array with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetchObject","docblock":{"description":"Fetches the result and returns an object, with overloaded\r\nproperties for rows names","tags":{"return":["object","Returns an object with the result"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetch","docblock":{"description":"General fetch method, this method uses the FETCH_* constants\r\nto determine in what format the returned data should be in","tags":{"return":["array|object","Returns an object or array based on the fetching mode"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Database\\Result","extends":"","implements":[],"docblock":{"description":"Base database driver result interface\r\n\r\nThis defines the driver structure of which functions a driver\r\nmust implement in the result object and how they should be called.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter.php":{"namespaces":{"\\Tuxxedo\\Datamanager":{"docblock":{"description":"Datamanager namespace, this contains all base adapter class that\r\ndatamanagers must extend in order to become loadable. The root\r\nnamespace also hosts interfaces that datamanagers can implement\r\nto extend the magic within.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Hooks":"","\\Tuxxedo\\Design":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter":{"reuses":[],"constants":[{"constant":"FIELD_REQUIRED","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Indicates that a field is required","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FIELD_OPTIONAL","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Indicates that a field is optional","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FIELD_PROTECTED","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Indicates that a field is protected","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FIELD_VIRTUAL","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Indicates that a field is virtual","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"CONTEXT_NONE","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Context constant, default context","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"CONTEXT_SAVE","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Context constant, save() context","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"CONTEXT_DELETE","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Context constant, delete() context","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"CONTEXT_VOID","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Context constant, void context","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"VALIDATE_NONE","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Validation constant, no validation","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"VALIDATE_NUMERIC","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Validation constant, numeric value","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"VALIDATE_STRING","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Validation constant, string value","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"VALIDATE_EMAIL","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Validation constant, email value","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"VALIDATE_BOOLEAN","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Validation constant, boolean value","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"VALIDATE_CALLBACK","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Validation constant, callback","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"VALIDATE_STRING_EMPTY","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Validation option constant, allow empty fields","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"VALIDATE_IDENTIFIER","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Validation option constant, identifier","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"OPT_INTL","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Factory option constant - internationalization (default enabled)","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"OPT_LOAD_ONLY","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Factory option constant - insert as new record","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"OPT_INTL_AUTO","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Factory option constant - internationalization, load if available","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"OPT_DEFAULT","namespace":"\\Tuxxedo\\Datamanager","docblock":{"description":"Factory option constant - default options","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"registry","docblock":{"description":"Private instance to the Tuxxedo registry","tags":{"var":"\\Tuxxedo\\Registry"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"identifier","docblock":{"description":"Identifier, if any","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"reidentify","docblock":{"description":"Whether to re-identify the data when saving","tags":{"var":"boolean","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"iterator_position","docblock":{"description":"Iterator position","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"parent","docblock":{"description":"Whether this datamanager are called from another datamanager","tags":{"var":"\\Tuxxedo\\Datamanager\\Adapter","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"context","docblock":{"description":"Context for hooks, and adapters","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"data","docblock":{"description":"The original data if instanciated by an identifier","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"original_data","docblock":{"description":"The original data of each modified field, should it differ from $data","tags":{"var":"array","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"identifier_data","docblock":{"description":"Cache data if the identifier is gonna be validated","tags":{"var":"array","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"shutdown_handlers","docblock":{"description":"List of shutdown handlers to execute","tags":{"var":"array","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"invalid_fields","docblock":{"description":"List of fields that had one or more errors and therefore\r\ncould not be saved","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"loaded_datamanagers","docblock":{"description":"List of loaded datamanagers used for caching in the\r\nspecial required cases where more than one driver\r\nhave to be loaded","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor for the current datamanager, this\r\ncan be used to either create a datamanager based\r\non a certain record determined by the passed identifier\r\nor as a clean datamanager to insert a new record","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["mixed","The unique identifier to send to the datamanager"],["integer","The datamanager options"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception","Throws an exception if the unique identifier sent to the datamanager was invalid"]],"changelog":[["1.1.0","Added the $options parameter"],["1.1.0","Added the $parent parameter"]]}},"metadata":{"final":false,"abstract":true,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__destruct","docblock":{"description":"Destructor for the current datamanager, this is\r\nreserved for shutdown handlers in parent datamanagers.","tags":{"since":"1.1.0"}},"metadata":{"final":true,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__clone","docblock":{"description":"Clonable hook\r\n\r\nMagic __clone() method, this method will internally reset the state of a\r\ndatamanager.","tags":{"return":["void","No value is returned"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetGet","docblock":{"description":"Overloads the info access 'get' method so that default data is allocated\r\nwhen using the ArrayAccess accessor","tags":{"param":[["scalar","The information row name to get"]],"return":["void","No value is returned"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception on invalid properties"]],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetSet","docblock":{"description":"Overloads the info access 'set' method so that its prohibited to\r\nset elements that doesn't exists","tags":{"param":[["scalar","The information row name to set"],["mixed","The information row value to set"]],"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"init","docblock":{"description":"Datamanager initializer, this method initializes the default logic\r\nused across all datamanager adapters","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"return":["void","No value is returned"],"since":"1.1.0","changelog":[["1.1.0","Added the $options parameter"],["1.1.0","Added the $parent parameter"]]}},"metadata":{"final":true,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"factory","docblock":{"description":"Constructs a new datamanger instance","tags":{"param":[["string","Datamanger name"],["mixed","An identifier to send to the datamanager to load default data upon instanciating it"],["integer","Additional options to apply on the datamanager"]],"return":["\\Tuxxedo\\Datamanager\\Adapter","Returns a new datamanager instance"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if loading of a datamanger should fail for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails when loading the datamanager"]],"changelog":[["1.1.0","Added the $options parameter"],["1.1.0","Added the $parent parameter"]]}},"metadata":{"final":true,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"getInvalidFields","docblock":{"description":"Gets a list over invalid fields, this is only populated\r\nif an attempt to saving a datamanager have failed","tags":{"return":["array","Returns a list of those fields that failed validation"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getVirtualFields","docblock":{"description":"Gets a list of virtual fields from the datamanager adapter","tags":{"param":[["boolean","Whether or not to check for populated data (defaults to true)"]],"return":["array","Returns an array with field => value pairs, and empty array on none (if populated is set to off, all values are boolean true)"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"get","docblock":{"description":"Gets a field","tags":{"param":[["string","The field to get, if this value is NULL then all the backend data will be returned"]],"return":["mixed","Returns the field value, and NULL if the field is non existant (set)"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setShutdownHandler","docblock":{"description":"Sets a shutdown handler","tags":{"param":[["callback","A callback to execute"],["array","Any additonal arguments the callback needs to execute properly"]],"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"validate","docblock":{"description":"Validation method, validates the supplied user data","tags":{"return":["boolean","Returns true if the data is valid, otherwise false"],"changelog":[["1.1.0","This method was rewritten from scratch and now handles more cases than before"],["1.1.0","This method can now validate identifiers"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"save","docblock":{"description":"Save method, attempts to validate and save the data\r\ninto the database","tags":{"param":[["boolean","Whether to execute hooks or not. This parameter is mainly designed for datamanager internals"]],"return":["boolean","Returns true if the data is saved with success, otherwise boolean false"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if the query should fail"],["\\Tuxxedo\\Exception\\Multi","Throws a multi exception if validation fails"]],"changelog":[["1.1.0","Added the $execute_hooks parameter"],["1.1.0","This method now generates queries for more cases based on the state of the identifier"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"delete","docblock":{"description":"Deletes the data, within the database if an identifier was specified, else\r\nthe current set data is removed","tags":{"return":["boolean","Returns true if the deletion was a success otherwise boolean false"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if the query should fail"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getParent","docblock":{"description":"Gets the parent datamanager pointer","tags":{"return":["\\Tuxxedo\\Datamanager\\Adapter","Returns a datamanager pointer to the parent object if any, false on root or error"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getFields","docblock":{"description":"Gets the fields this datamanager provides","tags":{"return":["array","Returns an array with the fields"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getDataStruct","docblock":{"description":"Gets default data to allocate the $data property internally","tags":{"return":["array","Returns an array with the same structure as the $data property and false on error"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"current","docblock":{"description":"Iterator method - current","tags":{"return":["mixed","Returns the current field"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"rewind","docblock":{"description":"Iterator method - rewind","tags":{"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"key","docblock":{"description":"Iterator method - key","tags":{"return":["integer","Returns the currrent index"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"next","docblock":{"description":"Iterator method - next","tags":{"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"valid","docblock":{"description":"Iterator method - valid","tags":{"return":["boolean","Returns true if its possible to continue iterating, otherwise false is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"hooks","docblock":{"description":"Hooks executor\r\n\r\nThis method executes hooks on a datamanager instance, this is cannot be\r\ncalled publically.","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The datamanager adapter instance to execute hooks on"]],"return":["boolean","Returns true if all fields passed through the hooks flawlessly"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":["\\Iterator"],"docblock":{"description":"Abstract datamanager class\r\n\r\nEvery datamanager class must extend this class in order to be loadable and to\r\ncomply with the datamanager API. This also contains the factory method used\r\nto instanciate a new datamanager instance.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":true,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/Datastore.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\Datastore":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"fields","docblock":{"description":"Fields for validation of datastore elements","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, fetches a new datastore element based on its name if set","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","The datastore element name"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws an exception if the datastore name is set and it failed to load for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isValidDatastoreData","docblock":{"description":"Checks whether the data is valid","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The data to check"]],"return":["boolean","Returns true if the data is valid"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":[],"docblock":{"description":"Datamanager for datastore","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/Language.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Datamanager\\Hooks":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\Language":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string"}},"metadata":{"docblock":true}}],"properties":[{"property":"fields","docblock":{"description":"Fields for validation of languages","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, fetches a new language based on its id if set","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","The language id"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws an exception if the language id is set and it failed to load for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isValidISOTitle","docblock":{"description":"Checks whether an ISO code is valid or not (syntax wise)","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The ISO code"]],"return":["boolean","True if the ISO code is valid, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"rebuild","docblock":{"description":"Save the language in the datastore, this method is called from\r\nthe parent class in cases when the save method was success","tags":{"return":["boolean","Returns true if the datastore was updated with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"virtualInherit","docblock":{"description":"This event method is called if the query to store the\r\ndata was success, to rebuild the datastore cache","tags":{"param":[["mixed","The value to handle"]],"return":["boolean","Returns true if the datastore was updated with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":["\\Tuxxedo\\Datamanager\\Hooks\\Cache","\\Tuxxedo\\Datamanager\\Hooks\\VirtualDispatcher"],"docblock":{"description":"Datamanager for languages","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/Option.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":"","\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Datamanager\\Hooks":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\Option":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"fields","docblock":{"description":"Fields for validation of options","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, fetches a new option based on its name if set","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","The option name"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws an exception if the option name is set and it failed to load for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isValidDefaultValue","docblock":{"description":"Checks whether the default value is valid","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The value to check"]],"return":["boolean","Returns true if the default value is valid"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidType","docblock":{"description":"Checks whether the option values fits the type definition","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The type to check"]],"return":["boolean","Returns true if the type is valid, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidCategory","docblock":{"description":"Checks whether the category is valid","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The category to check"]],"return":["boolean","Returns true if the category is valid"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"rebuild","docblock":{"description":"Save the option in the datastore, this method is called from\r\nthe parent class in cases when the save method was success","tags":{"return":["boolean","Returns true if the datastore was updated with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"reset","docblock":{"description":"Resets the data to its default values while keeping the\r\nidentifier intact","tags":{"return":["boolean","Returns true on successful reset, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":["\\Tuxxedo\\Datamanager\\Hooks\\Cache","\\Tuxxedo\\Datamanager\\Hooks\\Resetable"],"docblock":{"description":"Datamanager for options","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/Optioncategory.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Datamanager\\Hooks":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\Optioncategory":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"fields","docblock":{"description":"Fields for validation of option categories","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, fetches a new option category based on its name if set","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","The option category name"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws an exception if the option category name is set and it failed to load for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"rebuild","docblock":{"description":"Save the option category in the datastore, this method is called from\r\nthe parent class in cases when the save method was success","tags":{"return":["boolean","Returns true if the datastore was updated with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":["\\Tuxxedo\\Datamanager\\Hooks\\Cache"],"docblock":{"description":"Datamanager for option categories","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/Permission.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Datamanager\\Hooks":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\Permission":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"fields","docblock":{"description":"Fields for validation of permissions","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, fetches a new permission based on its name if set","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","The permission name"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws an exception if the permission name is set and it failed to load for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"rebuild","docblock":{"description":"Save the permission in the datastore, this method is called from\r\nthe parent class in cases when the save method was success","tags":{"param":[["array","A virtually populated array from the datamanager abstraction"]],"return":["boolean","Returns true if the datastore was updated with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":["\\Tuxxedo\\Datamanager\\Hooks\\Cache"],"docblock":{"description":"Datamanager for permissions","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/Phrase.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Datamanager\\Hooks":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\Phrase":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string"}},"metadata":{"docblock":true}}],"properties":[{"property":"fields","docblock":{"description":"Fields for validation of phrases","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, fetches a new phrase based on its id if set","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","The phrase id"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws an exception if the phrase id is set and it failed to load for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isValidLanguageId","docblock":{"description":"Checks whether a language id is valid or not","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["integer","The language id"]],"return":["boolean","True if the language exists, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidPhraseTitle","docblock":{"description":"Checks whether a title is valid or not for the phrase","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The phrase title"]],"return":["boolean","True if the phrase title is valid, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidPhrasegroup","docblock":{"description":"Checks whether a phrasegroup is valid or not for the phrase","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The phrasegroup title"]],"return":["boolean","True if the phrase group is valid, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"rebuild","docblock":{"description":"Recaches the phrase statistics","tags":{"return":["boolean","Returns true if the datastore was updated with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"reset","docblock":{"description":"Resets the data to its default values while keeping the\r\nidentifier intact","tags":{"return":["boolean","Returns true on successful reset, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":["\\Tuxxedo\\Datamanager\\Hooks\\Cache","\\Tuxxedo\\Datamanager\\Hooks\\Resetable"],"docblock":{"description":"Datamanager for phrases","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/Phrasegroup.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Datamanager\\Hooks":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Helper":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\Phrasegroup":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string"}},"metadata":{"docblock":true}}],"properties":[{"property":"fields","docblock":{"description":"Fields for validation of phrase groups","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, fetches a new phrase group based on its title if set","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","The phrase group title"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws an exception if the phrase group title is set and it failed to load for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isValidLanguageId","docblock":{"description":"Checks whether a language id is valid or not","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["integer","The language id"]],"return":["boolean","True if the language exists, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidPhrasegroupTitle","docblock":{"description":"Checks whether a phrasegroup title is valid or not","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The phrasegroup title"]],"return":["boolean","True if the phrasegroup title is valid, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"rebuild","docblock":{"description":"Save the phrase group in the datastore, this method is called from\r\nthe parent class in cases when the save method was success","tags":{"return":["boolean","Returns true if the datastore was updated with success, otherwise false"],"todo":["Needs a little more work for fetching the old name, probably something we need to add in the core datamanager adapter"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"virtualPhrases","docblock":{"description":"This event method is called if the query to store the\r\ndata was success, to rebuild the datastore cache","tags":{"param":[["mixed","The value to handle"]],"return":["boolean","Returns true if the datastore was updated with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":["\\Tuxxedo\\Datamanager\\Hooks\\Cache","\\Tuxxedo\\Datamanager\\Hooks\\VirtualDispatcher"],"docblock":{"description":"Datamanager for phrase groups","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/Session.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\Session":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"fields","docblock":{"description":"Fields for validation of session","tags":{"var":"array","changelog":[["1.2.0","Added the 'rehash' field"]]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor for the sessions datamanager","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","Session identifier"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"changelog":[["1.2.0","User-Agent and Location is no longer manually set as the constants no longer exists but figured out on its own"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":[],"docblock":{"description":"Datamanager for sessions","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/Style.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Datamanager\\Hooks":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\Style":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"fields","docblock":{"description":"Fields for validation of styles","tags":{"var":"array","changelog":[["1.2.0","Renamed 'defaultstyle' to 'isdefault'"],["1.1.0","Added the 'inherit' field"]]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, fetches a new style based on its id if set","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","The style id"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws an exception if the style id is set and it failed to load for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"rebuild","docblock":{"description":"Save the style in the datastore, this method is called from\r\nthe parent class in cases when the save method was success","tags":{"return":["boolean","Returns true if the datastore was updated with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"virtualInherit","docblock":{"description":"This event method is called if the query to store the\r\ndata was success, to rebuild the datastore cache","tags":{"param":[["mixed","The value to handle"]],"return":["boolean","Returns true if the datastore was updated with success, otherwise false"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":["\\Tuxxedo\\Datamanager\\Hooks\\Cache","\\Tuxxedo\\Datamanager\\Hooks\\VirtualDispatcher"],"docblock":{"description":"Datamanager for styles","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/Template.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Datamanager\\Hooks":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":"","\\Tuxxedo\\Template\\Compiler":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\Template":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"fields","docblock":{"description":"Fields for validation of templates","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, fetches a new template based on its id if set","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","The template id"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws an exception if the template id is set and it failed to load for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isValidTemplateTitle","docblock":{"description":"Checks whether the template title is valid","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The title to check"]],"return":["boolean","Returns true if the title is valid"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidSource","docblock":{"description":"Checks whether the source code is valid","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The source code to check"]],"return":["boolean","Returns true if the source code is valid"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidStyleId","docblock":{"description":"Checks whether the style identifier is valid","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The style identifier to check"]],"return":["boolean","Returns true if the style identifier is valid"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"rebuild","docblock":{"description":"Syncronizes the templateids in the style manager","tags":{"return":["boolean","Returns true if the datastore was updated with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"reset","docblock":{"description":"Resets the data to its default values while keeping the\r\nidentifier intact","tags":{"return":["boolean","Returns true on successful reset, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":["\\Tuxxedo\\Datamanager\\Hooks\\Cache","\\Tuxxedo\\Datamanager\\Hooks\\Resetable"],"docblock":{"description":"Datamanager for templates","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/User.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Datamanager\\Hooks":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":"","\\Tuxxedo\\User":"UserAPI"},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\User":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"usergroupid","docblock":{"description":"Usergroup identifier copy","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"rehash_password","docblock":{"description":"Whether or not to rehash the password","tags":{"var":"boolean","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"fields","docblock":{"description":"Fields for validation of users","tags":{"var":"array","changelog":[["1.1.0","Changed the name of 'styleid' to 'style_id'"],["1.1.0","Changed the name of 'languageid' to 'language_id'"]]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, fetches a new user based on its id if set","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","The user id"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws an exception if the user id is set and it failed to load for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetSet","docblock":{"description":"Overloads the arrayaccess set method, so that we can catch\r\noverloads in the set method","tags":{"param":[["scalar","The information row name to set"],["mixed","The information row value to set"]],"return":["void","No value is returned"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isValidUsergroup","docblock":{"description":"Checks whether a usergroup is valid","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["integer","The usergroup id to check for validity"]],"return":["boolean","Returns true if the usergroup is loaded and exists in the datastore cache, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidTimezone","docblock":{"description":"Checks whether a timezone based by its name is valid","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The timezone name to check for validity"]],"return":["boolean","Returns true if the timezone is loaded and exists in the datastore cache, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidUsername","docblock":{"description":"Checks whether a user name is taken or not","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The username to check"]],"return":["boolean","Returns true if the username is free to be taken, otherwise false"],"changelog":[["1.2.0","This method now requires a username to be at least 3 characters and no longer than 32 characters big"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidEmail","docblock":{"description":"Checks whether an email address is taken or not","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["string","The username to check"]],"return":["boolean","Returns true if the email is free to be taken, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidStyleId","docblock":{"description":"Checks whether a style id is valid or not","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["integer","The style id"]],"return":["boolean","True if the style exists, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isValidLanguageId","docblock":{"description":"Checks whether a language id is valid or not","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["integer","The language id"]],"return":["boolean","True if the language exists, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"isAvailableUserField","docblock":{"description":"Helper validation routine to check a single field in the database","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["string","The field to check"],["string","The value to check"]],"return":["boolean","Returns false if the value exists, otherwise true"],"since":"1.1.0","changelog":[["1.2.0","The return value is now negated"]]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}},{"method":"isValidPassword","docblock":{"description":"Checks whether a password is valid or not","tags":{"param":[["\\Tuxxedo\\Datamanager\\Adapter","The current datamanager adapter"],["\\Tuxxedo\\Registry","The Registry reference"],["integer","The language id"]],"return":["boolean","True if the password is vald, otherwise false"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"rebuild","docblock":{"description":"Updates the number of users in the usergroup","tags":{"return":["boolean","Returns true if the datastore was updated with success, otherwise false"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":["\\Tuxxedo\\Datamanager\\Hooks\\Cache"],"docblock":{"description":"Datamanager for users","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Adapter\/Usergroup.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Adapter":{"docblock":{"description":"Datamanagers adapter namespace, this contains all the different\r\ndatamanager handler implementations to comply with the standard\r\nadapter interface, and with the plugins for hooks.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager\\Adapter":"","\\Tuxxedo\\Datamanager\\Hooks":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Helper":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datamanager\\Adapter\\Usergroup":{"reuses":[],"constants":[{"constant":"DM_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Datamanager name","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"ID_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Identifier name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"TABLE_NAME","namespace":"\\Tuxxedo\\Datamanager\\Adapter","docblock":{"description":"Table name for the datamanager","tags":{"var":"string","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"fields","docblock":{"description":"Fields for validation of usergroups","tags":{"var":"array","changelog":[["1.2.0","Added the 'users' virtual field"],["1.2.0","Removed the 'type' field"]]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, fetches a new usergroup based on its id if set","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["integer","The usergroup id"],["integer","Additional options to apply on the datamanager"],["\\Tuxxedo\\Datamanager\\Adapter","The parent datamanager if any"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws an exception if the usergroup id is set and it failed to load for some reason"],["\\Tuxxedo\\Exception\\SQL","Throws a SQL exception if a database call fails"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"rebuild","docblock":{"description":"Save the usergroup in the datastore, this method is called from\r\nthe parent class in cases when the save method was success","tags":{"return":["boolean","Returns true if the datastore was updated with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"virtualUsers","docblock":{"description":"This event method is called if the query to store the\r\ndata was success, to rebuild the datastore cache","tags":{"param":[["mixed","The value to handle"]],"return":["boolean","Returns true if the datastore was updated with success, otherwise false"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Adapter","extends":"\\Tuxxedo\\Datamanager\\Adapter","implements":["\\Tuxxedo\\Datamanager\\Hooks\\Cache","\\Tuxxedo\\Datamanager\\Hooks\\VirtualDispatcher"],"docblock":{"description":"Datamanager for usergroups","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","changelog":[["1.2.0","This class now implements the 'VirtualDispatcher' hook"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Hooks\/Cache.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Hooks":{"docblock":{"description":"Datamanager hooks, this namespace contains special hooks that can be used\r\ntrigger special routines within datamanager adapters.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":[],"interfaces":{"\\Tuxxedo\\Datamanager\\Hooks\\Cache":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"rebuild","docblock":{"description":"This event method is called if the query to store the\r\ndata was success, to rebuild the datastore cache","tags":{"return":["boolean","Returns true if the datastore was updated with success, otherwise false"],"changelog":[["1.1.0","This method no longer takes any parameters"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Hooks","extends":"","implements":[],"docblock":{"description":"Datastore requirement for using the datamanager\r\n\r\nThis interface is for datamanagers that interacts with the datastore\r\ncache to rebuild it to prevent manual update of it.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Hooks\/Resetable.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Hooks":{"docblock":{"description":"Datamanager hooks, this namespace contains special hooks that can be used\r\ntrigger special routines within datamanager adapters.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":[],"interfaces":{"\\Tuxxedo\\Datamanager\\Hooks\\Resetable":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"reset","docblock":{"description":"Resets the data to its default values while keeping the\r\nidentifier intact","tags":{"return":["boolean","Returns true on successful reset, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Hooks","extends":"","implements":[],"docblock":{"description":"Resetable interface\r\n\r\nResetable makes a datamanager able to reset a loaded\r\ndata set into its default values as per datamanager.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Hooks\/Virtual.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Hooks":{"docblock":{"description":"Datamanager hooks, this namespace contains special hooks that can be used\r\ntrigger special routines within datamanager adapters.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":[],"interfaces":{"\\Tuxxedo\\Datamanager\\Hooks\\Virtual":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"virtual","docblock":{"description":"Virtually handles all fields, unlike singluar fields which\r\nVirtualDispatcher provides.","tags":{"param":[["string","The virtual field to handle"],["mixed","The virtual field's value"]],"return":["boolean","Returns true if the datastore was updated with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Datamanager\\Hooks","extends":"","implements":[],"docblock":{"description":"Virtual field handler for using the datamanager\r\n\r\nThis interface is for allowing virtual fields to\r\nbe populated at runtime by datamanager adapters.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datamanager\/Hooks\/VirtualDispatcher.php":{"namespaces":{"\\Tuxxedo\\Datamanager\\Hooks":{"docblock":{"description":"Datamanager hooks, this namespace contains special hooks that can be used\r\ntrigger special routines within datamanager adapters.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":[],"interfaces":{"\\Tuxxedo\\Datamanager\\Hooks\\VirtualDispatcher":{"reuses":[],"constants":[],"properties":[],"methods":[],"namespace":"\\Tuxxedo\\Datamanager\\Hooks","extends":"","implements":[],"docblock":{"description":"Virtual field dispatcher\r\n\r\nThis interface tells the datamanager API to dispatch virtual\r\nfields to methods like: \"username\" -> \"virtualUsername\".","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Datastore.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Datastore":{"reuses":[],"constants":[],"properties":[{"property":"registry","docblock":{"description":"Private instance to the Tuxxedo registry","tags":{"var":"\\Tuxxedo\\Registry"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"cache","docblock":{"description":"Holds the cached elements from the datastore","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor","tags":{}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getRef","docblock":{"description":"Gets a reference to the loaded element, so that it can be\r\nreferenced in memory rather than copied","tags":{"param":[["string","The datastore element to get a reference of"],["array","Returns a reference to an array for the element, or boolean false on error"]],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__get","docblock":{"description":"Quick reference for overloading of a loaded\r\nelement in the datastore.","tags":{"param":[["string","The datastore element to get"]],"return":["array","Returns an array is returned, otherwise boolean false on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__isset","docblock":{"description":"Allows the usage of isset() on datastore elements","tags":{"param":[["string","The datastore element to check"]],"return":["boolean","Returns true if the element is loaded otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__unset","docblock":{"description":"Allows the usge of unset() on datastore elements","tags":{"param":[["string","The datastore element to unload"]],"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"unload","docblock":{"description":"Unloads a datastore element from the loaded cache","tags":{"param":[["string","The datastore element to free from cache"]],"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"rebuild","docblock":{"description":"Rebuilds a datastore element if it already exists, or adds\r\na new entry in the datastore if no elements with that name\r\nalready exists. To delete a datastore element completely,\r\nthe data parameter must be set to NULL","tags":{"param":[["string","The datastore element"],["mixed","This can be either an array or object, if this is NULL then the datastore is deleted completely"]],"return":["boolean","True on success, otherwise false on error"],"throws":[["\\Tuxxedo\\Exception\\SQL","Throws an exception if the query should fail"]],"changelog":[["1.1.0","This method now internally uses datamanagers to save"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"cache","docblock":{"description":"Caches a set of elements from the datastore into\r\nthe current cache.","tags":{"param":[["array","An array, where the values are the datastore element names"],["array","An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements"]],"return":["boolean","True on success, otherwise false"],"throws":[["\\Tuxxedo\\Exception\\SQL","Throws an exception if the query should fail"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"doCacheFilter","docblock":{"description":"Filters out already loaded elements in the datastore","tags":{"param":[["string","The datastore element to check"]],"return":["boolean","Returns true if the element not is loaded, otherwise false"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"","implements":[],"docblock":{"description":"Datastore cache, this enables datastore caching for\r\ndatabases. This assumes the datastore table and\r\neverything else required for a database based\r\ndatastore is setup.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Debug\/Backtrace.php":{"namespaces":{"\\Tuxxedo\\Debug":{"docblock":{"description":"Debug namespace, this namespace contains debugging related routines that\r\nis better suited to be encapsulated in an object.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":""},"classes":{"\\Tuxxedo\\Debug\\Backtrace":{"reuses":[],"constants":[],"properties":[{"property":"iterator_position","docblock":{"description":"Stack pointer position","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"framesnum","docblock":{"description":"Number of frames for iteration","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"frames","docblock":{"description":"Stack frames","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"includes","docblock":{"description":"Meta information - includes","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}},{"property":"callbacks","docblock":{"description":"Meta information - callbacks","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor\r\n\r\nOnce called, the constructor will generate all the backtrace frames\r\nused prior to this call.","tags":{"param":[["\\Exception","If the current trace is combined with an exception, then pass the exception to get a better trace"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getTrace","docblock":{"description":"Compiles the trace structures into an iteratable array","tags":{"param":[["\\Exception","If the current trace is combined with an exception, then pass the exception to get a better trace"],["integer","Number of frames to skip, defaults to cutting off the last two trace frames"]],"return":["array","Returns an array with the backtrace information, and empty array on no information"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getCallVariants","docblock":{"description":"Gets callbackable variants for a trace frame","tags":{"param":[["array","The trace frame returned by \\debug_backtrace()"]],"return":["array","Returns an array that can be used for comparison of callbacks based on the frame"]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}},{"method":"getArgTypeData","docblock":{"description":"Gets the argument type data","tags":{"param":[["mixed","The argument to display"]],"return":["string","Returns a more human readable value of the type data to ease debugging"]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"current","docblock":{"description":"Iterator method - current","tags":{"return":["mixed","Returns the current frame"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"rewind","docblock":{"description":"Iterator method - rewind","tags":{"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"key","docblock":{"description":"Iterator method - key","tags":{"return":["integer","Returns the currrent frame id"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"next","docblock":{"description":"Iterator method - next","tags":{"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"valid","docblock":{"description":"Iterator method - valid","tags":{"return":["boolean","Returns true if its possible to continue iterating, otherwise false is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"count","docblock":{"description":"Iterator method - count","tags":{"return":["integer","Returns the number of frames in the stack"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Debug","extends":"","implements":["\\Tuxxedo\\Design\\Iteratable"],"docblock":{"description":"Debug backtrace class, this is a redesign of the old and infamous\r\ntuxxedo_debug_backtrace() function. The class itself defines as an\r\niterator.\r\n\r\nThis implementation implements some helper methods on each trace\r\ninstance to ease debugging even further.\r\n\r\n<code>\r\nuse Tuxxedo\\Debug;\r\n\r\nforeach(new Debug\\Backtrace as $trace)\r\n{\r\n\tif(!$trace->isException())\r\n\t{\r\n\t\tcontinue;\r\n\t}\r\n\r\n\t...\r\n}\r\n<\/code>","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Debug\/Trace.php":{"namespaces":{"\\Tuxxedo\\Debug":{"docblock":{"description":"Debug namespace, this namespace contains debugging related routines that\r\nis better suited to be encapsulated in an object.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Helper":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Debug\\Trace":{"reuses":[],"constants":[],"properties":[{"property":"timer","docblock":{"description":"Timer","tags":{"var":"\\Tuxxedo\\Helper\\Timer"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"frames","docblock":{"description":"Stack frames","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"start","docblock":{"description":"Starts a trace","tags":{"param":[["boolean","Whether or not to resume the old trace"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"end","docblock":{"description":"Ends a trace","tags":{"return":["array","Returns the timer and trace frames for the last trace"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Debug","extends":"","implements":[],"docblock":{"description":"Trace class, this records traces about calls priority to\r\nexecuting the upcoming code block and calculates the time\r\nit took to execute\r\n\r\nExample:\r\n<code>\r\n$trace->start();\r\n\r\n\/\/Code block\r\n\r\n$traceinfo = $trace->end();\r\n<\/code>","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Debug\/TraceFrame.php":{"namespaces":{"\\Tuxxedo\\Debug":{"docblock":{"description":"Debug namespace, this namespace contains debugging related routines that\r\nis better suited to be encapsulated in an object.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Debug\\TraceFrame":{"reuses":[],"constants":[{"constant":"FLAG_EXCEPTION","namespace":"\\Tuxxedo\\Debug","docblock":{"description":"Flag constant - Is Exception?","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FLAG_HANDLER","namespace":"\\Tuxxedo\\Debug","docblock":{"description":"Flag constant - Is Handler?","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FLAG_CALLBACK","namespace":"\\Tuxxedo\\Debug","docblock":{"description":"Flag constant - Is Callback?","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"FLAG_INCLUDE","namespace":"\\Tuxxedo\\Debug","docblock":{"description":"Flag constant - Is Include?","tags":{"var":"integer"}},"metadata":{"docblock":true}}],"properties":[{"property":"frame","docblock":{"description":"Frame id (the number of the frame in the trace)","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"call","docblock":{"description":"Call, including prototype (without arguments)","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"callargs","docblock":{"description":"Call, including prototype and argument list","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"reflection_call","docblock":{"description":"Reflection call, this is the 'call' version thats passed as the first parameter to each Reflection instance","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"current","docblock":{"description":"Whether or not this is the 'current' frame (the one that triggered the error)","tags":{"var":"boolean"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"line","docblock":{"description":"Line number","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"file","docblock":{"description":"File path (full path)","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"notes","docblock":{"description":"Notes","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"reflection_class","docblock":{"description":"Reflection class to call when using the getReflection() method","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"flags","docblock":{"description":"Boolean flags","tags":{"var":"boolean"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor\r\n\r\nConstructs a new trace frame object","tags":{"param":[["string","The name of the reflection class to call when the getReflection() method is called"],["integer","Checking flags, bitmask of the FLAG_XXX class constants"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isException","docblock":{"description":"Checks whether or not this frame is an exception","tags":{"return":["boolean","Returns true if this is an exception, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isHandler","docblock":{"description":"Checks whether or not this frame is a handler","tags":{"return":["boolean","Returns true if this is a handler, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isCallback","docblock":{"description":"Checks whether or not this frame is a callback","tags":{"return":["boolean","Returns true if this is a callback, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isInclude","docblock":{"description":"Checks whether or not this frame is an include","tags":{"return":["boolean","Returns true if this is an include, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getFlags","docblock":{"description":"Gets the boolean flags bitfield","tags":{"return":["integer","Returns the boolean flags for things like 'isException()', 'isInclude()', ..."]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getReflection","docblock":{"description":"Gets a new reflection instance of this call","tags":{"return":["\\Reflection","Returns a Reflection object of the call, or false for things like includes that does not have reflection"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Debug","extends":"","implements":[],"docblock":{"description":"Trace frame, this class is used together with the backtracing\r\nclass, each frame returned is an instance of this class.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Debug\/Tracker.php":{"namespaces":{"\\Tuxxedo\\Debug":{"docblock":{"description":"Debug namespace, this namespace contains debugging related routines that\r\nis better suited to be encapsulated in an object.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Debug\\Tracker":{"reuses":[],"constants":[],"properties":[{"property":"callback_hook","docblock":{"description":"Callback hook","tags":{"var":"callback"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"log_data","docblock":{"description":"Log data","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor\r\n\r\nConstructs a new tracker object","tags":{"param":[["callback","A callback which will be used to process the log data"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception in case the callback is not valid"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"log","docblock":{"description":"Log data for a specific state\/iteration","tags":{"param":[["array","The values to log in key-value pairs"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"end","docblock":{"description":"Ends the tracker, ultimately calling the registered\r\ncallback which will have the stored log data passed\r\nto it","tags":{"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Debug","extends":"","implements":[],"docblock":{"description":"Debug tracker class\r\n\r\nThis class can be used to log variables data for debugging\r\npurposes, such as iterations which can be useful for writing\r\ngenerators and other types of parsers to confirm states, but\r\nit is not limited to such.\r\n\r\n<code>\r\nuse Tuxxedo\\Debug;\r\n\r\nclass Test\r\n{\r\n\t\tprotected $iterations\t = 0;\r\n\r\n\t\tprotected $tracker;\r\n\r\n\r\n\t\tpublic function __construct()\r\n\t\t{\r\n\t\t\t$this->tracker = new Debug\\Tracker(function($log_data)\r\n\t\t\t{\r\n\t\t\t\tprintf('The log was called %d time(s)%s%s', sizeof($log_data), PHP_EOL, PHP_EOL);\r\n\r\n\t\t\t\tif($log_data)\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach($log_data)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar_dump($log_data);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic function __destruct()\r\n\t\t{\r\n\t\t\t$this->tracker->end();\r\n\t\t}\r\n\r\n\t\tpublic function iterator()\r\n\t\t{\r\n\t\t\t$this->tracker->log(['iterations' => ++$this->iterations]);\r\n\t\t}\r\n}\r\n\r\n$test = new Test;\r\n\r\n$test->iterator(); \/\/ Test::$iterations=1\r\n$test->iterator(); \/\/ Test::$iterations=2\r\n\r\nfor($x = 0; $x < 40; ++$x)\r\n{\r\n\t\t$test->iterator(); \/\/ Test::$iterations=N\r\n}\r\n\r\nunset($test);\r\n\r\n\/\/The log was called 42 time(s)\r\n\/\/\r\n\/\/...\r\n<\/code>","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Design\/EventCaller.php":{"namespaces":{"\\Tuxxedo\\Design":{"docblock":{"description":"Design namespace. This namespace is meant for abstract concepts and\r\nin most cases simply just interfaces that in someway structures the\r\ngeneral design used in the core components.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":[],"interfaces":[],"traits":{"\\Tuxxedo\\Design\\EventCaller":{"reuses":[],"constants":[],"properties":[{"property":"eh_ptr","docblock":{"description":"The event handler object","tags":{"var":"\\Tuxxedo\\Design\\EventHandler"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":false,"private":true,"static":false,"docblock":true}}],"methods":[{"method":"setEventHandler","docblock":{"description":"Defines the event handler instance for usage within\r\nthe event caller trait","tags":{"param":[["\\Tuxxedo\\Design\\EventHandler","The event handler instance"]],"return":["void","No value is returned"]}},"metadata":{"final":true,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"getEventHandler","docblock":{"description":"Gets the event handler instance currently assigned to this event caller\r\ntrait","tags":{"return":["\\Tuxxedo\\Design\\EventHandler","Returns the event handler instance if any, otherwise false"]}},"metadata":{"final":true,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"__set","docblock":{"description":"Magic setter to implement 'onEvent' alike syntax","tags":{"param":[["string","The property name"],["mixed","The property value"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__get","docblock":{"description":"Magic getter to implement 'onEvent' alike syntax","tags":{"param":[["string","The property name"]],"return":["mixed","Returns all the callbacks (if any) registered to this event"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Design","extends":"","implements":[],"docblock":{"description":"Implements event calling hooks for a class\r\n\r\nNote, if the class that reuses this trait defines its own magic\r\nmanually to continuesly allow the event callbacks to be assigned.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"constants":[],"functions":[]},"library\/Tuxxedo\/Design\/EventContext.php":{"namespaces":{"\\Tuxxedo\\Design":{"docblock":{"description":"Design namespace. This namespace is meant for abstract concepts and\r\nin most cases simply just interfaces that in someway structures the\r\ngeneral design used in the core components.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Design\\EventContext":{"reuses":[],"constants":[],"properties":[{"property":"event","docblock":{"description":"The event name","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"extern","docblock":{"description":"The external object instance (if any) from the context that\r\ntriggered this event. If no context was supplied, then this\r\nis NULL","tags":{"var":"object|null"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"args","docblock":{"description":"The arguments passed to the callback from the callee (if any)","tags":{"var":"array|null"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"methods":[],"namespace":"\\Tuxxedo\\Design","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":[],"docblock":{"description":"Event Context, this basically works like an \\stdClass object but\r\nis registered for reflection and future extension.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Design\/EventHandler.php":{"namespaces":{"\\Tuxxedo\\Design":{"docblock":{"description":"Design namespace. This namespace is meant for abstract concepts and\r\nin most cases simply just interfaces that in someway structures the\r\ngeneral design used in the core components.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":""},"classes":{"\\Tuxxedo\\Design\\EventHandler":{"reuses":[],"constants":[],"properties":[{"property":"obj_ptr","docblock":{"description":"The object instance associated with this event\r\nhandler. Note that this can be NULL as its not\r\nrequired.","tags":{"var":"object|null"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"events","docblock":{"description":"The registered events to this event handler","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"event_callbacks","docblock":{"description":"The registered callbacks for this event handler","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new event handler object","tags":{"param":[["object|null","The object for which this event handler is registered to (or NULL if none)"],["array","A list of events, this must contain at least one event, all event names are case insensitive"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if the object supplied is not an object or NULL and if no events are passed"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"register","docblock":{"description":"Registers a new callback for an event","tags":{"param":[["string","The event name"],["callback","The callback to register"]],"return":["void","No value is returned"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if a callback is attempted to be registered for an invalid event"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"unregister","docblock":{"description":"Unregisters all callbacks for a specific event","tags":{"param":[["string","The event name"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getCallbacks","docblock":{"description":"Gets all the callbacks for a specific event","tags":{"return":["array","Returns an array with all the callbacks for a specific event, this array can be empty, false is returned for invalid events"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getEvents","docblock":{"description":"Gets all the events valid for this event handler","tags":{"return":["array","Returns an array with all the events for this event handler"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fire","docblock":{"description":"Fires an event\r\n\r\nBe aware that event callbacks may throw exceptions","tags":{"param":[["string","The event name"],["array","Additional arguments that should be passed to the event callbacks using the context object"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Design","extends":"","implements":[],"docblock":{"description":"Event Handler class, this is the internal firing mechanism\r\nthat works together with the EventCaller trait.\r\n\r\n<code>\r\nuse Tuxxedo\\Design;\r\n\r\nclass Component\r\n{\r\n\t\/\/Trait which implements the hooks for \r\n\t\/\/event registrations\r\n\tuse Design\\EventCaller;\r\n\r\n\r\n\t\/\/Holds the event handler instance\r\n\tprotected $event_handler;\r\n\r\n\r\n\t\/\/Constructor, this loads in the event handling sub\r\n\t\/\/system and registers the events\r\n\tpublic function __construct()\r\n\t{\r\n\t\t$this->setEventHandler($this->event_handler = new Design\\EventHandler($this, ['test1', 'test2']));\r\n\t}\r\n\r\n\t\/\/Method test #1\r\n\tpublic function test1()\r\n\t{\r\n\t\t$this->event_handler->fire('test1');\r\n\t}\r\n\r\n\t\/\/Method test #2\r\n\tpublic function test2()\r\n\t{\r\n\t\t$this->event_handler->fire('test2', func_get_args());\r\n\t}\r\n}\r\n\r\n\/\/Create the new component instance\r\n$component = new Component;\r\n\r\n\/\/Register callbacks for the events\r\n$component->onTest1 = function(Design\\EventContext $ctx)\r\n{\r\n\techo 'Event ' . $ctx->event . ' called', PHP_EOL;\r\n};\r\n\r\n$component->onTest2 = function(Design\\EventContext $ctx)\r\n{\r\n\techo 'Event ' . $ctx->event . ' called', PHP_EOL;\r\n\techo 'Additional arguments passed to this callback:', PHP_EOL;\r\n\r\n\tvar_dump($ctx->args);\r\n};\r\n\r\n\/\/Execute\r\n$component->test1();\r\n$component->test2('Hello', 'World');\r\n<\/code>","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Design\/InfoAccess.php":{"namespaces":{"\\Tuxxedo\\Design":{"docblock":{"description":"Design namespace. This namespace is meant for abstract concepts and\r\nin most cases simply just interfaces that in someway structures the\r\ngeneral design used in the core components.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Design\\InfoAccess":{"reuses":[],"constants":[],"properties":[{"property":"information","docblock":{"description":"Information array","tags":{"var":"array|object"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"import","docblock":{"description":"Imports multiple information in one go","tags":{"param":[["array|object","The information to import"]],"return":["void","No value is returned"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"export","docblock":{"description":"Exports the entire information in one go","tags":{"return":["array|object","Returns an object if the internal information is an object, otherwise an array"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetExists","docblock":{"description":"Checks whether an information is available","tags":{"param":[["scalar","The information row name to check"]],"return":["boolean","Returns true if the information is stored, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetGet","docblock":{"description":"Gets a value from the information store","tags":{"param":[["scalar","The information row name to get"]],"return":["mixed","Returns the information value, and NULL if the value wasn't found"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetSet","docblock":{"description":"Sets a new information value","tags":{"param":[["scalar","The information row name to set"],["mixed","The new\/update value for this row"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetUnset","docblock":{"description":"Deletes an information value","tags":{"param":[["scalar","The information row name to delete"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Design","extends":"","implements":["\\ArrayAccess"],"docblock":{"description":"Information access, enables the ability for classes\r\nto access their loaded information through the array-alike\r\nsyntax.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":true,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Design\/Invokable.php":{"namespaces":{"\\Tuxxedo\\Design":{"docblock":{"description":"Design namespace. This namespace is meant for abstract concepts and\r\nin most cases simply just interfaces that in someway structures the\r\ngeneral design used in the core components.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Registry":""},"classes":[],"interfaces":{"\\Tuxxedo\\Design\\Invokable":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"invoke","docblock":{"description":"Magic method called when creating a new instance of the\r\nobject from the registry","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["array","The configuration array"]],"return":["object","Object instance"],"throws":[["\\Tuxxedo\\Exception\\Basic","Only thrown on poorly a configured database section in the configuration file"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\Tuxxedo\\Design","extends":"","implements":[],"docblock":{"description":"Interface for requring the registry to pass certain information\r\nbefore the constructor is called.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Design\/Iteratable.php":{"namespaces":{"\\Tuxxedo\\Design":{"docblock":{"description":"Design namespace. This namespace is meant for abstract concepts and\r\nin most cases simply just interfaces that in someway structures the\r\ngeneral design used in the core components.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":[],"interfaces":{"\\Tuxxedo\\Design\\Iteratable":{"reuses":[],"constants":[],"properties":[],"methods":[],"namespace":"\\Tuxxedo\\Design","extends":"\\Iterator","implements":[],"docblock":{"description":"Iteratable interface, this interface is simply just a\r\ncombination of the built-in interfaces in PHP, Iterator\r\nand Countable.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0","changelog":[["1.2.0","This is no longer a class but an interface"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Exception.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Exception":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Standard exception, indicates that this is a GUI themed error (a non critical fatal)","tags":{"param":[["string","The error message, in a printf-alike formatted string or just a normal string"],["mixed","Optional argument #n for formatting"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"\\Exception","implements":[],"docblock":{"description":"Default exception, mainly used for general errors. All\r\nTuxxedo specific exceptions extend this exception.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Exception\/Basic.php":{"namespaces":{"\\Tuxxedo\\Exception":{"docblock":{"description":"Exception namespace, this contains all the core exceptions defined within\r\nthe library.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Exception\\Basic":{"reuses":[],"constants":[],"properties":[],"methods":[],"namespace":"\\Tuxxedo\\Exception","extends":"\\Tuxxedo\\Exception","implements":[],"docblock":{"description":"Basic exception type, this is used for errors that\r\nshould act as fatal errors. If an exception of this\r\nis caught by the default exception handler it will\r\nterminate the execution.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Exception\/BasicMulti.php":{"namespaces":{"\\Tuxxedo\\Exception":{"docblock":{"description":"Exception namespace, this contains all the core exceptions defined within\r\nthe library.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Exception\\BasicMulti":{"reuses":[],"constants":[],"properties":[{"property":"errors","docblock":{"description":"Holds the current stored errors","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new basic multi error exception","tags":{"param":[["array","Form data to store as an array"],["string","The error message, in a printf-alike formatted string or just a normal string"],["mixed","Optional argument #n for formatting"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getErrors","docblock":{"description":"Gets all the errors","tags":{"return":["array","Returns an array with all the registered errors"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Exception","extends":"\\Tuxxedo\\Exception\\Basic","implements":[],"docblock":{"description":"Basic Multi error exception\r\n\r\nCan throw multiple errors at the same time, and works like the 'Basic'\r\nexception and halts the execution.\r\n\r\nThe 'Multi' exception is using the same basic design and is application\r\nfriendly and should be used for 'Runtime' errors.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Exception\/MVC\/InvalidAction.php":{"namespaces":{"\\Tuxxedo\\Exception\\MVC":{"docblock":{"description":"MVC Exception namespace. This contains all the specialized exceptions for\r\nMVC components.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":""},"classes":{"\\Tuxxedo\\Exception\\MVC\\InvalidAction":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructor, sets the standardized exception message","tags":{"param":[["\\Exception","The previous exception if any"]],"changelog":[["1.1.0","This method now supports previous exceptions ($previous parameter)"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Exception\\MVC","extends":"\\Tuxxedo\\Exception","implements":[],"docblock":{"description":"Invalid action method","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Exception\/MVC\/InvalidController.php":{"namespaces":{"\\Tuxxedo\\Exception\\MVC":{"docblock":{"description":"MVC Exception namespace. This contains all the specialized exceptions for\r\nMVC components.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":""},"classes":{"\\Tuxxedo\\Exception\\MVC\\InvalidController":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructor, sets the standardized exception message","tags":{"param":[["\\Exception","The previous exception if any"]],"changelog":[["1.1.0","This method now supports previous exceptions ($previous parameter)"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Exception\\MVC","extends":"\\Tuxxedo\\Exception","implements":[],"docblock":{"description":"Invalid controller","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Exception\/Multi.php":{"namespaces":{"\\Tuxxedo\\Exception":{"docblock":{"description":"Exception namespace, this contains all the core exceptions defined within\r\nthe library.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Exception\\Multi":{"reuses":[],"constants":[],"properties":[{"property":"data","docblock":{"description":"Holds the current stored data","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new data exception from","tags":{"param":[["array","D to store as an array"],["string","The error message, in a printf-alike formatted string or just a normal string"],["mixed","Optional argument #n for formatting"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getData","docblock":{"description":"Gets all the data","tags":{"return":["array","Returns an array with all the data"],"changelog":[["1.2.0","Prior this method was called 'getFormData()'"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Exception","extends":"\\Tuxxedo\\Exception","implements":[],"docblock":{"description":"Multi exception, this exception is used to carry multiple data\r\nso it can be displayed when multiple causes were the reason for\r\na fail, for example a form validation.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","changelog":[["1.2.0","This exception used to be called 'FormData'"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Exception\/SQL.php":{"namespaces":{"\\Tuxxedo\\Exception":{"docblock":{"description":"Exception namespace, this contains all the core exceptions defined within\r\nthe library.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Exception\\SQL":{"reuses":[],"constants":[],"properties":[{"property":"sqlstate","docblock":{"description":"Current SQL state","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"driver","docblock":{"description":"Driver that caused this error","tags":{"var":"string","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new SQL exception","tags":{"param":[["string","The SQL that caused this error"],["string","The driver that caused this error"],["string","The error that occured"],["integer","The associated error number for the error"],["string","Optionally, an SQL state if the database driver supports it"]],"changelog":[["1.1.0","Added the $driver parameter"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getSQL","docblock":{"description":"Gets the SQL string that caused the exception to trigger","tags":{"return":["string","Returns the SQL string"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getSQLState","docblock":{"description":"Gets the current SQL state if the underlaying database\r\ndriver that threw this exception supports it.","tags":{"return":["string","Returns the SQL state if supported, otherwise false is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getDriver","docblock":{"description":"Gets the driver that caused this exception to trigger","tags":{"return":["string","Returns the driver name"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Exception","extends":"\\Tuxxedo\\Exception\\Basic","implements":[],"docblock":{"description":"SQL Exception\r\n\r\nException designed to carry error information from a failed\r\nquery call.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Exception\/TemplateCompiler.php":{"namespaces":{"\\Tuxxedo\\Exception":{"docblock":{"description":"Exception namespace, this contains all the core exceptions defined within\r\nthe library.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Exception\\TemplateCompiler":{"reuses":[],"constants":[{"constant":"TYPE_NONE","namespace":"\\Tuxxedo\\Exception","docblock":{"description":"Exception type - None","tags":{"var":"integer","since":"1.2.0"}},"metadata":{"docblock":true}},{"constant":"TYPE_CONDITION","namespace":"\\Tuxxedo\\Exception","docblock":{"description":"Exception type - Condition","tags":{"var":"integer","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"stack_data","docblock":{"description":"Compiler stack data","tags":{"var":"\\stdClass"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a template compiler excepton","tags":{"param":[["string","The error message"],["\\stdClass","The current compiler stack data"]],"changelog":[["1.1.0","Added the $stack_data parameter"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getStackData","docblock":{"description":"Fetches the compiler stack data","tags":{"return":["\\stdClass","Returns the compiler stack data, and NULL if non was available"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Exception","extends":"\\Tuxxedo\\Exception","implements":[],"docblock":{"description":"Template compiler exception, any compilation error will be\r\nof this exception type.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Exception\/Translated.php":{"namespaces":{"\\Tuxxedo\\Exception":{"docblock":{"description":"Exception namespace, this contains all the core exceptions defined within\r\nthe library.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Exception\\Translated":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new internalizationized exception, meaning that the\r\ncontents of this exception may be formatted for internationalized\r\nusage.\r\n\r\nIf the internationalization object is not instanciated, then the\r\nmessage is used as a raw translation, if the translation parameter\r\nis specified then its formatted using a sprintf-alike syntax,\r\nexample:\r\n\r\n<code>\r\ntry\r\n{\r\n\tthrow new Exception\\Translated('You are not old enough to view this content, you must be %d years old', 'age_limit_x', 18);\r\n}\r\ncatch(Exception\\Translated $e)\r\n{\r\n\techo $e->getMessage();\r\n}\r\n<\/code>\r\n\r\nIf the translation method is specified and the component is not loaded, then\r\nformatting will be applied internally.\r\n\r\nNow if the internationalization component is loaded, then the above\r\nwould have outputted the same, however internally it would lookup the\r\nphrase name 'age_limit_x' within the internationalization object, and\r\nfind its translation phrase and format it like regular phrases are\r\nformatted with the {1}, {2}, {N} syntax.","tags":{"param":[["string","The untranslated message, in case of the internationalization library was not loaded"],["string","The translation phrase"],["mixed","Optionally translation phrase replacement or parameter 1, 2, N, ..."]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Exception","extends":"\\Tuxxedo\\Exception","implements":[],"docblock":{"description":"Translated exception, this works like the standard\r\nUI exception except that it can format the message\r\nlike the Internationalization object.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Exception\/Xml.php":{"namespaces":{"\\Tuxxedo\\Exception":{"docblock":{"description":"Exception namespace, this contains all the core exceptions defined within\r\nthe library.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Exception\\Xml":{"reuses":[],"constants":[{"constant":"TYPE_LIBXML","namespace":"\\Tuxxedo\\Exception","docblock":{"description":"Exception type constant - LibXML (default)","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"TYPE_EXPAT","namespace":"\\Tuxxedo\\Exception","docblock":{"description":"Exception type constant - EXPAT","tags":{"var":"integer"}},"metadata":{"docblock":true}}],"properties":[{"property":"parser","docblock":{"description":"The XML parser that generated this exception","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"type","docblock":{"description":"The XML parser type (One of the TYPE_* constants)","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"xml_error","docblock":{"description":"The LibXML error information","tags":{"var":"\\LibXMLError|\\stdClass"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new XML exception","tags":{"param":[["string","The XML parser that generated this exception if any"],["integer","The Exception type, this is one of the TYPE_* constants"],["mixed","Optionally a resource needed to fetch the error"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception on invalid errors"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getType","docblock":{"description":"Gets the backend library used for parsing for this parser","tags":{"param":[["boolean","Whether or not to return a name instead of the constant type"]],"return":["integer|string","Returns either one of the TYPE_* constants or the textural name for that type"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getParser","docblock":{"description":"Gets the parser if any that generated this exception","tags":{"return":["string","Returns the parser name or empty string if none"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getLevel","docblock":{"description":"Gets the level (depth) of where the parsing error occured","tags":{"return":["integer","Returns the current depth, the return value of this is always false when using EXPAT"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getColumn","docblock":{"description":"Gets the column of where the parsing error occured","tags":{"return":["integer","Returns the column"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getXmlLine","docblock":{"description":"Gets the line of where the error occured","tags":{"return":["integer","Returns the line"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Exception","extends":"\\Tuxxedo\\Exception\\Basic","implements":[],"docblock":{"description":"XML Exception\r\n\r\nException designed to carry error information from a failed\r\nXML parsing attempt.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Helper.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Helper":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new helper","tags":{"param":[["\\Tuxxedo\\Registry","The Tuxxedo object reference"]]}},"metadata":{"final":false,"abstract":true,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"factory","docblock":{"description":"Factory method for loading a new helper\r\n\r\nIf loading the same type of helper more than once and choose to register it within\r\nthe registry, then the hold one will be overrridden and it will be available as:\r\n\r\n<code>\r\nuse Tuxxedo\\Helper;\r\n\r\nHelper::factory('timer', true);\r\n\r\n$registry->timer->start('Test');\r\n\r\nHelper::factory('timer', true);\r\n\r\n$registry->timer->stop('Test'); \/\/ Error, does not exists anymore\r\n<\/code>","tags":{"param":[["string","The helper handle to instanciate"],["boolean","Whether to register this helper in the registry"]],"return":["object","Returns a helper handle object reference"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if the helper is not a child of this class"]]}},"metadata":{"final":true,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"","implements":[],"docblock":{"description":"Helper loading interface","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":true,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Helper\/Database.php":{"namespaces":{"\\Tuxxedo\\Helper":{"docblock":{"description":"Helper namespace, this namespace is for standard helpers that comes\r\nwith Engine.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Helper\\Database":{"reuses":[],"constants":[],"properties":[{"property":"instance","docblock":{"description":"Database instance","tags":{"var":"\\Tuxxedo\\Database"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"driver","docblock":{"description":"Database driver","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs the database helper","tags":{"param":[["\\Tuxxedo\\Registry","The Tuxxedo object reference"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setInstance","docblock":{"description":"Sets a new instance of a database object","tags":{"param":[["\\Tuxxedo\\Database","The database object to apply operations on"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getDriver","docblock":{"description":"Gets the canonical driver name","tags":{"return":["string","Returns the canonical driver name for the internal instance"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"truncate","docblock":{"description":"Truncates a database table","tags":{"param":[["string","The table to truncate"]],"return":["boolean","Returns true on succes and false on error"],"throws":[["\\Tuxxedo\\Exception\\SQL","Throws an SQL exception if the database operation failed"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"count","docblock":{"description":"Counts the number of rows in a table","tags":{"param":[["string","The table to count"],["string","Optionally an index, defaults to *"],["array","Key => value pairs for a WHERE, defaults to no 'where' clause, all values are escaped"]],"return":["integer","Returns the number of rows, and false on error"],"throws":[["\\Tuxxedo\\Exception\\SQL","Throws an SQL exception if the database operation failed"]],"changelog":[["1.2.0","Added the $where parameter"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getTables","docblock":{"description":"Gets all table within a database\r\n\r\nUnsupported drivers are:","tags":{"param":[["string","The database name, if differs from the current connection"]],"return":["\\Tuxxedo\\Database\\Result","Returns a database result object, and false if unsupported or if no tables exists"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"tableOptimize","docblock":{"description":"Table operation - optimize\r\n\r\nUnsupported drivers are:","tags":{"param":[["string","The table name"]],"return":["string","Returns the status, and false if unsupported"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"tableRepair","docblock":{"description":"Table operation - repair\r\n\r\nUnsupported drivers are:","tags":{"param":[["string","The table name"]],"return":["string","Returns the status, and false if unsupported"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getColumns","docblock":{"description":"Gets all columns in from a table","tags":{"param":[["string","The table name"]],"return":["array","Returns an array with all the column names for that table"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Helper","extends":"","implements":[],"docblock":{"description":"Database utilities helper\r\n\r\nThis helper assumes the 'db' key is registered to an instance of\r\nusing the 'setInstance' method.\r\n\r\nNote that some drivers may not be fully supported, in paticular\r\nSQLite is not supported by some of the table operational methods.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","changelog":[["1.2.0","This class now escapes all input unlike before where only some were escaped"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Helper\/Timer.php":{"namespaces":{"\\Tuxxedo\\Helper":{"docblock":{"description":"Helper namespace, this namespace is for standard helpers that comes\r\nwith Engine.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Helper\\Timer":{"reuses":[],"constants":[],"properties":[{"property":"timers","docblock":{"description":"Holds the registered timers","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"start","docblock":{"description":"Starts a timer","tags":{"param":[["string","The name of the timer"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"stop","docblock":{"description":"Stops a timer and deletes it","tags":{"param":[["string","The name of the timer"]],"return":["float","Returns the time elapsed since the start or 0.0 on invalid timer"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"get","docblock":{"description":"Gets the time since a timer was started","tags":{"param":[["string","The name of the timer"]],"return":["float","Returns the time elapsed since the start or 0.0 on invalid timer"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Helper","extends":"","implements":[],"docblock":{"description":"Timer helper","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Input.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Input":{"reuses":[],"constants":[{"constant":"TYPE_NUMERIC","namespace":"\\Tuxxedo","docblock":{"description":"Data filter constant, numeric value","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"TYPE_STRING","namespace":"\\Tuxxedo","docblock":{"description":"Data filter constant, string value","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"TYPE_EMAIL","namespace":"\\Tuxxedo","docblock":{"description":"Data filter constant, email value","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"TYPE_BOOLEAN","namespace":"\\Tuxxedo","docblock":{"description":"Data filter constant, boolean value","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"OPT_RAW","namespace":"\\Tuxxedo","docblock":{"description":"Data filter option, gets the raw value\r\nof the input without any type of santizing","tags":{"var":"integer","changelog":[["1.1.0","Prior this constant was named 'INPUT_OPT_RAW'"]]}},"metadata":{"docblock":true}},{"constant":"OPT_ARRAY","namespace":"\\Tuxxedo","docblock":{"description":"Data filter option, tells the cleaner that this\r\nis an array input and any of its elements must be of\r\nthe given type. Note that recursive operations are not\r\ndone by the data filter","tags":{"var":"integer","changelog":[["1.1.0","Prior this constant was named 'INPUT_OPT_ARRAY'"]]}},"metadata":{"docblock":true}}],"properties":[],"methods":[{"method":"get","docblock":{"description":"Filters 'GET' data","tags":{"param":[["string","Field name in the input source"],["integer","Type of input filtering performed"],["integer","Additional filtering options"]],"return":["mixed","Returns the filtered value, returns NULL on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"post","docblock":{"description":"Filters 'POST' data","tags":{"param":[["string","Field name in the input source"],["integer","Type of input filtering performed"],["integer","Additional filtering options"]],"return":["mixed","Returns the filtered value, returns NULL on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"cookie","docblock":{"description":"Filters 'COOKIE' data","tags":{"param":[["string","Field name in the input source"],["integer","Type of input filtering performed"],["integer","Additional filtering options"]],"return":["mixed","Returns the filtered value, returns NULL on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"user","docblock":{"description":"Filters 'user' data, as passed to this method","tags":{"param":[["string","The data to clean"],["integer","Type of input filtering performed"]],"return":["mixed","Returns the filtered value, returns NULL on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"process","docblock":{"description":"Protected filter method used by the GPC(U) methods\r\nto filter data.","tags":{"param":[["integer","Where the data to filter is coming from (1 = GET, 2 = POST, 3 = COOKIE & 4 = User)"],["string","Field name in the input source"],["integer","Type of input filtering performed"],["integer","Additional filtering options"]],"return":["mixed","Returns the filtered value, returns NULL on error"]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"","implements":[],"docblock":{"description":"Input filtering class, this class cleans data from\r\nthe user using the filter extension","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","changelog":[["1.1.0","Prior this class was named 'Filter'"],["1.1.0","The 'filter' PHP extension which previously was optional is now required"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Intl.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Intl":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Intl":{"reuses":[],"constants":[],"properties":[{"property":"registry","docblock":{"description":"Private instance to the Tuxxedo registry","tags":{"var":"\\Tuxxedo\\Registry"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"phrases","docblock":{"description":"Holds the current loaded phrases","tags":{"var":"Array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new internationalization object","tags":{"param":[["array","The language data to use"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"invoke","docblock":{"description":"Magic method called when creating a new instance of the\r\nobject from the registry","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["array","The configuration array"]],"return":["object","Object instance"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if an invalid (or not cached) language id was used"]],"changelog":[["1.2.0","This method now tries to resolve the browsers Accept-Language and use that as a preference"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"cache","docblock":{"description":"Caches a phrase group, trying to cache an already loaded\r\nphrase group will recache it","tags":{"param":[["array","A list of phrase groups to load"],["array","An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements"]],"return":["boolean","Returns true on success otherwise false"],"throws":[["\\Tuxxedo\\Exception\\SQL","Throws an exception if the query should fail"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getPhrasegroup","docblock":{"description":"Gets all phrases from a specific phrasegroup","tags":{"param":[["string","The phrasegroup to get"],["boolean","Whether to return a new phrasegroup object (default true) or just an array"]],"return":["mixed","Depending on the value of second parameter, an object or array is returned. False is returned on faliure"],"throw":{"1":"\\Tuxxedo\\Exception\\Basic","2":"Throws","3":"a","4":"basic","5":"exception","6":"if","7":"the","8":"second","9":"parameter","10":"is","11":"set","12":"to","13":"return","14":"an","15":"object","16":"and","17":"the","18":"phrasegroup","19":"fails","20":"to","21":"load"}}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getPhrasegroups","docblock":{"description":"Gets all phrasegroups","tags":{"return":["array","Returns an array with all loaded phrasegroups, false is returned if no phrasegroups is loaded."]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"find","docblock":{"description":"Finds a phrase","tags":{"param":[["string","The phrase to find"],["string","Optionally search in a specific phrasegroup, defaults to search in all"]],"return":["string","Returns a phrases translation, false is returned on failure"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"format","docblock":{"description":"Format a translation string\r\n\r\nTranslation strings uses the following format:\r\n<code>\r\n\/\/Phrase 'greeting' = \"Hej {1}, hvordan g\u00e5r det?\";\r\n\r\necho $intl->format('greeting', 'Madeleine');\r\n\r\n\/\/'Hej Madeleine, hvordan g\u00e5r det?'\r\n<\/code>","tags":{"param":[["string","The phrase to perform replacements on"],["scalar","Replacement string #1"],["scalar","Replacement string #n"]],"return":["string","Returns the formatted translation string"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getPhrases","docblock":{"description":"Gets all phrases, note that phrases may be overridden by\r\nanother if there is more with the same name. To overcome this\r\nlimitation you must fetch the phrasegroup in which the phrase\r\nbelongs and fetch it from there","tags":{"return":["array","Returns an array containing all loaded phrases and empty array if no phrases are loaded"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getISOCodes","docblock":{"description":"Gets the browser language codes in priority","tags":{"return":["array","Returns an array with the language codes in priority from the user's browser, each code may be either 2 or 5 bytes long or NULL in case the HTTP_ACCEPT_LANGUAGE variable was not set"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"__unset","docblock":{"description":"Unloads a phrasegroup from current memory","tags":{"param":[["string|array","The name of the phrasegroup(s) to remove from the cache"]],"return":["boolean","Returns true on success and false on error"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"doPhrasegroupFilter","docblock":{"description":"Filter callback for checking if a phrasegroup have any\r\nphrases","tags":{"param":[["string","The phrasegroup to check"]],"return":["boolean","True if is one or more phrases in that phrasegroup, false if none"]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":false,"private":true,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":["\\Tuxxedo\\Design\\Invokable"],"docblock":{"description":"Internationalization Interface\r\n\r\nThis class deals with basic routines for internationalization\r\nsupport and its relative components.\r\n\r\nThis component reserves the registry name 'phrase' for the\r\nglobal phrase array.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Intl\/Phrasegroup.php":{"namespaces":{"\\Tuxxedo\\Intl":{"docblock":{"description":"Internationalization namespace, this contains components for\r\ninternationalization manipulation, like phrases and phrasegroups.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Intl":""},"classes":{"\\Tuxxedo\\Intl\\Phrasegroup":{"reuses":[],"constants":[],"properties":[{"property":"phrasegroup","docblock":{"description":"Phrase group name","tags":{"var":"string","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new phrasegroup object","tags":{"param":[["\\Tuxxedo\\Intl","Reference to the internationalization object to use for this phrasegroup"],["string","Name of the phrasegroup to instanciate"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if the phrasegroup isnt cached in the internationalization object"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getName","docblock":{"description":"Gets the phrasegroup name for this object","tags":{"return":["string","Returns the phrasegroup name"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Intl","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":[],"docblock":{"description":"Internationalization phrasegroup class\r\n\r\nContains basic routines for working with single phrasegroups.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","changelog":[["1.2.0","This class now implements the InfoAccess pattern"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Loader.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":""},"classes":{"\\Tuxxedo\\Loader":{"reuses":[],"constants":[{"constant":"MODE_DEFAULT","namespace":"\\Tuxxedo","docblock":{"description":"Loader mode - Default","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"MODE_PSR0","namespace":"\\Tuxxedo","docblock":{"description":"Loader mode - PSR-0","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"mode","docblock":{"description":"Loader mode","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"separator","docblock":{"description":"Default separator for classes, this is commonly '_'\r\nfor non namespaced code. Separators may have different\r\nmeaning depending on the loader modes.\r\n\r\nThis value is ignored in the following loader modes:","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"root","docblock":{"description":"Default root to load from, defaults to the library\r\npath","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"routes","docblock":{"description":"Custom routing definitions","tags":{"var":"array","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"mode","docblock":{"description":"Defines which loader mode to use","tags":{"param":[["integer","The loader mode; one of the MODE_* class constants"]],"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"routeAsPath","docblock":{"description":"Defines one or more rewrite rules for autoloading\r\npaths","tags":{"param":[["string","The class to define custom rules for"],["string","The class separator, defaults to a backslash"],["string","The root path to load from"]],"return":["void","No value is returned"],"changelog":[["1.2.0","This method now only supports defining one route at a time"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"routeAsRegex","docblock":{"description":"Defines one or more rewrite rules for autoloading\r\npaths using PCRE","tags":{"param":[["string","The regular expression to match (without delimiters and modifiers)"],["string","The matching formatting, including separators if any"]],"return":["void","No value is returned"],"changelog":[["1.2.0","This method now only supports defining one route at a time"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"routeAsCallback","docblock":{"description":"Defines a callback for routing, this can be used to virtually alias\r\nor similar in siturations where the other routing implementations\r\nsimply cannot match","tags":{"param":[["string","The matching part, this can be a full name or a partial string"],["callback","The callback to route to"]],"return":["void","No value is returned"],"changelog":[["1.2.0","This method now only supports defining one route at a time"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"getNormalizedPath","docblock":{"description":"Normalizes a class\/interface name into a path","tags":{"param":[["string","The class\/interface to convert"]],"return":["string","Returns the matching path"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"load","docblock":{"description":"Autoloads a class or interface, if the class or interface fails to load, the error handler is called\r\ndirectly and the error is shown.","tags":{"param":[["string","The class or interface to autoload"],["boolean","Whether to return true or false in case of loading instead of calling the error handler"]],"return":["boolean","Returns true if loaded, false otherwise if loading failed (latter is only true, if the $silent parameter is set to true)"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if its loaded into runtime, else falls back to a standard error call"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"exists","docblock":{"description":"Check whether a class, interface or trait exists without attempting to autoload them","tags":{"param":[["string","The class, interface or trait to check"]],"return":["boolean","True if exists and false otherwise"],"since":"1.1.0","changelog":[["1.2.0","This method now also checks for traits"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"","implements":[],"docblock":{"description":"Autoloader handler","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/LocalCache.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Database":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\LocalCache":{"reuses":[],"constants":[],"properties":[{"property":"db","docblock":{"description":"Database instance","tags":{"var":"\\Tuxxedo\\Database"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"cache","docblock":{"description":"Holds the cached elements from the datastore","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor","tags":{"param":[["\\Tuxxedo\\Database","The database instance to use, if none is supplied the registry registered one is used"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if the database instance is not loaded"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"load","docblock":{"description":"Loads a specific table into the cache","tags":{"param":[["string","The table name"],["array","An array of conditions to load specific entries or limit them"],["string","The alias if any (defaults to the table name if NULL)"]],"return":["boolean","Returns true if the entries was loaded, otherwise false. True can also be returned if none entries was loaded"],"throws":[["\\Tuxxedo\\Exception\\SQL","Throws an SQL exception if a query should fail"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getNum","docblock":{"description":"Gets the number of entries for a specific entry","tags":{"param":[["string","The cache name"]],"return":["integer","Returns the number of entries, or 0 on an invalid entry"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"lookup","docblock":{"description":"Internal lookup method","tags":{"param":[["string","The cache name"],["array","The fields to return or NULL for everything (default)"]],"return":["array","Returns the entries, or false on error. An empty array can be returned"]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"find","docblock":{"description":"Finds an entry","tags":{"param":[["string","The cache name"],["array","The fields to return or NULL for everything (default)"]],"return":["array","Returns the entries, or false on error. An empty array can be returned. If only one result is returned, then a non multi dimentional array is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"findSpecific","docblock":{"description":"Finds a specific entry","tags":{"param":[["string","The cache name"],["array","An array of conditions (such as values that must pass in key => value pairs, if a value is an array then one or more of the values must exists to pass)"],["array","The fields to return or NULL for everything (default)"]],"return":["array","Returns the entries, or false on error. An empty array can be returned. If only one result is returned, then a non multi dimentional array is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"unload","docblock":{"description":"Unloads one or more cached entries","tags":{"param":[["string|array","The cache name, or an array of names"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"","implements":[],"docblock":{"description":"Local cache registry\r\n\r\nThis class implements a localized cache registry for a\r\nscript request or instance. This works much like the\r\ndatastore cache except that it works with live data.\r\n\r\nThe design and need for this class comes from as a need\r\nfrom the datamanager component orignally to prevent having\r\nto send queries to the database and sacrifice that network\r\ncommunication for script memory.\r\n\r\n<code>\r\nuse Tuxxedo\\LocalCache;\r\nuse Tuxxedo\\Registry;\r\n\r\n\/\/Registry\r\n$registry = Registry::init();\r\n\r\n\/\/Load LocalCache\r\n$registry->set('lcache', new LocalCache);\r\n\r\n\/\/We need to get all the books, but our library \r\n\/\/is big, and have over 1000 entries, so to prevent \r\n\/\/filling up the entire memory with entries we may \r\n\/\/not need we are a little specific\r\n\r\n\/\/The third and optional parameter can be used to \r\n\/\/specify an alias for that table if the cache is \r\n\/\/being used over multiple tables with the same \r\n\/\/name. By default it uses the same name as the table \r\n\/\/for calls to LocalCache::find(), ...\r\n\r\n\/\/Internally the following is executed\r\n\/\/\r\n\/\/1)SHOW COLUMNS FROM `books`\r\n\/\/2)SELECT * FROM `books` WHERE `title` LIKE 'PHP%'\r\n$lcache->load('books', ['title' => 'PHP*']);\r\n\r\n\/\/Find the number of records loaded into cache\r\nprintf('There is currently %d book(s) matching \\'PHP*\\' loaded', $lcache->getNum('books'));\r\n\r\n\/\/We already know that the book we want to find have \r\n\/\/the id of '42'\r\n\/\/\r\n\/\/If this book is loaded into cache, then the records \r\n\/\/that matches the id of 42 is returned\r\n$book = $lcache->findSpecific('books', ['id' => 42]);\r\n\r\n\/\/We can also get all the books loaded, but we only want the \r\n\/\/title of each\r\n$books = $lcache->find('books', ['title']);\r\n\r\n\/\/List them\r\necho '<ul>';\r\n\r\nforeach($books as $book)\r\n{\r\n\tprintf('<li>%s<\/li>', $book['title']);\r\n}\r\n\r\necho '<\/ul>';\r\n\r\n\/\/We can also unload cache to free the memory or to \r\n\/\/force a recache\r\n$lcache->unload('books');\r\n\r\nprintf('There is currently %d book entries loaded', $lcache->getNum('books'));\r\n<\/code>","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/MVC\/Controller.php":{"namespaces":{"\\Tuxxedo\\MVC":{"docblock":{"description":"MVC (Model-View-Controller) namespace, this contains all the base\r\nimplementation of each of the building bricks and extensions for\r\nextending them even further.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":"","\\Tuxxedo\\MVC\\View":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\MVC\\Controller":{"reuses":[],"constants":[],"properties":[{"property":"registry","docblock":{"description":"Private instance to the Tuxxedo registry","tags":{"var":"\\Tuxxedo\\Registry"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"router","docblock":{"description":"Router object","tags":{"var":"\\Tuxxedo\\Router"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"layout","docblock":{"description":"Layout template object","tags":{"var":"\\Tuxxedo\\MVC\\View"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"view","docblock":{"description":"Current view template","tags":{"var":"\\Tuxxedo\\MVC\\View"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setRouter","docblock":{"description":"Set the router object","tags":{"param":[["\\Tuxxedo\\Router","Router object used"]],"return":["void","No value is returned"],"changelog":[["1.2.0","Any router can be passed to this method, prior only 'Uri' could be passed"],["1.2.0","Removed the 'final' modifier from this method"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setLayout","docblock":{"description":"Set the template object used for the layout","tags":{"param":[["\\Tuxxedo\\MVC\\View","Layout template"]],"return":["void","No value is returned"],"changelog":[["1.2.0","Removed the 'final' modifier from this method"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setView","docblock":{"description":"Set the view object","tags":{"param":[["\\Tuxxedo\\MVC\\View","View template for the current action"]],"return":["void","No value is returned"],"changelog":[["1.2.0","Removed the 'final' modifier from this method"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"dispatch","docblock":{"description":"Dispatches the controller and renders the page content","tags":{"return":["string","Rendered view"],"throws":[["\\Tuxxedo\\Exception","If the controller does not exists"],["\\Tuxxedo\\Exception\\MVC\\InvalidAction","If the action method does not exists"]],"changelog":[["1.2.0","Removed the 'final' modifier from this method"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\MVC","extends":"","implements":[],"docblock":{"description":"The base controller class for the MVC components","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"final":false,"abstract":true,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/MVC\/Controller\/Dispatchable.php":{"namespaces":{"\\Tuxxedo\\MVC\\Controller":{"docblock":{"description":"Controller extensions namespace. In here all extensions are stored\r\nfor MV-Controllers.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"docblock":true}}},"aliases":[],"classes":[],"interfaces":{"\\Tuxxedo\\MVC\\Controller\\Dispatchable":{"reuses":[],"constants":[{"constant":"DISPATCH_PRE","namespace":"\\Tuxxedo\\MVC\\Controller","docblock":{"description":"Dispatch hook constant - Pre dispatching","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"DISPATCH_POST","namespace":"\\Tuxxedo\\MVC\\Controller","docblock":{"description":"Dispatch hook constant - Post dispatching","tags":{"var":"integer"}},"metadata":{"docblock":true}}],"properties":[],"methods":[{"method":"dispatcher","docblock":{"description":"Controller dispatch hook, this hook is called for\r\nboth pre and post dispatching and uses its only\r\nparameter to determine which state we currently are\r\nin","tags":{"param":[["integer","The current dispatching state"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\MVC\\Controller","extends":"","implements":[],"docblock":{"description":"Interface for dispatchable controller hooks","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/MVC\/Model.php":{"namespaces":{"\\Tuxxedo\\MVC":{"docblock":{"description":"MVC (Model-View-Controller) namespace, this contains all the base\r\nimplementation of each of the building bricks and extensions for\r\nextending them even further.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":""},"classes":{"\\Tuxxedo\\MVC\\Model":{"reuses":[],"constants":[],"properties":[{"property":"methods","docblock":{"description":"The methods to map","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"remap","docblock":{"description":"Re-indexes the mapper","tags":{"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"__call","docblock":{"description":"Caller method, this emulates the defined method mappings","tags":{"param":[["string","The method to call"],["array","The method arguments if any"]],"return":["mixed","Returns the value of the mapped method"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\MVC","extends":"","implements":[],"docblock":{"description":"Model class\r\n\r\nIn a MVC application this would be extended to create logical models,\r\nthat are populated with data from another source (e.g. a datamanager).\r\n\r\nThis class implements a few methods that make writing models less\r\ntedious, without having to write the same methods for each model.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/MVC\/Model\/Mapper.php":{"namespaces":{"\\Tuxxedo\\MVC\\Model":{"docblock":{"description":"Model extensions namespace. In here all extensions are stored\r\nfor Models-VC.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"docblock":true}}},"aliases":[],"classes":[],"interfaces":{"\\Tuxxedo\\MVC\\Model\\Mapper":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"getMapper","docblock":{"description":"Model mapper hook, this returns a list of the methods to\r\nmap properties for. To reindex the mapper, call the remap()\r\nmember method.","tags":{"return":["array","Returns an array of the methods to map"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\MVC\\Model","extends":"","implements":[],"docblock":{"description":"Interface for mapable models","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/MVC\/Router.php":{"namespaces":{"\\Tuxxedo\\MVC":{"docblock":{"description":"MVC (Model-View-Controller) namespace, this contains all the base\r\nimplementation of each of the building bricks and extensions for\r\nextending them even further.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Loader":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\MVC\\Router":{"reuses":[],"constants":[],"properties":[{"property":"registry","docblock":{"description":"Private instance to the Tuxxedo registry","tags":{"var":"\\Tuxxedo\\Registry"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"prefix","docblock":{"description":"Application namespace","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"controller","docblock":{"description":"Current controller","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"action","docblock":{"description":"Current action","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"default_controller","docblock":{"description":"Default controller","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"default_action","docblock":{"description":"Default action","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"parameters","docblock":{"description":"Additional parameters","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, set the controller and action to their\r\ndefault names","tags":{"param":[["string","The application prefix (namespace), e.g. \\Application\\Controllers\\, must end with a \\"]],"changelog":[["1.2.0","The $prefix parameter can now be used to define a controller from another namespace"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getPreloadables","docblock":{"description":"Gets the preloadables for the bootstrap before dispatching\r\nthe router","tags":{"return":["array","Returns a multi dimentional array with preloadable data"],"throws":[["\\Tuxxedo\\Exception\\MVC\\InvalidController","Throws an invalid controller exception if the controller could not be loaded"]],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setController","docblock":{"description":"Set the normalised controller name","tags":{"param":[["string","The controller name"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getController","docblock":{"description":"Get the routed controller name","tags":{"return":["string","The Controller name"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setAction","docblock":{"description":"Set the normalised action name","tags":{"param":[["string","The action name"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getAction","docblock":{"description":"Get the routed action name","tags":{"return":["string","The action name"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getActionMethod","docblock":{"description":"Get the routed action method name","tags":{"return":["string","The action name"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getParameters","docblock":{"description":"Gets all parameters","tags":{"return":["array","Returns all the parameters defined"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__isset","docblock":{"description":"Check if a parameter is set","tags":{"param":[["string","Index of the parameter to check"]],"return":["bool","Returns true if the parameter exists, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"route","docblock":{"description":"Route (start the controller)","tags":{"return":["\\Tuxxedo\\MVC\\Controller","Returns a new controller instance"],"throws":[["\\Tuxxedo\\Exception\\MVC\\InvalidController","Throws an invalid controller exception if the controller could not be loaded"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__invoke","docblock":{"description":"Route (shorthand method for the route() method) and calls the controller dispatching mechanism","tags":{"return":["\\Tuxxedo\\MVC\\Controller","Returns a new controller instance"],"throws":[["\\Tuxxedo\\Exception\\MVC\\InvalidController","Throws an invalid controller exception if the controller could not be loaded"]],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\MVC","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":[],"docblock":{"description":"The router can detect from a range of sources the required controller and\r\naction to execute.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/MVC\/Router\/Uri.php":{"namespaces":{"\\Tuxxedo\\MVC\\Router":{"docblock":{"description":"Router namespace, this contains various interfaces for routing using\r\ndifferent types of protocols","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\MVC\\Router":""},"classes":{"\\Tuxxedo\\MVC\\Router\\Uri":{"reuses":[],"constants":[{"constant":"TYPE_CONTROLLER","namespace":"\\Tuxxedo\\MVC\\Router","docblock":{"description":"Rule type constant - Controller","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"TYPE_ACTION","namespace":"\\Tuxxedo\\MVC\\Router","docblock":{"description":"Rule type constant - Action","tags":{"var":"integer"}},"metadata":{"docblock":true}}],"properties":[],"methods":[{"method":"parse","docblock":{"description":"Parses a uri and dispatches them all into controller, action and\r\nparameters.\r\n\r\nThe general pattern for the URI routing in this case is fairly common\r\nAssumed default names are Index and index for controller and action,\r\nthough these can be changed using the methods.\r\n\r\nDefault routes:\r\n\r\nFollows #4 and #5 based on whether number of pieces is even or odd (\r\nodd = #4, even = #5)","tags":{"param":[["string","The Uri to parse"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"canonical","docblock":{"description":"Generates a canonical name for various components","tags":{"param":[["string","The path or component to convert"],["integer","A rule type, this is used to make sure things are callable"]],"return":["string","Returns the canonical name"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\Tuxxedo\\MVC\\Router","extends":"\\Tuxxedo\\MVC\\Router","implements":[],"docblock":{"description":"Uri based router interface.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/MVC\/View.php":{"namespaces":{"\\Tuxxedo\\MVC":{"docblock":{"description":"MVC (Model-View-Controller) namespace, this contains all the base\r\nimplementation of each of the building bricks and extensions for\r\nextending them even further.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Template":""},"classes":{"\\Tuxxedo\\MVC\\View":{"reuses":[],"constants":[],"properties":[],"methods":[],"namespace":"\\Tuxxedo\\MVC","extends":"\\Tuxxedo\\Template","implements":[],"docblock":{"description":"The View class for MVC based components, this wraps around the\r\nexisting style API.\r\n\r\nThis class currently only serves as a wrapper for the regular\r\ntemplate class.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC","changelog":[["1.1.0","This is now an alias of \\Tuxxedo\\Template"]]}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/MVC\/View\/Layout.php":{"namespaces":{"\\Tuxxedo\\MVC\\View":{"docblock":{"description":"View namespace, this contains routines to ease development\r\nof MVC related applications.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\MVC\\View":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\MVC\\View\\Layout":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructor, constructs a new view layout","tags":{"param":[["string","The name of the view to load as layout"],["array","Default variables to set"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setLayout","docblock":{"description":"Wrapper method for changing layout mode, this\r\ncannot be disabled, thrus no error is emitted","tags":{"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\MVC\\View","extends":"\\Tuxxedo\\MVC\\View","implements":[],"docblock":{"description":"View layout, this works as a wrapper to automatically enable\r\nlayout mode. Layout mode cannot be disabled, which is the only\r\ndifference from a regular view.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"MVC","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Options.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager":"","\\Tuxxedo\\Design":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Options":{"reuses":[],"constants":[],"properties":[{"property":"changed","docblock":{"description":"Boolean flag to for the saving method","tags":{"var":"boolean"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"options","docblock":{"description":"Holds the options, this is a reference to\r\nthe datastore","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"categories","docblock":{"description":"Holds a list of options and their categories","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs the options class","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"invoke","docblock":{"description":"Magic method called when creating a new instance of the\r\nobject from the registry","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["array","The configuration array"]],"return":["object","Object instance"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if neither the 'options' and 'optioncategories' datastore is loaded"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"__get","docblock":{"description":"Gets an option","tags":{"param":[["string","The name of the option"]],"return":["mixed","Returns the option value, and null on invalid options"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__set","docblock":{"description":"Sets an option","tags":{"param":[["string","The name of the option"],["mixed","The value of the option"]],"return":["void","Returns the old option value, and null on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"save","docblock":{"description":"Saves the current options within the datastore\r\n\r\nThis is useful for when the options are updated here on the fly to reflect changes directly in the code","tags":{"return":["boolean","Returns true if the options were saved with success (or if nothing was changed), otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":["\\Tuxxedo\\Design\\Invokable"],"docblock":{"description":"Options class, allows the options registry entry to allow\r\nusage of options as virtual properties and array access as\r\noption categories, so that its possible to pass namespaced\r\noptions to objects.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Registry.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":""},"classes":{"\\Tuxxedo\\Registry":{"reuses":[],"constants":[],"properties":[{"property":"instance","docblock":{"description":"Holds the main instance","tags":{"var":"\\Tuxxedo\\Registry"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":false,"private":true,"static":true,"docblock":true}},{"property":"configuration","docblock":{"description":"Holds the configuration array","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":false,"private":true,"static":false,"docblock":true}},{"property":"instances","docblock":{"description":"Holds an array of the instances registered","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":false,"private":true,"static":false,"docblock":true}},{"property":"globals","docblock":{"description":"Holds the list of global variables across\r\nEngine","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":false,"private":true,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Disable the ability to construct the object","tags":{}},"metadata":{"final":true,"abstract":false,"public":false,"protected":false,"private":true,"static":false,"docblock":true}},{"method":"__clone","docblock":{"description":"Disable the ability to clone the object","tags":{}},"metadata":{"final":true,"abstract":false,"public":false,"protected":false,"private":true,"static":false,"docblock":true}},{"method":"__get","docblock":{"description":"Magic get method, this handles overloading of registered\r\ninstances","tags":{"param":[["string","Instance name"]],"return":["object","Returns the object instance if it exists, otherwise boolean false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__isset","docblock":{"description":"Allows the usage of isset() on registry objects","tags":{"param":[["string","The registry object to check"]],"return":["boolean","Returns true if the object exists otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__unset","docblock":{"description":"Allows the usge of unset() on registry objects","tags":{"param":[["string","The registry object to unload"]],"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"init","docblock":{"description":"Initializes a new object instance, this implements the\r\nsingleton pattern and can be called from any context and\r\nthe same object is returned","tags":{"param":[["array","The configuration array, this is only needed first time this is called"]],"return":["\\Tuxxedo\\Registry","An instance to the Tuxxedo object"]}},"metadata":{"final":true,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"register","docblock":{"description":"Registers a new instance and makes it accessable through\r\nthe name defined by the first parameter in the global scope\r\nlike the example below:\r\n\r\n<code>\r\nuse Tuxxedo\\Registry;\r\n\r\n$registry = Registry::init();\r\n$registry->register('test', '\\Full\\Class\\Path');\r\n\r\n$test->Methodname(); \/\/ or $registry->test->Methodname();\r\n<\/code>\r\n\r\nNote that the class must be a full path, and not an alias as\r\nthe class is instanciated inside the registry, not the scope\r\nwhere custom aliasing rules may be defined.","tags":{"param":[["string","The name of this instance"],["string","The class to register, this supports the 'Invokable' interface"]],"return":["object","Returns a reference to the created instance"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception in case of failure"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"invoke","docblock":{"description":"Invokes a class, calling its preloading method if available\r\nand then returns the instance object","tags":{"param":[["string","The class to register, this supports the 'Invokable' interface"]],"return":["object","Returns a reference to the created instance"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"set","docblock":{"description":"Sets a new reference in the registry","tags":{"param":[["string","The name of the reference"],["mixed","The value of the reference"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"get","docblock":{"description":"Gets a registered object instance","tags":{"param":[["string","The name of the object to get"]],"return":["object","Returns an instance to the object and boolean false on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"getConfiguration","docblock":{"description":"Gets the configuration array","tags":{"return":["array","Returns the configuration array if defined, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"globals","docblock":{"description":"Sets or gets a new global","tags":{"param":[["string","The name of the variable to set"],["mixed","A value, this can be of any type, this is only used if adding or editing a variable"]],"return":["mixed","Returns the value of variable on both set and get, and boolean false if trying to get an undefined variable"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"symtable","docblock":{"description":"Sets or gets a new value in a symbol table","tags":{"param":[["string","The name of the symbol table to read from\/write to"],["string","The name of the variable to set"],["mixed","A value, this can be of any type, this is only used if adding or editing a variable"]],"return":["mixed","Returns the value of variable on both set and get, and boolean false if trying to get an undefined variable"]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"","implements":[],"docblock":{"description":"Registry class, this acts as a mixed singleton\/registry\r\nobject.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Session.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":""},"classes":{"\\Tuxxedo\\Session":{"reuses":[],"constants":[],"properties":[{"property":"started","docblock":{"description":"Whether a session is started or not","tags":{"var":"boolean"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"id","docblock":{"description":"The session id","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"options","docblock":{"description":"The session options, such as prefix, path etc.","tags":{"var":"array","changelog":[["1.1.0","Added 'secure' for HTTPS enforcement"]]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"invoke","docblock":{"description":"Magic method called when creating a new instance of the\r\nobject from the registry","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["array","The configuration array"]],"return":["object","Object instance"],"changelog":[["1.2.0","This method no longer requires the datastore to be loaded to function"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"get","docblock":{"description":"Gets a session variable","tags":{"param":[["string","Variable name"],["boolean","Whether to include the session prefix or not, defaults to true"]],"return":["mixed","Returns the session variable value on success, or null on failure"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"set","docblock":{"description":"Sets a session variable","tags":{"param":[["string","Variable name"],["mixed","Variable value"],["boolean","Whether to include the session prefix or not, defaults to true"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"start","docblock":{"description":"Starts a session","tags":{"return":["void","No value is returned"],"changelog":[["1.2.0","Removed the old CSRF code that was never fully implemented"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"terminate","docblock":{"description":"Terminates a session","tags":{"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"restart","docblock":{"description":"Restarts a session\r\n\r\nThis basically calls terminate and then start as a shorthand method\r\ncall.","tags":{"return":["void","No value is returned"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"regenerate","docblock":{"description":"Regenerates a new session ID, note that APIs that utilizes the\r\nsession ID must be manually notified of this update to not cause\r\ndata mismatch","tags":{"param":[["boolean","Whether or not to keep the old session data"]],"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"offsetExists","docblock":{"description":"Checks whether a session variable is available","tags":{"param":[["scalar","The information row name to check"]],"return":["boolean","Returns true if the information is stored, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetGet","docblock":{"description":"Gets a value from a session variable","tags":{"param":[["scalar","The information row name to get"]],"return":["mixed","Returns the information value, and NULL if the value wasn't found"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetSet","docblock":{"description":"Sets a new session variable","tags":{"param":[["scalar","The information row name to set"],["mixed","The new\/update value for this row"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"offsetUnset","docblock":{"description":"Deletes a session variable","tags":{"param":[["scalar","The information row name to delete"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":["\\Tuxxedo\\Design\\Invokable"],"docblock":{"description":"Session interface, this class is designed to be attached to\r\nclasses that implements an interface based on sessions.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Style.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":"","\\Tuxxedo\\Template":""},"classes":{"\\Tuxxedo\\Style":{"reuses":[],"constants":[],"properties":[{"property":"registry","docblock":{"description":"Private instance to the Tuxxedo registry","tags":{"var":"\\Tuxxedo\\Registry"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"templates","docblock":{"description":"Holds the current loaded templates","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new style object","tags":{"param":[["array","The style data to use"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"invoke","docblock":{"description":"Magic method called when creating a new instance of the\r\nobject from the registry","tags":{"param":[["\\Tuxxedo\\Registry","The Registry reference"],["array","The configuration array"]],"return":["object","Object instance"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if an invalid (or not cached) style id was used"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"cache","docblock":{"description":"Caches a template, trying to cache an already loaded\r\ntemplate will recache it","tags":{"param":[["array","A list of templates to load"],["array","An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements"]],"return":["boolean","Returns true on success otherwise false"],"throws":[["\\Tuxxedo\\Exception\\SQL","Throws an exception if the query should fail"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isLoaded","docblock":{"description":"Checks if a template is loaded","tags":{"param":[["string","The name of the template"]],"return":["boolean","Returns true if the template is loaded, otherwise false"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"fetch","docblock":{"description":"Fetches a cached template","tags":{"param":[["string","The name of the template to fetch"]],"return":["string","Returns the compiled template code for execution, and boolean false on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"template","docblock":{"description":"Fetches a catched template and returns it as a template object","tags":{"param":[["string","The name of the template to fetch"],["boolean","Whether to activate the layout mode option of the template object"]],"return":["\\Tuxxedo\\Template","Returns a template object containing the template"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"unload","docblock":{"description":"Unloads a template from current memory","tags":{"param":[["string|array","The name of the template(s) to remove from the cache"]],"return":["boolean","Returns true on success and false on error"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":["\\Tuxxedo\\Design\\Invokable"],"docblock":{"description":"Styling API, this enables basic styling frontend for\r\ncaching templates and fetching them for execution.\r\n\r\nTo compile templates thats loadable through this class\r\nyou should look at the template compiler class.\r\nclass.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Style\/Storage.php":{"namespaces":{"\\Tuxxedo\\Style":{"docblock":{"description":"Style namespace, this contains all style related routines such as storage\r\nof templates within handlers and all loading functions. Extended template\r\nroutines are in the \\Tuxxedo\\Template namespace.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":"","\\Tuxxedo\\Style":""},"classes":{"\\Tuxxedo\\Style\\Storage":{"reuses":[],"constants":[],"properties":[{"property":"registry","docblock":{"description":"Private instance to the Tuxxedo registry","tags":{"var":"\\Tuxxedo\\Registry"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"style","docblock":{"description":"The style that this handler is assigned to","tags":{"var":"\\Tuxxedo\\Style"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"templates","docblock":{"description":"Reference to the template storage","tags":{"var":"object"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"loaded_engines","docblock":{"description":"List of loaded style engines","tags":{"var":"array","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new storage engine","tags":{"param":[["\\Tuxxedo\\Registry","The Tuxxedo object reference"],["\\Tuxxedo\\Style","Reference to the style object"],["object","Object reference to the templates data table"]]}},"metadata":{"final":false,"abstract":true,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"cache","docblock":{"description":"Caches a template, trying to cache an already loaded\r\ntemplate will recache it","tags":{"param":[["array","A list of templates to load"],["array","An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements"]],"return":["boolean","Returns true on success otherwise false"],"throws":[["\\Tuxxedo\\Exception\\SQL","Throws an exception if the query should fail"]]}},"metadata":{"final":false,"abstract":true,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"factory","docblock":{"description":"Factory method for creating a new storage engine instance","tags":{"param":[["\\Tuxxedo\\Registry","The Tuxxedo object reference"],["\\Tuxxedo\\Style","Reference to the style object"],["string","The storage engine to instanciate"],["object","Reference to the template storage object"]],"return":["object","Returns a style storage engine object reference"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception on invalid style storage engines"]]}},"metadata":{"final":true,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\Tuxxedo\\Style","extends":"","implements":[],"docblock":{"description":"Interface for template storage engines","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":true,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Style\/Storage\/Database.php":{"namespaces":{"\\Tuxxedo\\Style\\Storage":{"docblock":{"description":"Style storage namespace, this is for handlers that can load templates via\r\ndifferent backends such as file system or database. All must extend the","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":"","\\Tuxxedo\\Style":""},"classes":{"\\Tuxxedo\\Style\\Storage\\Database":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new storage engine","tags":{"param":[["\\Tuxxedo\\Registry","The Tuxxedo object reference"],["\\Tuxxedo\\Style","Reference to the style object"],["object","Object reference to the templates data table"]]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"cache","docblock":{"description":"Caches a template, trying to cache an already loaded\r\ntemplate will recache it","tags":{"param":[["array","A list of templates to load"],["array","An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements"],["array","An array passed by reference, this contains all the elements that where loaded if referenced"]],"return":["boolean","Returns true on success otherwise false"],"throws":[["\\Tuxxedo\\Exception\\SQL","Throws an exception if the query should fail"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Style\\Storage","extends":"\\Tuxxedo\\Style\\Storage","implements":[],"docblock":{"description":"Style storage engine for database based templates","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Style\/Storage\/Filesystem.php":{"namespaces":{"\\Tuxxedo\\Style\\Storage":{"docblock":{"description":"Style storage namespace, this is for handlers that can load templates via\r\ndifferent backends such as file system or database. All must extend the","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":"","\\Tuxxedo\\Style":""},"classes":{"\\Tuxxedo\\Style\\Storage\\Filesystem":{"reuses":[],"constants":[],"properties":[{"property":"path","docblock":{"description":"Directory where the compiled templates are saved","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new storage engine","tags":{"param":[["\\Tuxxedo\\Registry","The Tuxxedo object reference"],["\\Tuxxedo\\Style","Reference to the style object"],["object","Object reference to the templates data table"]],"changelog":[["1.1.0","The 'templatesdir' style table row can now be used to define a custom template directory if present"]]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"cache","docblock":{"description":"Caches a template, trying to cache an already loaded\r\ntemplate will recache it","tags":{"param":[["array","A list of templates to load"],["array","An array passed by reference, if one or more elements should happen not to be loaded, then this array will contain the names of those elements"],["array","An array passed by reference, this contains all the elements that where loaded if referenced"]],"return":["boolean","Returns true on success otherwise false"],"throws":[["\\Tuxxedo\\Exception\\SQL","Throws an exception if the query should fail"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Style\\Storage","extends":"\\Tuxxedo\\Style\\Storage","implements":[],"docblock":{"description":"Style storage engine for file system based templates","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Template.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Template":{"reuses":[],"constants":[],"properties":[{"property":"style","docblock":{"description":"The style object registered in the registry","tags":{"var":"\\Tuxxedo\\Style","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"name","docblock":{"description":"The name of the template to load","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"layout","docblock":{"description":"The layout mode","tags":{"var":"boolean"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"buffer","docblock":{"description":"Template buffer","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"header_template","docblock":{"description":"Template name - header","tags":{"var":"string","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"footer_template","docblock":{"description":"Template name - footer","tags":{"var":"string","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"property":"variables","docblock":{"description":"The variables used within the template","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"globals","docblock":{"description":"Holds the globally declared variables","tags":{"var":"array","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, constructs a new template","tags":{"param":[["string","The name of the template to load"],["boolean","Set to true to activate layout mode, and false to not"],["array","Default variables to set"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setLayout","docblock":{"description":"Whether to set this as a layout or not","tags":{"param":[["boolean","Set to true to activate layout mode, and false to not"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"globalSet","docblock":{"description":"Sets a global variable","tags":{"param":[["string","The name of the variable"],["mixed","The value of the variable"]],"return":["void","No value is returned"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"globalGet","docblock":{"description":"Gets a global variable","tags":{"param":[["string","The name of the variable"]],"return":["mixed","Returns the variable value, and NULL on non existant variable"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"globalExists","docblock":{"description":"Checks if a global variable exists","tags":{"param":[["string","The name of the variable"]],"return":["boolean","Returns true if the variable exists otherwise false"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"globalUnset","docblock":{"description":"Unsets a global variable","tags":{"param":[["string","The name of the variable"]],"return":["void","No value is returned"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"parse","docblock":{"description":"Parses a template","tags":{"return":["string","Returns the parsed template"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__toString","docblock":{"description":"Outputs a template","tags":{"return":["string","Returns the parsed template for outputting"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":[],"docblock":{"description":"Template class, this class serves as an object oriented way of creating\r\ntemplates, mainly designed for use with the MVC View class","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Template\/Compiler.php":{"namespaces":{"\\Tuxxedo\\Template":{"docblock":{"description":"Template namespace. This contains special routines for template handling\r\nand such. It is also the home of the template compiler.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":"","\\Tuxxedo\\Template\\Compiler\\Dummy":""},"classes":{"\\Tuxxedo\\Template\\Compiler":{"reuses":[],"constants":[{"constant":"OPT_NO_FUNCTION_CALL_LIMIT","namespace":"\\Tuxxedo\\Template","docblock":{"description":"Compiler option - Disable function call check","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"OPT_NO_CLASS_CALL_LIMIT","namespace":"\\Tuxxedo\\Template","docblock":{"description":"Compiler option - Disable class call check","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"OPT_NO_CLOSURE_CALL_LIMIT","namespace":"\\Tuxxedo\\Template","docblock":{"description":"Compiler option - Disable closure call check","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"OPT_NO_INTERPOLATED_CALLS","namespace":"\\Tuxxedo\\Template","docblock":{"description":"Compiler option - Disable interpolated call protection","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"OPT_VERBOSE_TEST","namespace":"\\Tuxxedo\\Template","docblock":{"description":"Compiler option - Disable silent operator when running test()","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"docblock":true}},{"constant":"OPT_PARSE_IF_TAGS","namespace":"\\Tuxxedo\\Template","docblock":{"description":"Compiler option - parse <if> tags","tags":{"var":"integer","since":"1.2.0"}},"metadata":{"docblock":true}}],"properties":[{"property":"source","docblock":{"description":"The uncompiled raw source code","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"compiled_source","docblock":{"description":"The compiled source code","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"error_reporting","docblock":{"description":"Error reporting buffer","tags":{"var":"integer","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"stack_data","docblock":{"description":"The current compiler stack data","tags":{"var":"\\stdClass","since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"options","docblock":{"description":"Compiler options bitmask","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"functions","docblock":{"description":"The default functions to allow in expressions, note\r\nthat this also contains some predefined special\r\nkeywords for expressions, these must be lowercase if\r\nmanually added","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"classes","docblock":{"description":"The default class instances to allow in expressions","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"closures","docblock":{"description":"The default closures to allow in expressions","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Template compiler constructor","tags":{"param":[["integer","The compiler options, this is used for recursive code by the compiler, or by setting the default"],["integer","The current compiler stack data, this is only used for recursive calls"]],"changelog":[["1.1.0","Changed the second parameter to $stack_data"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setOptions","docblock":{"description":"Set a new compiler option","tags":{"param":[["integer","The new compiler bitmask"],["boolean","Whether to add it the bitmask to the current bitmask or reset it before"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getOptions","docblock":{"description":"Gets the current compiler options","tags":{"return":["integer","The current compiler options"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"allowFunction","docblock":{"description":"Allows a new function to be used in expressions","tags":{"param":[["string","A function name to be allowed in expressions, notice that this have to be an existing function and not a method"]],"return":["boolean","Returns true if success, and false if the function doesn't exists or already is loaded"],"changelog":[["1.2.0","This method no longer validates the input"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"allowClass","docblock":{"description":"Allows a new class instance to be used in expressions","tags":{"param":[["string","A class instance name to be allowed in expressions, notice that this is the instance name of the variable, not the class itself"]],"return":["boolean","Returns true if success, and false if already is loaded"],"changelog":[["1.2.0","This method no longer validates the input"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"allowClosure","docblock":{"description":"Allows a closure within expressions","tags":{"param":[["string","The closure expression name (to allow $closure, supply 'closure')"]],"return":["boolean","Returns true if success, and false if already is loaded"],"changelog":[["1.2.0","This method no longer validates the input"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"symtable","docblock":{"description":"Updates a internal symbol table","tags":{"param":[["string","The symbol table to update"],["string","The symbol to be added"],["integer","The symbol table bitfield"]],"return":["boolean","Returns true if success, and false if the symbol already exists"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"compile","docblock":{"description":"Compiles a template source","tags":{"return":["void","No value is returned"],"throws":[["\\Tuxxedo\\Exception\\TemplateCompiler","Throws a compiler exception in case of a syntax error"]],"changelog":[["1.1.0","Exceptions are now way more expressive in terms of their messages by returning the stack data"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getCompiledSource","docblock":{"description":"Gets the compiled source","tags":{"return":["string","Returns the compiled source from the last successful compilation and false on error"],"changelog":[["1.1.0","This method used to be called 'get()'"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setSource","docblock":{"description":"Sets a new uncompiled source code","tags":{"param":[["string","The new uncompiled source code"]],"return":["void","No value is returned"],"changelog":[["1.1.0","This method used to be called 'set()'"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getSource","docblock":{"description":"Gets the uncompiled source code","tags":{"return":["string","Returns the uncompiled source code and false on error"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"test","docblock":{"description":"Tests a compiled template for parse errors","tags":{"return":["boolean","Returns a boolean value depending on the test, NULL is returned if the source isn't compiled yet"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Template","extends":"","implements":[],"docblock":{"description":"Template compiler, this compiles raw template source\r\ncode into php executable code with support for\r\nexpressions. It supports recursive expressions with\r\nelse support.\r\n\r\nThis class is inspired by the vBulletin template\r\ncompilation model.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Template\/Compiler\/Dummy.php":{"namespaces":{"\\Tuxxedo\\Template\\Compiler":{"docblock":{"description":"Template compiler namespace, this contains all components that the\r\ncompiler utilizes when compiling or testing the generated template\r\ncode.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Template\\Compiler\\Dummy":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__call","docblock":{"description":"Dummy method to emulate method overloading\r\nto make testing pass","tags":{"param":[["string","The method name to call"],["array","The arguments to pass to the method"]],"return":["boolean","Always returns true"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__invoke","docblock":{"description":"Dummy method to emulate method overloading\r\nto make testing pass (closures)","tags":{"param":[["array","The arguments to pass to the method"]],"return":["boolean","Always returns true"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Template\\Compiler","extends":"","implements":[],"docblock":{"description":"Dummy compiler class, this is used for emulation within the\r\ntest method to make sure object oriented features may be compiled.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Template\/Layout.php":{"namespaces":{"\\Tuxxedo\\Template":{"docblock":{"description":"Template namespace. This contains special routines for template handling\r\nand such. It is also the home of the template compiler.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Registry":"","\\Tuxxedo\\Template":""},"classes":{"\\Tuxxedo\\Template\\Layout":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructor, constructs a new template layout","tags":{"param":[["string","The name of the view to load as layout"],["array","Default variables to set"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setLayout","docblock":{"description":"Whether to set this as a layout or not, disabled","tags":{"param":[["boolean","Set to true to activate layout mode, and false to not, disabled for 'Layout' templates"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Template","extends":"\\Tuxxedo\\Template","implements":[],"docblock":{"description":"Template layout, this is identical to the basic template class, except that\r\nit will wrap around the 'header' and 'footer' templates to its content.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Upload.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":""},"classes":{"\\Tuxxedo\\Upload":{"reuses":["\\Tuxxedo\\Design\\EventCaller"],"constants":[],"properties":[{"property":"event_handler","docblock":{"description":"The event handler","tags":{"var":"\\Tuxxedo\\Design\\EventHandler"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"queue","docblock":{"description":"Upload queue","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"valid_backends","docblock":{"description":"List of valid backends","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new upload object","tags":{}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"queue","docblock":{"description":"Queues a new object for upload","tags":{"param":[["string","The protocol to use as backend for this upload transfer ('post' for HTML forms, 'url' for URLs)"],["string","The field name (<input type=\"file\" name=\"XXX\" \/> name for 'post', 'http:\/\/www.domain.tld\/file.ext' for 'url')"],["string","Optionally the file name the file should have, pass NULL to retain the original filename"],["string","Optionally the extension the file should have (for example: 'jpg'), pass NULL to retain the original extension"],["string","Optionally the name identifier if this item might be unqueued at a later point"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"unqueue","docblock":{"description":"Unqueues an object","tags":{"param":[["string","The name optionally supplied to the queue method"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"upload","docblock":{"description":"Invokes the uploading process, and clearing the queue after","tags":{"return":["array","Returns an array with a list of status descriptors"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception on corrupted backends"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__invoke","docblock":{"description":"","tags":{"return":["array","Returns an array with a list of status codes, false in case of a general failure"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":[],"docblock":{"description":"Upload API\r\n\r\nThis class allows to queue multiple files to upload files, files\r\ncan be uploaded using different backends. By default the following\r\nare provided:\r\n\r\n\r\nCustom handlers can be used and will be loaded Just-In-Time as an\r\nthe queue reaches that file to be uploaded.\r\n\r\nFilters can be used to filter out files during the upload process,\r\nand can also be used to filter out files of specific types, for\r\nexample only allow upload of images, file renaming and so on.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Upload\/Backend.php":{"namespaces":{"\\Tuxxedo\\Upload":{"docblock":{"description":"Upload API namespace, this contains routines, and patterns for various\r\nupload related operations.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":[],"interfaces":{"\\Tuxxedo\\Upload\\Backend":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"process","docblock":{"description":"Tells the backend to process this input and initiate the transfer","tags":{"param":[["string","The input specific to this backend"],["string","Optionally the file name the file should have, pass NULL to retain the original filename"],["string","Optionally the extension the file should have (for example: 'jpg'), pass NULL to retain the original extension"]],"return":["boolean","Returns true if the transfer was a success, otherwise false (failed hooks and the like)"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Upload","extends":"","implements":[],"docblock":{"description":"Upload backend interface\r\n\r\nThis interface declares a structured design for how backends must be\r\nimplemented in order to be operational.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Upload\/Backend\/Post.php":{"namespaces":{"\\Tuxxedo\\Upload\\Backend":{"docblock":{"description":"Upload backend namespace, this contains backend implementations for file\r\ntransfers using various methods for the \\Tuxxedo\\Upload class.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":"","\\Tuxxedo\\Upload":""},"classes":{"\\Tuxxedo\\Upload\\Backend\\Post":{"reuses":[],"constants":[],"properties":[{"property":"handle","docblock":{"description":"Upload handle that loaded in this backend, to reference options\r\nand the like.","tags":{"var":"\\Tuxxedo\\Upload"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"event_handler","docblock":{"description":"Event handler, associated with the upload handle","tags":{"var":"\\Tuxxedo\\Design\\EventHandler"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"finfo","docblock":{"description":"Fileinfo handle","tags":{"var":"resource"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor","tags":{"param":[["\\Tuxxedo\\Upload","The upload handle that initiated this backend"],["\\Tuxxedo\\Design\\EventHandler","The event handler associated with the upload handle"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"process","docblock":{"description":"Tells the backend to process this input and initiate the transfer","tags":{"param":[["string","The input specific to this backend"],["string","Optionally the file name the file should have, pass NULL to retain the original filename"],["string","Optionally the extension the file should have (for example: 'jpg'), pass NULL to retain the original extension"]],"return":["boolean","Returns true if the transfer was a success, otherwise false (failed hooks and the like)"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Upload\\Backend","extends":"","implements":["\\Tuxxedo\\Upload\\Backend"],"docblock":{"description":"Upload backend for HTTP POST requests, this enables the possibility of the\r\nHTML tag: <input type=\"file\" ... \/> to be used.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Upload\/Backend\/Url.php":{"namespaces":{"\\Tuxxedo\\Upload\\Backend":{"docblock":{"description":"Upload backend namespace, this contains backend implementations for file\r\ntransfers using various methods for the \\Tuxxedo\\Upload class.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":"","\\Tuxxedo\\Upload":""},"classes":{"\\Tuxxedo\\Upload\\Backend\\Url":{"reuses":[],"constants":[{"constant":"WRITE_BLOCK_SIZE","namespace":"\\Tuxxedo\\Upload\\Backend","docblock":{"description":"Interal value for how much to read per block when saving the\r\nfile","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"WRITE_MAX_ATTEMPTS","namespace":"\\Tuxxedo\\Upload\\Backend","docblock":{"description":"Internal value for how many naming attempts that can be performed\r\nbefore giving up","tags":{"var":"integer"}},"metadata":{"docblock":true}}],"properties":[{"property":"handle","docblock":{"description":"Upload handle that loaded in this backend, to reference options\r\nand the like.","tags":{"var":"\\Tuxxedo\\Upload"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"event_handler","docblock":{"description":"Event handler, associated with the upload handle","tags":{"var":"\\Tuxxedo\\Design\\EventHandler"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"finfo","docblock":{"description":"Fileinfo handle","tags":{"var":"resource"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}},{"property":"protocols","docblock":{"description":"List of allowed protocols","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":true,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor","tags":{"param":[["\\Tuxxedo\\Upload","The upload handle that initiated this backend"],["\\Tuxxedo\\Design\\EventHandler","The event handler associated with the upload handle"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"allowProtocol","docblock":{"description":"Allows a new protocol to be used","tags":{"param":[["string","The new protocol to allow"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"disallowProtocol","docblock":{"description":"Disallows an already allowed protocol","tags":{"param":[["string","The protocol to disallow"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"getProtocols","docblock":{"description":"Gets the allowed protocols","tags":{"return":["array","Returns the list of allowed protocols (may be an empty array)"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"process","docblock":{"description":"Tells the backend to process this input and initiate the transfer","tags":{"param":[["string","The input specific to this backend"],["string","Optionally the file name the file should have, pass NULL to retain the original filename"],["string","Optionally the extension the file should have (for example: 'jpg'), pass NULL to retain the original extension"]],"return":["boolean","Returns true if the transfer was a success, otherwise false (failed hooks and the like)"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Upload\\Backend","extends":"","implements":["\\Tuxxedo\\Upload\\Backend"],"docblock":{"description":"Upload backend for HTTP URLs","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Upload\/Descriptor.php":{"namespaces":{"\\Tuxxedo\\Upload":{"docblock":{"description":"Upload API namespace, this contains routines, and patterns for various\r\nupload related operations.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Upload\\Descriptor":{"reuses":[],"constants":[{"constant":"ERR_NONE","namespace":"\\Tuxxedo\\Upload","docblock":{"description":"Upload error constant - None","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"ERR_UNKNOWN","namespace":"\\Tuxxedo\\Upload","docblock":{"description":"Upload error constant - Unknown (like no input etc)","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"ERR_SIZE","namespace":"\\Tuxxedo\\Upload","docblock":{"description":"Upload error constant - Size exceeded","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"ERR_CANT_WRITE","namespace":"\\Tuxxedo\\Upload","docblock":{"description":"Upload error constant - Cannot write (or move the uploaded file)","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"ERR_MIME_FINFO","namespace":"\\Tuxxedo\\Upload","docblock":{"description":"Upload error constant - Fileinfo failed (extension not available, or unable to resolve)","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"ERR_CUSTOM","namespace":"\\Tuxxedo\\Upload","docblock":{"description":"Upload error constant - Custom (caused by event callbacks)","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"ERR_NAMING","namespace":"\\Tuxxedo\\Upload","docblock":{"description":"Upload error constant - Naming (could not determine name if filename or extension was missing in the original file)","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"ERR_OVERRIDE","namespace":"\\Tuxxedo\\Upload","docblock":{"description":"Upload error constant - File override (if 'allow_override' is false and naming matches)","tags":{"var":"integer"}},"metadata":{"docblock":true}}],"properties":[{"property":"error","docblock":{"description":"Error code (defaults to none)","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"filename","docblock":{"description":"Filename without the extension","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"extension","docblock":{"description":"File extension (may be empty) and does not contain the initial dot","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"mime","docblock":{"description":"File MIME type, this may be fake","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"real_mime","docblock":{"description":"Real MIME type, this is false by default and will only have a value if\r\nthe 'resolve_mime' option was on in the upload handle","tags":{"var":"boolean|string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"rsrc","docblock":{"description":"External resource, some backends, like the 'url' may supply the socket\r\nhere","tags":{"var":"mixed"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"property":"backend","docblock":{"description":"The backend type for this descriptor","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"methods":[],"namespace":"\\Tuxxedo\\Upload","extends":"","implements":[],"docblock":{"description":"Upload descriptor, this contains meta information regarding the\r\nuploaded file, including error codes in a consistent","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/User.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Datamanager":"","\\Tuxxedo\\Design":"","\\Tuxxedo\\Registry":"","\\Tuxxedo\\Session":""},"classes":{"\\Tuxxedo\\User":{"reuses":[],"constants":[{"constant":"OPT_SESSION","namespace":"\\Tuxxedo","docblock":{"description":"User info constant, also get session information if\r\navailable","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"OPT_CACHE","namespace":"\\Tuxxedo","docblock":{"description":"User info constant, cache the user information within\r\nthe class to save a query if trying to query the same\r\nuser again  twice","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"OPT_CURRENT_ONLY","namespace":"\\Tuxxedo","docblock":{"description":"User info constant, return a reference to the current\r\nstored information, no matter if a user is logged on or\r\nnot","tags":{"var":"integer"}},"metadata":{"docblock":true}}],"properties":[{"property":"registry","docblock":{"description":"Private instance to the Tuxxedo registry","tags":{"var":"\\Tuxxedo\\Registry"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"userinfo","docblock":{"description":"User information","tags":{"var":"stdClass"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"usergroupinfo","docblock":{"description":"Usergroup information","tags":{"var":"stdClass"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"session","docblock":{"description":"User session","tags":{"var":"\\Tuxxedo\\Session"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"sessiondm","docblock":{"description":"User session datamanager","tags":{"var":"\\Tuxxedo\\Datamanager\\Adapter\\Session"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"cache","docblock":{"description":"Cached userinfo, for calls to get user information\r\nabout a specific user","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructor, instanciates a new user session.","tags":{"param":[["boolean","Whether to auto detect if a user is logged in or not"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__destruct","docblock":{"description":"Destructor, executes the cleanup queries etc.","tags":{}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"login","docblock":{"description":"Authenticates a user. If a user is currently logged in, then it\r\nwill be logged out and the session id will be regenerated.\r\n\r\nA user can be logged in by a unique identifier, such as:\r\n\r\nTo attempt a login, the constructor must be instanciated with the","tags":{"param":[["string","User identifier"],["string","User's password (raw format)"],["string","The identifier field to check and validate against"]],"return":["boolean","Returns true if the user was logged in with success, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"logout","docblock":{"description":"Log the current logged in user out","tags":{"param":[["boolean","Whether to terminate and restart the session or not"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getUserInfo","docblock":{"description":"Fetch user data about a specific user","tags":{"param":[["string","The user identifier"],["string","The user identifier field, this defaults to 'id' to lookup by user id"],["integer","Additional options, this uses the \\Tuxxedo\\User::OPT_* constants as a bitmask"]],"return":["object","Returns a user data object with all user information if a user was found, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getUserGroupInfo","docblock":{"description":"Get usergroup information about the current user's group\r\nor a customed defined based on the usergroup id","tags":{"param":[["integer","The usergroup id to check, if NULL is passed then the current logged in usergroup is returned"]],"return":["\\stdClass","Returns a standard object with the relevant usergroup information if found, otherwise false is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isMemberOf","docblock":{"description":"Checks whether the user id a member of a\r\nspecific usergroup. This only checks for the\r\nprimary usergroup","tags":{"param":[["integer","The usergroup id to check"]],"return":["boolean","Returns true if the user is a member of that usergroup otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isLoggedIn","docblock":{"description":"Checks whether this session have a user logon or not","tags":{"return":["boolean","Returns true if a user is logged on, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isGranted","docblock":{"description":"Checks whether the user's permissions can access a\r\ncertain feature. Note that this checks for the user's\r\npermissions only, not per usergroup permissions unless\r\nthe secondary parameter is true","tags":{"param":[["integer","The permission to check"],["boolean","Whether to check if the user's group have permission as a fallback"]],"return":["boolean","Returns true if the user is granted access, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isGroupGranted","docblock":{"description":"Checks whether the user's usergroup permissions can\r\naccess a certain feature. Note that this checks for\r\nthe user's usergroup permissions only, not per\r\nuser permissions","tags":{"param":[["integer","The permission to check"]],"return":["boolean","Returns true if the usergroup is granted access, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setPermissionConstants","docblock":{"description":"Defines global constant values of datastore permissions","tags":{"return":["void","No value is returned"],"since":"1.1.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"isValidPassword","docblock":{"description":"Checks if a password matches with its hash value","tags":{"param":[["string","The raw password"],["string","The user salt that generated the password"],["string","The hashed password"]],"return":["boolean","Returns true if the password matches, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"getPasswordHash","docblock":{"description":"Hashes a password using a salt","tags":{"param":[["string","The password to encrypt"],["string","The unique salt for this password"]],"return":["string","Returns the computed password"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"getPasswordSalt","docblock":{"description":"Generates a salt for using with password hashing","tags":{"param":[["integer","The number of bytes the salt should be, must be 8 or greater"]],"return":["string","Returns the computed salt"],"changelog":[["1.1.0","This method will now properly change character casing instead of a fixed set of cased characters"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":[],"docblock":{"description":"User session class, this class manages the current user\r\nsession information and permission bitfields.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Utilities.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Registry":""},"classes":{"\\Tuxxedo\\Utilities":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"date","docblock":{"description":"Date formatting function\r\n\r\nIf the 'datetime' registry instance is registered, then this function\r\nwill use localized timezone values.","tags":{"param":[["integer","Optional timestamp to use, defaults to the current timestamp at script start (uses UTC)"],["string","Optional format to use, defaults to the 'date_format' option if available"]],"return":["string","Returns the formatted date"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"datef","docblock":{"description":"Date format shorthand method, uses current timestamp","tags":{"param":[["string","Optional format to use, defaults to the 'date_format' option if available"]],"return":["string","Returns the formatted date"],"since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}},{"method":"trimSql","docblock":{"description":"Trims whitespace in SQL in a very basic way\r\n\r\nTrimming will strip all whitespace pre and post string, and indented\r\nwhitespace even if it is contained within a 'string'.","tags":{"param":[["string","The SQL string to trim"]],"return":["string","Returns the trimmed SQL string"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"","implements":[],"docblock":{"description":"Utilities class wrapper. This class wraps around the previously\r\ndeclared prodecural functions, which now exists as static methods\r\nfor primarily autoloading reasoning.\r\n\r\nHandlers does not exists within this class.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Version.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":[],"classes":{"\\Tuxxedo\\Version":{"reuses":[],"constants":[{"constant":"SIMPLE","namespace":"\\Tuxxedo","docblock":{"description":"Engine simple version, this contains the current\r\nrelease in the form of:\r\n\r\nmajor.minor.release\r\n\r\nFor example, 1.0, 1.0.1 ect.","tags":{"var":"string"}},"metadata":{"docblock":true}},{"constant":"MAJOR","namespace":"\\Tuxxedo","docblock":{"description":"Major version number","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"MINOR","namespace":"\\Tuxxedo","docblock":{"description":"Minor version number","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"RELEASE","namespace":"\\Tuxxedo","docblock":{"description":"Release version number","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"ID","namespace":"\\Tuxxedo","docblock":{"description":"Engine version ID, this contains the version id in the form\r\nof:\r\n\r\nid = (major_version * 10000) + (minor_version * 100) + release_version\r\n\r\nExamples of the version id string can be:","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"PREVIEW","namespace":"\\Tuxxedo","docblock":{"description":"Development preview mode, this is set to true if this is a development\r\nrelease, like a Alpha, Beta or Release Candidate","tags":{"var":"boolean"}},"metadata":{"docblock":true}},{"constant":"PREVIEW_TYPE","namespace":"\\Tuxxedo","docblock":{"description":"Development preview type, this is set to the preview type, like 'Alpha',","tags":{"var":"string"}},"metadata":{"docblock":true}},{"constant":"PREVIEW_NUMBER","namespace":"\\Tuxxedo","docblock":{"description":"Development preview number, this is set to the preview number for the\r\ncurrent preview type. This is only set if this is a preview release","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"CODENAME","namespace":"\\Tuxxedo","docblock":{"description":"Development codename, this value is always the same for each\r\npre-release of a new branch and only changes upon major or minor\r\nversion changes. Each release codename is based on influence that\r\ncaused a new version to branch out.","tags":{"var":"string"}},"metadata":{"docblock":true}},{"constant":"VCS_REVISION","namespace":"\\Tuxxedo","docblock":{"description":"Current version control system revision number","tags":{"var":"string"}},"metadata":{"docblock":true}},{"constant":"FULL","namespace":"\\Tuxxedo","docblock":{"description":"Engine version string, this is the full version string, which\r\nincludes the pre-release name, version and the version number\r\nof the upcoming version if pre-release. For example:","tags":{"var":"string"}},"metadata":{"docblock":true}}],"properties":[],"methods":[],"namespace":"\\Tuxxedo","extends":"","implements":[],"docblock":{"description":"Versioning class, contains all of the Core versioning","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Xml.php":{"namespaces":{"\\Tuxxedo":{"docblock":{"description":"Core Tuxxedo library namespace. This namespace contains all the main\r\nfoundation components of Tuxxedo Engine, plus additional utilities\r\nthats provided by default. Some of these default components have\r\nsub namespaces if they provide child objects.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":"","\\Tuxxedo\\Xml\\Parser":""},"classes":{"\\Tuxxedo\\Xml":{"reuses":[],"constants":[{"constant":"PARSER_SIMPLEXML","namespace":"\\Tuxxedo","docblock":{"description":"Parser constant - SimpleXML","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"PARSER_DOM","namespace":"\\Tuxxedo","docblock":{"description":"Parser constant - DOM","tags":{"var":"integer"}},"metadata":{"docblock":true}},{"constant":"READ_BLOCK_SIZE","namespace":"\\Tuxxedo","docblock":{"description":"Internal value for how many bytes to read at a time","tags":{"var":"integer"}},"metadata":{"docblock":true}}],"properties":[{"property":"internal_parser","docblock":{"description":"Internal parser to use","tags":{"var":"integer"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new XML parser, this will auto determine the parser to use\r\nunless disabled, if disabled then the setInternalParser() method must be\r\ncalled manually.","tags":{"param":[["boolean","Whether or not to disable the auto check (defaults to off)"]],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if no parser could be found"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"factory","docblock":{"description":"Internal factory method, this creates and returns a new XML parser object\r\nbased on the internal parser value set.","tags":{"return":["\\Tuxxedo\\Xml\\Parser","Returns a new XML parser to use"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if no parser is set"]]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"method":"setInternalParser","docblock":{"description":"Sets the internal parser","tags":{"param":[["integer","The new parser to use"]],"return":["void","No value is returned"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"setAutoInternalParser","docblock":{"description":"Sets the internal parser to auto decide","tags":{"return":["void","No value is returned"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if no parser could be found"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"parseFile","docblock":{"description":"Parses a file","tags":{"param":[["string","The XML file to parse"]],"return":["\\Tuxxedo\\Xml\\Tree","Returns the parsed XML as a tree object"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if the content from the file could not be obtained or if the parser could not be created"],["\\Tuxxedo\\Exception\\Xml","Throws an XML exception if XML parsing fails for some reason"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"parseString","docblock":{"description":"Parses a string","tags":{"param":[["string","The XML string to parse"]],"return":["\\Tuxxedo\\Xml\\Tree","Returns the parsed XML as a tree object"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if the parser could not be created"],["\\Tuxxedo\\Exception\\Xml","Throws an XML exception if XML parsing fails for some reason"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"parseStream","docblock":{"description":"Parses a stream\r\n\r\nThis will internally reset the internal file pointer to position 0\r\nand start reading from there.","tags":{"param":[["string","The XML stream to parse"]],"return":["\\Tuxxedo\\Xml\\Tree","Returns the parsed XML as a tree object"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if no data could be read or if the stream is invalid or if the parser could not be created"],["\\Tuxxedo\\Exception\\Xml","Throws an XML exception if XML parsing fails for some reason"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo","extends":"","implements":[],"docblock":{"description":"XML Parser for Engine, this class works as a factory for a generic\r\nxml parsing. By default the internal parser will use the following\r\nfallbacks:\r\n\r\n\r\nA selected parser can be choosen if desired using the setInternalParser()\r\nmethod. The returned XML will be returned in a Tree structure, which is\r\ncommon for all backends.\r\n\r\nParsers may change the internal values of the LibXML configuration during\r\nparsing to either get better debuggable information or other reasons.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Xml\/Parser.php":{"namespaces":{"\\Tuxxedo\\Xml":{"docblock":{"description":"XML namespace, this namespace contains all the XML parsers, including the\r\ncore structure like the tree that is common for all parsers.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":""},"classes":{"\\Tuxxedo\\Xml\\Parser":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"parse","docblock":{"description":"Interface method - Parse the file and convert it into a tree structure","tags":{"return":["\\Tuxxedo\\Xml\\Tree","Returns an XML tree structure"],"throws":[["\\Tuxxedo\\Exception\\Xml","Throws an XML exception if parsing fails for some reason"]]}},"metadata":{"final":false,"abstract":true,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"factory","docblock":{"description":"Factory method, creates a new parser","tags":{"param":[["string","The parser to use, one of the four default parsers can be used here or a fully qualified class name for a custom parser"]],"return":["\\Tuxxedo\\Xml\\Parser","Returns an XML parser of the desired type"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if the parser cannot be created"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":true,"docblock":true}}],"namespace":"\\Tuxxedo\\Xml","extends":"","implements":[],"docblock":{"description":"XML Parser that works as an interface for all the parsers, this also contains\r\nthe ability to load up any parser.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":true,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Xml\/Parser\/Dom.php":{"namespaces":{"\\Tuxxedo\\Xml\\Parser":{"docblock":{"description":"XML namespace, this namespace contains all the XML parsers, including the\r\ncore structure like the tree that is common for all parsers.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":"","\\Tuxxedo\\Xml":""},"classes":{"\\Tuxxedo\\Xml\\Parser\\Dom":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new DOM parser object","tags":{"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if the DOM extension is not available"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"parse","docblock":{"description":"Parses an XML string","tags":{"param":[["string","The XML to parse"]],"reutrn":{"1":"\\Tuxxedo\\Xml\\Tree","2":"Returns","3":"an","4":"XML","5":"tree","6":"of","7":"the","8":"parsed","9":"XML"},"throws":[["\\Tuxxedo\\Exception\\Xml","Throws an XML exception if parsing fails for some reason"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"doConvertDOMNode","docblock":{"description":"Converts a node to a tree recursively","tags":{"param":[["\\DOMNode","The DOMNode node object"],["boolean","Whether or not this is the root element, defaults to false"]],"return":["\\Tuxxedo\\Xml\\Tree","Returns a tree structure"]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Xml\\Parser","extends":"\\Tuxxedo\\Xml\\Parser\\Simplexml","implements":[],"docblock":{"description":"DOM parser interface.\r\n\r\nThis interface extends the SimpleXML parser as it will use that for\r\nnode convertion in case that this is manually set as an internal\r\nparser and SimpleXML is available.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Xml\/Parser\/Simplexml.php":{"namespaces":{"\\Tuxxedo\\Xml\\Parser":{"docblock":{"description":"XML namespace, this namespace contains all the XML parsers, including the\r\ncore structure like the tree that is common for all parsers.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Exception":"","\\Tuxxedo\\Xml":""},"classes":{"\\Tuxxedo\\Xml\\Parser\\Simplexml":{"reuses":[],"constants":[],"properties":[],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new SimpleXML parser object","tags":{"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception if the simplexml extension is not available"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"parse","docblock":{"description":"Parses an XML string","tags":{"param":[["string","The XML to parse"]],"reutrn":{"1":"\\Tuxxedo\\Xml\\Tree","2":"Returns","3":"an","4":"XML","5":"tree","6":"of","7":"the","8":"parsed","9":"XML"},"throws":[["\\Tuxxedo\\Exception\\Xml","Throws an XML exception if parsing fails for some reason"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"doConvertNode","docblock":{"description":"Converts a node to a tree recursively","tags":{"param":[["\\SimpleXMLElement","The SimpleXMLElement node object"]],"return":["\\Tuxxedo\\Xml\\Tree","Returns a tree structure"]}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Xml\\Parser","extends":"\\Tuxxedo\\Xml\\Parser","implements":[],"docblock":{"description":"SimpleXML parser interface.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/Xml\/Tree.php":{"namespaces":{"\\Tuxxedo\\Xml":{"docblock":{"description":"XML namespace, this namespace contains all the XML parsers, including the\r\ncore structure like the tree that is common for all parsers.","tags":{"author":"Ross Masters <ross@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library"}},"metadata":{"docblock":true}}},"aliases":{"\\Tuxxedo\\Design":""},"classes":{"\\Tuxxedo\\Xml\\Tree":{"reuses":[],"constants":[],"properties":[{"property":"name","docblock":{"description":"Holds the node name","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"value","docblock":{"description":"Holds the node value","tags":{"var":"string"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}},{"property":"nodes","docblock":{"description":"Holds the child nodes","tags":{"var":"array"}},"metadata":{"final":false,"abstract":false,"public":false,"protected":true,"private":false,"static":false,"docblock":true}}],"methods":[{"method":"__construct","docblock":{"description":"Constructs a new tree object","tags":{"param":[["string","The name of this node"],["string","The value of this node if any, use an empty string for none"],["array","List of attributes for this node, use NULL for none"],["array","List of the child nodes for this node, use NULL for none"]]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getName","docblock":{"description":"Gets the node name","tags":{"return":["string","Returns the current node name"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getValue","docblock":{"description":"Gets the value of the node","tags":{"return":["string","Returns the value of this node if any"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"getNode","docblock":{"description":"Gets a node based on its name","tags":{"param":[["string","The name of the node"]],"return":["mixed","May return an array or a tree structure whether or not there were multiple nodes with this name, and false on error"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__toString","docblock":{"description":"Gets the value of this node if converted to a string","tags":{"return":["string","Returns the value of this node if any"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}},{"method":"__get","docblock":{"description":"Overloads the get property handler to allow direct access of child nodes","tags":{"param":[["string","The property name"]],"return":["\\Tuxxedo\\Xml\\Tree","Returns a tree structure for valid nodes, otherwise false"]}},"metadata":{"final":false,"abstract":false,"public":true,"protected":false,"private":false,"static":false,"docblock":true}}],"namespace":"\\Tuxxedo\\Xml","extends":"\\Tuxxedo\\Design\\InfoAccess","implements":[],"docblock":{"description":"XML Tree structure, this is the common access interface for the parsed XML data\r\nreturned by all parsers.","tags":{"author":"Kalle Sommer Nielsen <kalle@tuxxedo.net>","version":"1.0","package":"Engine","subpackage":"Library","since":"1.2.0"}},"metadata":{"final":false,"abstract":false,"docblock":true}}},"interfaces":[],"traits":[],"constants":[],"functions":[]},"library\/Tuxxedo\/functions.php":{"namespaces":[],"aliases":{"\\Tuxxedo\\Debug":"","\\Tuxxedo\\Exception":"","\\Tuxxedo\\Registry":"","\\Tuxxedo\\Template":"","\\Tuxxedo\\Utilities":"","\\Tuxxedo\\Version":""},"classes":[],"interfaces":[],"traits":[],"constants":[],"functions":[{"function":"tuxxedo_exception_handler","namespace":"","docblock":{"description":"Exception handler, this terminates the script execution\r\nif an exception is fatal and buffer non fatal exceptions\r\nso they can be displayed on the template","tags":{"param":[["\\Exception","The exception to handle"]],"return":["void","No value is returned"],"changelog":[["1.2.0","This function is now CLI compatible"]]}},"metadata":{"docblock":true}},{"function":"tuxxedo_error_handler","namespace":"","docblock":{"description":"Error handler, this handles general errors from php. If\r\nthe script should error non fatal errors such as warnings\r\nor notices, it will add them to the error buffer and show\r\nthen on the main template output. Note that this function is\r\nnot designed to be called directly and should be called by\r\nphp itself","tags":{"param":[["integer","Error level"],["string","Error message"],["string","File path"],["integer","Line number"]],"return":["void","No value is returned"],"throws":[["\\Tuxxedo\\Exception\\Basic","Throws a basic exception on fatal error types"]],"changelog":[["1.2.0","This function is now CLI compatible"]]}},"metadata":{"docblock":true}},{"function":"tuxxedo_handler","namespace":"","docblock":{"description":"Handler register\r\n\r\nThis function is a wrapper for registering handlers to various\r\nfunctions, calling this function for registering handlers should\r\nbe registered using this function or some features may stop working\r\nunexpectedly","tags":{"param":[["string","The handler to register, can be one of 'error', 'exception', 'shutdown' or 'autoload'"],["callback","The callback to register to the handler"]],"return":["callback","Returns a callback, if only the first parameter is set, may also return false on error in any case"],"since":"1.1.0"}},"metadata":{"docblock":true}},{"function":"tuxxedo_doc_error","namespace":"","docblock":{"description":"Print a document error (startup) and halts script execution","tags":{"param":[["mixed","The message to show, this can also be an exception"]],"return":["void","No value is returned"],"changelog":[["1.2.0","This function now prints SQL query backtraces"]]}},"metadata":{"docblock":true}},{"function":"tuxxedo_cli_error","namespace":"","docblock":{"description":"Print a document error (startup) and halts script execution for CLI.","tags":{"param":[["mixed","The message to show, this can also be an exception"]],"return":["void","No value is returned"],"since":"1.2.0"}},"metadata":{"docblock":true}},{"function":"tuxxedo_basic_error","namespace":"","docblock":{"description":"Basic error, this function picks the CLI handler for CLI mode\r\nand web otherwise for formatting to prevent having a lot of if\r\nconditionals to call the correct function.\r\n\r\nThis function terminates the script.","tags":{"param":[["mixed","The message to show, this can also be an exception"]],"return":["void","No value is returned"],"since":"1.2.0"}},"metadata":{"docblock":true}},{"function":"tuxxedo_errorf","namespace":"","docblock":{"description":"Formattable error, this function is SAPI aware and will\r\ncall the CLI error handler on terminals","tags":{"param":[["string","The error message, in a printf-alike formatted string or just a normal string"],["mixed","Optional argument #n for formatting"]],"return":["Void","No value is returned"]}},"metadata":{"docblock":true}},{"function":"tuxxedo_trim_path","namespace":"","docblock":{"description":"Trims a file path to hide its path prior to the root\r\nof the application","tags":{"param":[["string","The path to trim"]],"return":["string","The trimmed path"],"changelog":[["1.2.0","Removed the $debug_trim parameter"]]}},"metadata":{"docblock":true}},{"function":"tuxxedo_shutdown_handler","namespace":"","docblock":{"description":"Shutdown handler","tags":{"return":["void","No value is returned"],"changelog":[["1.2.0","This function is now CLI compatible"]]}},"metadata":{"docblock":true}},{"function":"tuxxedo_multi_error","namespace":"","docblock":{"description":"Handles multiple errors repeatingly","tags":{"param":[["string","A sprintf-like format, only applies for singular errors (if $show_all is set to false)"],["array","An array with elements to loop through"],["string","A fully quantified exception name to throw, this should be able to handle multiple errors"],["boolean","Whether to display all errors or not"]],"return":["void","No value is returned"],"throws":[["mixed","Throws an exception until the errors have been cleared"]],"changelog":[["1.2.0","The $exception parameter now defaults to NULL"],["1.2.0","Added the $show_all parameter"]]}},"metadata":{"docblock":true}}]},"library\/bootstrap.php":{"namespaces":[],"aliases":{"\\Tuxxedo\\Bootstrap":"","\\Tuxxedo\\Template":""},"classes":[],"interfaces":[],"traits":[],"constants":{"TUXXEDO_DIR":{"namespace":"","docblock":{"description":"Sets the path to where the root script is, if the\r\nconstant CWD is defined before including this file,\r\nthen it will be used as root dir","tags":{"var":"string"}},"metadata":{"docblock":true}},"TUXXEDO_LIBRARY":{"namespace":"","docblock":{"description":"Sets the library path","tags":{"var":"string"}},"metadata":{"docblock":true}}},"functions":[]},"library\/configuration.php":{"namespaces":[],"aliases":[],"classes":[],"interfaces":[],"traits":[],"constants":[],"functions":[]}}